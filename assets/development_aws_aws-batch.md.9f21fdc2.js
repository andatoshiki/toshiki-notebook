import{_ as s,a as n,b as a,c as l,d as p,e as o,f as e,g as t,h as c,i as r,j as y,k as F,l as i,m as D,n as A,o as B,p as C,q as u,r as b,s as m}from"./chunks/cloud_development.e43e5d4a.js";import{_ as d,c as f,o as h,R as E}from"./chunks/framework.a1bac067.js";const T=JSON.parse('{"title":"Hands-on #4: AWS Batch を使って機械学習のハイパーパラメータサーチを並列化する","description":"","frontmatter":{},"headers":[],"relativePath":"development/aws/aws-batch.md","filePath":"development/aws/aws-batch.md","lastUpdated":1684903419000}'),_={name:"development/aws/aws-batch.md"},g=E('<h1 id="hands-on-4-aws-batch-を使って機械学習のハイパーパラメータサーチを並列化する" tabindex="-1">Hands-on #4: AWS Batch を使って機械学習のハイパーパラメータサーチを並列化する <a class="header-anchor" href="#hands-on-4-aws-batch-を使って機械学習のハイパーパラメータサーチを並列化する" aria-label="Permalink to &quot;Hands-on \\#4: AWS Batch を使って機械学習のハイパーパラメータサーチを並列化する&quot;">​</a></h1><p>ハンズオン第三回では， ECS と Fargate を使って自動質問回答システムを構築した． シンプルながらも，複数の質問が送られた場合には並列にジョブが実行され，ユーザーに答えが返されるシステムを作ることができた． ここでは，すでに学習済みの言語モデルを用いてアプリケーションを構築した． しかし，一般的に言って，機械学習のワークフローでは自分で作ったモデルを訓練することが最初のステップにあるはずである． そこで，ハンズオン第四回では，クラウドを用いて機械学習の訓練を並列化・高速化することを考える．</p><p>本ハンズオンでは深層学習におけるハイパーパラメータ最適化を取り上げる． ハイパーパラメータとは，勾配降下法によって最適化されるニューラルネットのパラメータの外にあるパラメータのことであり，具体的にはモデルの層の幅・深さなどネットワークのアーキテクチャに関わるもの，学習率やモメンタムなどパラメータの更新則に関わるものなどが含まる． 深層学習においてハイパーパラメータの調整はとても重要なタスクである． しかしながら，ハイパーパラメータを調整するには，少しずつ条件を変えながら何度もニューラルネットを学習させる必要があり，多くの計算時間がかかる． 研究・開発においては，スループットよくたくさんのモデルの可能性を探索することが生産性を決める重要なファクターであり，ハイパーパラメータ探索を高速に解くという問題は極めて関心が高い． 本ハンズオンでは，クラウドの強力な計算リソースを利用して並列的にニューラルネットの訓練を実行することで，この問題を解く方法を学んでいこう．</p><h2 id="auto-scaling-groups-asg" tabindex="-1">Auto scaling groups (ASG) <a class="header-anchor" href="#auto-scaling-groups-asg" aria-label="Permalink to &quot;Auto scaling groups (ASG)&quot;">​</a></h2><p>ハンズオンに入っていく前に， <strong>Auto scaling groups (ASG)</strong> とよばれる EC2 の概念を知っておく必要がある．</p><p>ECS の概要を示した <a href="#ecs_overview">???</a> を振り返って見てほしい． 前章 (<a href="#sec_fargate_qabot">???</a>) でも説明したが， ECS のクラスターで計算を担う実体としては EC2 と Fargate を指定することができる． Fargate については前章で記述した． Fargate を用いると，自在にスケールする計算環境をとても簡単な設定で構築することができた． しかし， GPU を利用することができないなど，いくつかの制約があった． EC2 を使用した計算環境を指定することで，プログラミングの複雑度は増すが， GPU やその他のより高度かつ複雑な設定を伴ったクラスターを構築することができる．</p><p>EC2 クラスターには <strong>ASG</strong> と呼ばれるサービスが配置される． ASG は複数の EC2 インスタンスをロジカルな単位でグループ化することでクラスターを構成する． ASG はクラスター内に新しいインスタンスを起動する，あるいは不要になったインスタンスを停止するなどのスケーリングを担う． ASG で重要な概念として， <strong>desired capacity</strong>, <strong>minimum capacity</strong>, <strong>maximum capacity</strong> というパラメータがある． minimum capacity， maximum capacity は，それぞれクラスター内に配置できるインスタンスの数の最小値・最大値を指定するパラメータである． 前者は，クラスターに負荷がかかっていない場合でもアイドリング状態にあるインスタンスを維持することで，急に負荷が増大した時などのバッファーとして作用することができる． 後者は，負荷が急に増えたときに，過剰な数のインスタンスが起動する事態を防ぎ，経済的なコストの上限を定める役割を果たす．</p><p>desired capacity が，その時々でシステムが要求するインスタンスの数を指定する． desired capacity は，例えば 24 時間のリズムに合わせてインスタンスの数を増減させる (昼は多く夜は少なくなど) などの決まったスケジュールに基づいた設定を適用することができる． あるいはクラスター全体にかかっている負荷に応じて， desired capacity を動的に制御することも可能である． どのような基準でクラスターのスケーリングを行うかを定めるルールのことを，<strong>スケーリングポリシー</strong>とよぶ． たとえば，クラスター全体の稼働率 (負荷) を常に 80% に維持する，などのスケーリングポリシーが想定できる． この場合，クラスター全体の負荷が 80%を下回ったときにはクラスターからインスタンスが削除され，80%を超える (あるいは超えると予測される) 場合はインスタンスを追加する，という操作が ASG によって自動的に行われる．</p><p>上記のようなパラメータを検討し，ユーザーは ASG を作成する． ASG を作成したのち， ECS との連携をプログラムしてあげることで， ECS を介して ASG による EC2 クラスターにタスクを投入することが可能になる．</p><h2 id="aws-batch" tabindex="-1">AWS Batch <a class="header-anchor" href="#aws-batch" aria-label="Permalink to &quot;AWS Batch&quot;">​</a></h2><p><img src="'+s+'" alt="AWS Batch のアイコン"></p><p>先に説明したように， ECS と ASG を組み合わせることで，所望の計算クラスターを構築することが可能である． しかしながら， ECS と ASG にはかなり込み入った設定が必要であり，初心者にとっても経験者にとってもなかなか面倒なプログラミングが要求される． そこで， ECS と ASG によるクラスターの設計を自動化してくれるサービスが提供されている． それが <strong>AWS Batch</strong> である．</p><p>AWS Batch はその名のとおりバッチ (Batch) 化されたジョブ (入力データだけが異なる独立した演算が繰り返し実行されること) を想定している． 多くの科学計算や機械学習がバッチ計算に当てはまる． たとえば，初期値のパラメータを変えて複数のシミュレーションを走らせる，といったケースだ． AWS Batch を用いることの利点は，クラスターのスケーリングやジョブの割り振りはすべて自動で実行され， ユーザーはクラウドの舞台裏の詳細を気にすることなく，大量のジョブを投入できるシステムが手に入る点である． が，知識として背後では ECS/ASG/EC2 の三つ巴が協調して動作しているという点は知っておいてほしい．</p><p>AWS Batch では，ジョブの投入・管理をスムーズに行うため，次のような概念が定義されている (<a href="#fig_batch_concept">figure_title</a>)． まず， <strong>ジョブ (Job)</strong> というのが，AWS Batch によって実行される一つの計算の単位である． <strong>Job definitions</strong> とはジョブの内容を定義するものであり，これには実行されるべき Docker のイメージのアドレスや，割り当てる CPU・RAM の容量，環境変数などの設定が含まれる． Job definition に基づいて個々のジョブが実行される． ジョブが実行されると，ジョブは <strong>Job queues</strong> に入る． Job queues とは，実行待ち状態にあるジョブの列のことであり，時間的に最も先頭に投入されたジョブが最初に実行される． また，複数の queue を配置し， queue ごとに priority (優先度) を設定することが可能であり， priority の高い queue に溜まったジョブが優先的に実行される (筆者はこれをディズニーランドの&quot;ファストパス&quot;を連想して捉えている)． <strong>Compute environment</strong> とは，先述したクラスターとほぼ同義の概念であり，計算が実行される場所 (EC2 や Fargate からなるクラスター) を指す． Compute environment には，使用する EC2 のインスタンスタイプや同時に起動するインスタンス数の上限などの簡易なスケーリングポリシーが指定されている． Job queues は Compute environment の空き状況を監視しており， それに応じてジョブを Compute environment に投下する．</p><p>以上が AWS Batch を使用するうえで理解しておかなければならない概念であるが，くどくど言葉で説明してもなかなかピンとこないだろう． ここからは，実際に自分で手を動かしながら学んでいこう．</p><p><img src="'+n+`" alt="AWS Batch の主要な概念"></p><p><strong>EC2 or Fargate?</strong></p><p>ECS でクラスターを構成する際，計算を実行する場として EC2 と Fargate の二つの選択肢があることを説明した． それぞれ長所と短所を抱えているのだが，どのような場合にどちらを使うべきだろうか？ それを検討するため，まずは <a href="#tab:ec2_vs_fargate">table_title</a> を見てみよう． これは EC2 と Fargate の特徴をまとめたものである． 説明の都合上，大幅な粗視化が行われている点は留意していただきたい．</p><table><caption>EC2 vs Fargate</caption><colgroup><col style="width:33%;"><col style="width:33%;"><col style="width:33%;"></colgroup><thead><tr class="header"><th></th><th>EC2</th><th>Fargate</th></tr></thead><tbody><tr class="odd"><td><p>Compute capacity</p></td><td><p>Medium to large</p></td><td><p>Small to medium</p></td></tr><tr class="even"><td><p>GPU</p></td><td><p>Yes</p></td><td><p>No</p></td></tr><tr class="odd"><td><p>Launch speed</p></td><td><p>Slow</p></td><td><p>Fast</p></td></tr><tr class="even"><td><p>Task placement flexibility</p></td><td><p>Low</p></td><td><p>High</p></td></tr><tr class="odd"><td><p>Programming complexity</p></td><td><p>High</p></td><td><p>Low</p></td></tr></tbody></table><p>これまでに見てきたように， EC2 は最大の CPU 数・メモリーサイズが大きかったり， GPU を利用できたりするなど，単一のインスタンスでの計算能力は高い． 対して， Fargate は単一インスタンスの最大 CPU 数は 4 コアが上限である． その一方で，インスタンスの起動に要する時間は Fargate のほうが圧倒的に早く，より俊敏にクラスターのスケーリングを行うことができる． また，タスクをクラスターに投入する際のフレキシビリティも Fargate のほうが高い． フレキシビリティというのは，例えば一つのインスタンスで 2 つ以上のコンテナを走らせる，などの状況である． 単位 CPU あたりで処理されるタスクの数を最大化する際には，このような設計がしばしば採用される． プログラミングの複雑さという観点からは， Fargate のほうが一般的にシンプルな実装になる．</p><p>このように， EC2 と Fargate は互いに相補的な特性を有しており，アプリケーションによって最適な計算環境は検討される必要がある． また，EC2 と Fargate を両方用いたハイブリッドクラスターというのも定義可能であり，そのような選択肢もしばしば用いられる．</p><h2 id="準備" tabindex="-1">準備 <a class="header-anchor" href="#準備" aria-label="Permalink to &quot;準備&quot;">​</a></h2><p>ハンズオンのソースコードは GitHub の <a href="https://github.com/tomomano/learn-aws-by-coding/tree/main/handson/aws-batch" target="_blank" rel="noreferrer">handson/aws-batch</a> にある．</p><p>本ハンズオンの実行には，第一回ハンズオンで説明した準備 (<a href="#handson_01_prep">???</a>) が整っていることを前提とする． また， Docker が自身のローカルマシンにインストール済みであることも必要である．</p><p>このハンズオンは， <code>g4dn.xlarge</code> タイプの EC2 インスタンスを使うので，アメリカ東部 (<code>us-east-1</code>) リージョンでは 0.526 $/hour のコストが発生する． 東京 (<code>ap-northeast-1</code>) を選択した場合は 0.71 $/hour のコストが発生する．</p><p><a href="#sec:jupyter_and_deep_learning_setup">???</a> でも注意したが，このハンズオンを始める前に G タイプインスタンスの起動上限を AWS コンソールの EC2 管理画面から確認しよう． もし上限が 0 になっていた場合は，上限緩和の申請を行う必要がある． <a href="#sec:aws_batch_code">アプリケーションの説明</a> にも関連した情報を記載しているので，併せて参照されたい．</p><h2 id="mnist-手書き文字認識-再訪" tabindex="-1">MNIST 手書き文字認識 (再訪) <a class="header-anchor" href="#mnist-手書き文字認識-再訪" aria-label="Permalink to &quot;MNIST 手書き文字認識 (再訪)&quot;">​</a></h2><p>今回のハンズオンでは，機械学習のハイパーパラメータ調整を取り上げると冒頭で述べた． その最もシンプルな例題として， <a href="#sec_mnist_using_jupyter">???</a> で扱った MNIST 手書き文字認識の問題を再度取り上げよう． <a href="#sec_mnist_using_jupyter">???</a> では，適当にチョイスしたハイパーパラメータを用いてモデルの訓練を行った． ここで使用したプログラムのハイパーパラメータとしては，確率的勾配降下法 (SGD) における学習率やモメンタムが含まれる． コードでいうと，次の行が該当する．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">optimizer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> optim</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SGD</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">model</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parameters</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">lr</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0.01</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">momentum</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">)</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#ABB2BF;">optimizer </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> optim.</span><span style="color:#61AFEF;">SGD</span><span style="color:#ABB2BF;">(model.</span><span style="color:#61AFEF;">parameters</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;font-style:italic;">lr</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0.01</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">momentum</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0.5</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ここで使用された 学習率 (<code>lr=0.01</code>) やモメンタム (<code>momentum=0.5</code>) は恣意的に選択された値であり，これがベストな数値であるのかはわからない． たまたまこのチョイスが最適であるかもしれないし，もっと高い精度を出すハイパーパラメータの組が存在するかもしれない． この問題に答えるため，ハイパーパラメータサーチを行おう． 今回は，最もシンプルなアプローチとして，<strong>グリッドサーチ</strong>によるハイパーパラメータサーチを行おう．</p><p>機械学習のハイパーパラメータの最適化には大きく３つのアプローチが挙げられる． グリッドサーチ，ランダムサーチ，そしてベイズ最適化による方法である．</p><p>グリッドサーチとは，ハイパーパラメータの組をある範囲の中で可能な組み合わせをすべて計算し，最適なパラメータの組を見出す方法である． 最もシンプルかつ確実な方法であるが，すべての組み合わせの可能性を愚直に計算するので計算コストが大きい．</p><p>ランダムサーチ法とは，ハイパーパラメータの組をある範囲の中でランダムに抽出し，大量に試行されたランダムな組の中から最適なパラメータの組を見出す方法である． すべての可能性を網羅的に探索できるわけではないが，調整すべきパラメータの数が多数ある場合に，グリッドサーチよりも効率的に広い探索空間をカバーすることができる．</p><p>ベイズ最適化を用いた方法では，過去の探索結果から次にどの組み合わせを探索すべきかという指標を計算し，次に探索するパラメータを決定する． これにより，理論的にはグリッドサーチやランダムサーチ法よりも少ない試行回数で最適なパラメータにたどり着くことができる．</p><p>並列化の観点でいうと，グリッドサーチとランダムサーチは各ハイパーパラメータの組の計算は独立に実行することができるため並列化が容易である． このように独立したジョブとして分割・並列化可能な問題を Embarrassingly parallel な問題とよぶ (直訳すると&quot;恥ずかしいほど並列化可能な問題&quot;，ということになる)． Embarrassingly parallel な問題はクラウドの強力な計算リソースを用いることで，非常なシンプルな実装で解くことができる． この章ではこのようなタイプの並列計算を取り上げる．</p><p>一方，ベイズ最適化による方法は，過去の結果をもとに次の探索が決定されるので，並列化はそれほど単純ではない． 最近では <a href="https://optuna.org/" target="_blank" rel="noreferrer">optuna</a> などのハイパーパラメータ探索のためのライブラリが発達しており，ベイズ最適化の数理的な処理を自動で実行してくれるので便利である． これらのライブラリを使うと，もし一台のコンピュータ (ノード) の中に複数の GPU が存在する場合は，並列に計算を実行することができる． しかしながら，一台のノードにとどまらず，複数のノードをまたいだ並列化は，高度なプログラミングテクニックが必要とされるだけでなく，ノード間の接続様式などクラウドのアーキテクチャにも深く依存するものである． 本書ではここまで高度なクラウドの使用方法には立ち入らない．</p><p>まずは，本ハンズオンで使用する Docker イメージをローカルで実行してみよう．</p><p>Docker イメージのソースコードは <a href="https://github.com/tomomano/learn-aws-by-coding/blob/main/handson/aws-batch/docker" target="_blank" rel="noreferrer">handson/aws-batch/docker</a> にある． 基本的に <a href="#sec_mnist_using_jupyter">???</a> のハンズオンを元にし，本ハンズオン専用の軽微な変更が施してある． 興味のある読者はソースコードも含めて読んでいただきたい．</p><p>練習として，この Docker イメージを手元でビルドするところからはじめてみよう． <code>Dockerfile</code> が保存されているディレクトリに移動し， <code>mymnist</code> という名前 (Tag) をつけてビルドを実行する．</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">handson/aws-batch/docker</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mymnist</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">cd</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">handson/aws-batch/docker</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">docker</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">build</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-t</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">mymnist</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>docker build</code> でエラーが出たときは次の可能性を疑ってほしい． ビルドの中で， MNIST の画像データセットを <a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noreferrer">http://yann.lecun.com/exdb/mnist/</a> からダウンロードするのだが，ダウンロード先のサーバーがしばしばダウンしている． 世界中の機械学習ユーザーがアクセスするので，これはしばしば発生するようである． サーバーがダウンしているとビルドも失敗してしまう． エラーメッセージにそれらしい文言が含まれていたら，この可能性を疑おう．</p><p>手元でビルドするかわりに， Docker Hub から pull することも可能である． その場合は次のコマンドを実行する．</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tomomano/mymnist:latest</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">docker</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">pull</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">tomomano/mymnist:latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>イメージの準備ができたら，次のコマンドでコンテナを起動し， MNIST の学習を実行する．．</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mymnist</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--lr</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--momentum</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--epochs</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">docker</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">run</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">mymnist</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--lr</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--momentum</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0.5</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--epochs</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>このコマンドを実行すると，指定したハイパーパラメータ (<code>--lr</code> で与えられる学習率と <code>--momentum</code> で与えられるモメンタム) を使ってニューラルネットの最適化が始まる． 学習を行う最大のエポック数は <code>--epochs</code> パラメータで指定する． <a href="#sec_jupyter_and_deep_learning">???</a> のハンズオンで見たような， Loss の低下がコマンドライン上に出力されるだろう (<a href="#fig_mnist_log_output">figure_title</a>)．</p><p><img src="`+a+`" alt="Docker を実行した際の出力"></p><p>上に示したコマンドを使うと，計算は CPU を使って実行される． もし，ローカルの計算機に GPU が備わっており， <a href="https://github.com/NVIDIA/nvidia-docker" target="_blank" rel="noreferrer">nvidia-docker</a> の設定が済んでいるならば， 次のコマンドにより GPU を使って計算を実行できる．</p><pre><code>$ docker run --gpus all mymnist --lr 0.1 --momentum 0.5 --epochs 10
</code></pre><p>このコマンドでは，<code>--gpus all</code> というパラメータが加わった．</p><p>CPU/GPU どちらで実行した場合でも，エポックを重ねるにつれて訓練データ (Train データ) の Loss は単調に減少していくのが見て取れるだろう． 一方，<strong>検証データ (Validation データ) の Loss および Accuracy は，ある程度まで減少した後，それ以上性能が向上しない</strong>ことに気がつくだろう． これを実際にプロットしてみると <a href="#fig_loss_epoch_profile">figure_title</a> のようになるはずである．</p><p><img src="`+l+'" alt="(左) Train/Validation データそれぞれの Loss のエポックごとの変化． (右) Validation データの Accuracy のエポックごとの変化"></p><p>これは<strong>オーバーフィッティング</strong>とよばれる現象で，ニューラルネットが訓練データに過度に最適化され，訓練データの外のデータに対しての精度 (汎化性能) が向上していないことを示している． このような場合の対処法として， <strong>Early stopping</strong> とよばれるテクニックが知られている． Early stopping とは，検証データの Loss を追跡し，それが減少から増加に転じるエポックで学習をうち止め，そのエポックでのウェイトパラメータを採用する，というものである． 本ハンズオンでも， Early stopping によって訓練の終了を判断し，モデルの性能評価を行っていく．</p><p>MNIST 手書き文字データセットでは，訓練データとして 60,000 枚，テストデータとして 10,000 枚の画像が与えられている． 本ハンズオンで使用するコードでは，訓練データのうち 80% の 48,000 枚を訓練データとして使用し，残り 20% の 12,000 枚を検証データとして用いている． 詳しくはソースコードを参照のこと．</p><h2 id="アプリケーションの説明" tabindex="-1">アプリケーションの説明 <a class="header-anchor" href="#アプリケーションの説明" aria-label="Permalink to &quot;アプリケーションの説明&quot;">​</a></h2><p>このハンズオンで作成するアプリケーションの概要を <a href="#fig_batch_architecture">figure_title</a> に示す．</p><p><img src="'+p+`" alt="アプリケーションのアーキテクチャ"></p><p>簡単にまとめると，次のような設計である．</p><ul><li><p>クライアントは，あるハイパーパラメータの組を指定して Batch にジョブを提出する</p></li><li><p>Batch はジョブを受け取ると， EC2 からなるクラスターで計算を実行する</p></li><li><p>クラスター内では <code>g4dn.xlarge</code> インスタンスが起動する</p></li><li><p>Docker イメージは， AWS 内に用意された ECR (Elastic Container Registry) から取得される</p></li><li><p>複数のジョブが投下された場合は，その数だけのインスタンスが起動し並列に実行される</p></li><li><p>各ジョブによる計算の結果は S3 に保存される</p></li><li><p>最後にクライアントは S3 から結果をダウンロードし，最適なハイパーパラメータの組を決定する</p></li></ul><p>それでは，プログラムのソースコードを見てみよう (<a href="https://github.com/tomomano/learn-aws-by-coding/blob/main/handson/aws-batch/app.py" target="_blank" rel="noreferrer">handson/aws-batch/app.py</a>)．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SimpleBatch</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">core</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Stack</span><span style="color:#89DDFF;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">scope</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> core</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">App</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;font-style:italic;">kwargs</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">super</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">scope</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> name</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">**</span><span style="color:#82AAFF;">kwargs</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">#</span></span>
<span class="line"><span style="color:#A6ACCD;">        bucket </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> s3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Bucket</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bucket</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">removal_policy</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">core</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">RemovalPolicy</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">DESTROY</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">auto_delete_objects</span><span style="color:#89DDFF;">=True,</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        vpc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ec2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Vpc</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vpc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#676E95;font-style:italic;"># other parameters...</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">#</span></span>
<span class="line"><span style="color:#A6ACCD;">        managed_env </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> batch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ComputeEnvironment</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">managed-env</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">compute_resources</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">batch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ComputeResources</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#A6ACCD;font-style:italic;">vpc</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">vpc</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#A6ACCD;font-style:italic;">allocation_strategy</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">batch</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">AllocationStrategy</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">BEST_FIT</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#A6ACCD;font-style:italic;">desiredv_cpus</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#A6ACCD;font-style:italic;">maxv_cpus</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">64</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#A6ACCD;font-style:italic;">minv_cpus</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#A6ACCD;font-style:italic;">instance_types</span><span style="color:#89DDFF;">=[</span></span>
<span class="line"><span style="color:#82AAFF;">                    ec2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">InstanceType</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">g4dn.xlarge</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">managed</span><span style="color:#89DDFF;">=True,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">compute_environment_name</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">stack_name</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">+</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">compute-env</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">#</span></span>
<span class="line"><span style="color:#A6ACCD;">        job_queue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> batch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">JobQueue</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">job-queue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">compute_environments</span><span style="color:#89DDFF;">=[</span></span>
<span class="line"><span style="color:#82AAFF;">                batch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">JobQueueComputeEnvironment</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">                    </span><span style="color:#A6ACCD;font-style:italic;">compute_environment</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">managed_env</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">                    </span><span style="color:#A6ACCD;font-style:italic;">order</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">100</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">job_queue_name</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">stack_name</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">+</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">job-queue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">#</span></span>
<span class="line"><span style="color:#A6ACCD;">        job_role </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> iam</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Role</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">job-role</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">assumed_by</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">iam</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CompositePrincipal</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">                iam</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ServicePrincipal</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ecs-tasks.amazonaws.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># allow read and write access to S3 bucket</span></span>
<span class="line"><span style="color:#A6ACCD;">        bucket</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">grant_read_write</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">job_role</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">#</span></span>
<span class="line"><span style="color:#A6ACCD;">        repo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ecr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Repository</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">repository</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">removal_policy</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">core</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">RemovalPolicy</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">DESTROY</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">#</span></span>
<span class="line"><span style="color:#A6ACCD;">        job_def </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> batch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">JobDefinition</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">job-definition</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">container</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">batch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">JobDefinitionContainer</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#A6ACCD;font-style:italic;">image</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">ecs</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">ContainerImage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from_ecr_repository</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">repo</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#A6ACCD;font-style:italic;">command</span><span style="color:#89DDFF;">=[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">python3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main.py</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#A6ACCD;font-style:italic;">vcpus</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#A6ACCD;font-style:italic;">gpu_count</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#A6ACCD;font-style:italic;">memory_limit_mib</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">12000</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#A6ACCD;font-style:italic;">job_role</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">job_role</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#A6ACCD;font-style:italic;">environment</span><span style="color:#89DDFF;">={</span></span>
<span class="line"><span style="color:#82AAFF;">                    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">BUCKET_NAME</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> bucket</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">bucket_name</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">job_definition_name</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">stack_name</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">+</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">job-definition</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">timeout</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">core</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">Duration</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hours</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">)</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">SimpleBatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">core</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Stack</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__init__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">scope</span><span style="color:#ABB2BF;">: core.App, </span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">, **</span><span style="color:#D19A66;font-style:italic;">kwargs</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">super</span><span style="color:#ABB2BF;">().</span><span style="color:#56B6C2;">__init__</span><span style="color:#ABB2BF;">(scope, name, **kwargs)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">#</span></span>
<span class="line"><span style="color:#ABB2BF;">        bucket </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> s3.</span><span style="color:#61AFEF;">Bucket</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;bucket&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">removal_policy</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">core.RemovalPolicy.</span><span style="color:#D19A66;">DESTROY</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">auto_delete_objects</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        vpc </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> ec2.</span><span style="color:#61AFEF;">Vpc</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;vpc&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;"># other parameters...</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">#</span></span>
<span class="line"><span style="color:#ABB2BF;">        managed_env </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> batch.</span><span style="color:#61AFEF;">ComputeEnvironment</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;managed-env&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">compute_resources</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">batch.</span><span style="color:#61AFEF;">ComputeResources</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E06C75;font-style:italic;">vpc</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">vpc,</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E06C75;font-style:italic;">allocation_strategy</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">batch.AllocationStrategy.</span><span style="color:#D19A66;">BEST_FIT</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E06C75;font-style:italic;">desiredv_cpus</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E06C75;font-style:italic;">maxv_cpus</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">64</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E06C75;font-style:italic;">minv_cpus</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E06C75;font-style:italic;">instance_types</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">[</span></span>
<span class="line"><span style="color:#ABB2BF;">                    ec2.</span><span style="color:#61AFEF;">InstanceType</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;g4dn.xlarge&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                ],</span></span>
<span class="line"><span style="color:#ABB2BF;">            ),</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">managed</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">compute_environment_name</span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.stack_name </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;compute-env&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">#</span></span>
<span class="line"><span style="color:#ABB2BF;">        job_queue </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> batch.</span><span style="color:#61AFEF;">JobQueue</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;job-queue&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">compute_environments</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">[</span></span>
<span class="line"><span style="color:#ABB2BF;">                batch.</span><span style="color:#61AFEF;">JobQueueComputeEnvironment</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#E06C75;font-style:italic;">compute_environment</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">managed_env,</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#E06C75;font-style:italic;">order</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">100</span></span>
<span class="line"><span style="color:#ABB2BF;">                )</span></span>
<span class="line"><span style="color:#ABB2BF;">            ],</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">job_queue_name</span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.stack_name </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;job-queue&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">#</span></span>
<span class="line"><span style="color:#ABB2BF;">        job_role </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> iam.</span><span style="color:#61AFEF;">Role</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;job-role&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">assumed_by</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">iam.</span><span style="color:#61AFEF;">CompositePrincipal</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">                iam.</span><span style="color:#61AFEF;">ServicePrincipal</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ecs-tasks.amazonaws.com&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            )</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;"># allow read and write access to S3 bucket</span></span>
<span class="line"><span style="color:#ABB2BF;">        bucket.</span><span style="color:#61AFEF;">grant_read_write</span><span style="color:#ABB2BF;">(job_role)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">#</span></span>
<span class="line"><span style="color:#ABB2BF;">        repo </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> ecr.</span><span style="color:#61AFEF;">Repository</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;repository&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">removal_policy</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">core.RemovalPolicy.</span><span style="color:#D19A66;">DESTROY</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">#</span></span>
<span class="line"><span style="color:#ABB2BF;">        job_def </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> batch.</span><span style="color:#61AFEF;">JobDefinition</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;job-definition&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">container</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">batch.</span><span style="color:#61AFEF;">JobDefinitionContainer</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E06C75;font-style:italic;">image</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">ecs.ContainerImage.</span><span style="color:#61AFEF;">from_ecr_repository</span><span style="color:#ABB2BF;">(repo),</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E06C75;font-style:italic;">command</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;python3&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;main.py&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E06C75;font-style:italic;">vcpus</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E06C75;font-style:italic;">gpu_count</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E06C75;font-style:italic;">memory_limit_mib</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">12000</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E06C75;font-style:italic;">job_role</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">job_role,</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E06C75;font-style:italic;">environment</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#98C379;">&quot;BUCKET_NAME&quot;</span><span style="color:#ABB2BF;">: bucket.bucket_name</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            ),</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">job_definition_name</span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.stack_name </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;job-definition&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">timeout</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">core.Duration.</span><span style="color:#61AFEF;">hours</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br></div></div><ul><li><p>で，計算結果を保存するための S3 バケットを用意している</p></li><li><p>で， Compute environment を定義している． ここでは <code>g4dn.xlarge</code> のインスタンスタイプを使用するとし，最大の vCPU 使用数は 64 と指定している． また，最小の vCPU は 0 である． 今回は，負荷がかかっていないときにアイドリング状態にあるインスタンスを用意する利点は全くないので，ここは 0 にするのが望ましい．</p></li><li><p>で， &lt;2&gt; で作成した Compute environment と紐付いた Job queue を定義している．</p></li><li><p>で，ジョブが計算結果を S3 に書き込むことができるよう， IAM ロールを定義している． (IAM とはリソースがもつ権限を管理する仕組みである．詳しくは <a href="#sec:bashoutter_iam">???</a> を参照)</p></li><li><p>では， Docker image を配置するための ECR を定義している．</p></li><li><p>で Job definition を作成している． ここでは，4 vCPU， 12000 MB (=12GB) の RAM を使用するように指定している． また，今後必要となる環境変数 (<code>BUCKET_NAME</code>) を設定している． さらに， &lt;4&gt; で作った IAM を付与している．</p></li></ul><p><code>g4dn.xlarge</code> は 1 台あたり 4 vCPU が割り当てられている． このプログラムでは Compute environment の maximum vCPUs を 64 と指定しているので，最大で 16 台のインスタンスが同時に起動することになる． ここで maxium vCPUs を 64 に限定しているのは，なんらかのミスで意図せぬジョブを大量にクラスターに投入してしまった事態で，高額の AWS 利用料金が発生するのを防ぐためである． もし，自分のアプリケーションで必要と判断したならば自己責任において 64 よりも大きな数を設定して構わない．</p><p>ここで注意が一点ある． AWS では各アカウントごとに EC2 で起動できるインスタンスの上限が設定されている． この上限は AWS コンソールにログインし， EC2 コンソールの左側メニューバーの <code>Limits</code> をクリックすることで確認できる (<a href="#fig_ec2_limits">figure_title</a>)． <code>g4dn.xlarge</code> (EC2 の区分でいうと G ファミリーに属する) の制限を確認するには， <code>Running On-Demand All G instances</code> という名前の項目を見る． ここにある数字が， AWS によって課されたアカウントの上限であり，この上限を超えたインスタンスを起動することはできない． もし，自分の用途に対して上限が低すぎる場合は，上限の緩和申請を行うことができる． 詳しくは <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html" target="_blank" rel="noreferrer">公式ドキュメンテーション &quot;Amazon EC2 service quotas&quot;</a> を参照のこと．</p><p><img src="`+o+`" alt="EC2コンソールから各種の上限を確認する"></p><h2 id="スタックのデプロイ" tabindex="-1">スタックのデプロイ <a class="header-anchor" href="#スタックのデプロイ" aria-label="Permalink to &quot;スタックのデプロイ&quot;">​</a></h2><p>スタックの中身が理解できたところで，早速スタックをデプロイしてみよう．</p><p>デプロイの手順は，これまでのハンズオンとほとんど共通である． ここでは，コマンドのみ列挙する (# で始まる行はコメントである)． シークレットキーの設定も忘れずに (<a href="#aws_cli_install">???</a>)．</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#676E95;font-style:italic;"># プロジェクトのディレクトリに移動</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">handson/aws-batch</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># venv を作成し，依存ライブラリのインストールを行う</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">python3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">venv</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.env</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">source</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.env/bin/activate</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pip</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-r</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># デプロイを実行</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cdk</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">deploy</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># プロジェクトのディレクトリに移動</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">cd</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">handson/aws-batch</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># venv を作成し，依存ライブラリのインストールを行う</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">python3</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-m</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">venv</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">.env</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">source</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">.env/bin/activate</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">pip</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-r</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># デプロイを実行</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">cdk</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">deploy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>デプロイのコマンドが無事に実行されたことが確認できたら，AWS コンソールにログインして，デプロイされたスタックを確認してみよう． コンソールの検索バーで <code>batch</code> と入力し， AWS Batch の管理画面を開く (<a href="#fig_batch_console">figure_title</a>)．</p><p><img src="`+e+'" alt="AWS Batch のコンソール画面 (ダッシュボード)"></p><p>まず目を向けてほしいのが，画面の一番下にある Compute environment overview の中の <code>SimpleBatchcompute-env</code> という名前の項目だ． Compute environment とは，先ほど述べたとおり，計算が実行される環境 (クラスターと読み替えてもよい) である． プログラムで指定したとおり， <code>g4dn.xlarge</code> が実際に使用されるインスタンスタイプとして表示されている． また， <code>Minimum vCPUs</code> が 0，<code>Maximum vCPUs</code> が 64 と設定されていることも見て取れる． 加えて，この時点では一つもジョブが走っていないので， <code>Desired vCPUs</code> は 0 になっている． より詳細な Compute environment の情報を閲覧したい場合は，名前をクリックすることで詳細画面が開く．</p><p>次に，Job queue overview にある <code>SimpleBatch-queue</code> という項目に注目してほしい． ここでは実行待ちのジョブ・実行中のジョブ・実行が完了したジョブを一覧で確認することができる． <code>PENDING</code>, <code>RUNNING</code>, <code>SUCCEEDED</code>, <code>FAILED</code> などのカラムがあることが確認できる．ジョブが進行するにつれて，ジョブの状態がこのカラムにしたがって遷移していく． 後でジョブを実際にサブミットしたときに戻ってこよう．</p><p>最後に，今回作成した Job definition を確認しよう． 左側のメニューから　<code>Job definitions</code> を選択し，次の画面で <code>SimpleBatchjob-definition</code> という項目を見つけて開く． ここから Job definition の詳細を閲覧することができる (<a href="#fig:batch_job_definition">figure_title</a>)． 中でも重要な情報としては，　<code>vCPUs</code>, <code>Memory</code>, <code>GPU</code> がそれぞれ Docker に割り当てられる vCPU・メモリー・ GPU の量を規定している． また， <code>Image</code> と書いてあるところに，ジョブで使用される Docker イメージが指定されている． ここでは， ECR のレポジトリを参照している． 現時点ではこの ECR は空である． 次のステップとして，この ECR にイメージを配置する作業を行おう．</p><p><img src="'+t+`" alt="AWS Batch から Job definition を確認"></p><h2 id="docker-image-を-ecr-に配置する" tabindex="-1">Docker image を ECR に配置する <a class="header-anchor" href="#docker-image-を-ecr-に配置する" aria-label="Permalink to &quot;Docker image を ECR に配置する&quot;">​</a></h2><p>さて， Batch がジョブを実行するには，どこか指定された場所から Docker イメージをダウンロード (pull) してくる必要がある． 前回のハンズオン (<a href="#sec_fargate_qabot">???</a>) では，公開設定にしてある Docker Hub からイメージを pull してきた． 今回のハンズオンでは， AWS から提供されているレジストリである <strong>ECR (Elastic Container Registry)</strong> に image を配置するという設計を採用する． ECR を利用する利点は，自分だけがアクセスすることのできるプライベートなイメージの置き場所を用意できる点である． Batch は ECR からイメージを pull してくることで，タスクを実行する (<a href="#fig_batch_architecture">figure_title</a>)．</p><p>スタックのソースコードでいうと，次の箇所が ECR を定義している．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#676E95;font-style:italic;">#</span></span>
<span class="line"><span style="color:#A6ACCD;">repo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ecr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Repository</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">repository</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#A6ACCD;font-style:italic;">removal_policy</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">core</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">RemovalPolicy</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">DESTROY</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">job_def </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> batch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">JobDefinition</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">job-definition</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#A6ACCD;font-style:italic;">container</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">batch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">JobDefinitionContainer</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#A6ACCD;font-style:italic;">image</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">ecs</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">ContainerImage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from_ecr_repository</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">repo</span><span style="color:#89DDFF;">),</span><span style="color:#82AAFF;"> </span><span style="color:#676E95;font-style:italic;">#</span></span>
<span class="line"><span style="color:#82AAFF;">        ...</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">    ...</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#</span></span>
<span class="line"><span style="color:#ABB2BF;">repo </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> ecr.</span><span style="color:#61AFEF;">Repository</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;repository&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;font-style:italic;">removal_policy</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">core.RemovalPolicy.</span><span style="color:#D19A66;">DESTROY</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">job_def </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> batch.</span><span style="color:#61AFEF;">JobDefinition</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;job-definition&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;font-style:italic;">container</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">batch.</span><span style="color:#61AFEF;">JobDefinitionContainer</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;font-style:italic;">image</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">ecs.ContainerImage.</span><span style="color:#61AFEF;">from_ecr_repository</span><span style="color:#ABB2BF;">(repo), </span><span style="color:#7F848E;font-style:italic;">#</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#D19A66;">...</span></span>
<span class="line"><span style="color:#ABB2BF;">    ),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">...</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li><p>で，新規の ECR を作成している．</p></li><li><p>で Job definition を定義する中で，イメージを &lt;1&gt; で作った ECR から取得するように指定している． これと同時に， Job definition には ECR へのアクセス権限が IAM を通じて自動的に付与される．</p></li></ul><p>さて，スタックをデプロイした時点では， ECR は空っぽである． ここに自分のアプリケーションで使う Docker イメージを push してあげる必要がある．</p><p>そのために，まずは AWS コンソールから ECR の画面を開こう (検索バーに <code>Elastic Container Registry</code> と入力すると出てくる)． <code>Private</code> というタブを選択すると， <code>simplebatch-repositoryXXXXXX</code> という名前のレポジトリが見つかるだろう (<a href="#fig_ecr_console1">figure_title</a>)．</p><p><img src="`+c+'" alt="ECR のコンソール画面"></p><p>次に，このレポジトリの名前をクリックするとレポジトリの詳細画面に遷移する． そうしたら，画面右上にある <code>View push commands</code> というボタンをクリックする． すると <a href="#fig_ecr_push_command">figure_title</a> のようなポップアップ画面が立ち上がる．</p><p><img src="'+r+'" alt="ECR への push コマンド"></p><p>このポップアップ画面で表示されている四つのコマンドを順番に実行していくことで，手元の Docker イメージを ECR に push することができる． <strong>push を実行する前に， AWS の認証情報が設定されている</strong>ことを確認しよう． そのうえで，ハンズオンのソースコードの中にある <strong><code>docker/</code> という名前のディレクトリに移動</strong>する． そうしたら，ポップアップ画面で表示されたコマンドを上から順に実行していく．</p><p>ポップアップで表示されるコマンドの 2 つめを見てみると <code>docker build -t XXXXX .</code> となっている． 最後の <code>.</code> が重要で，これは <em>現在のディレクトリにある Dockerfile を使ってイメージをビルドせよ</em> という意味である． このような理由で， <code>Dockerfile</code> が置いてあるディレクトリに移動する必要がある．</p><p>四つ目のコマンドは，数 GB あるイメージを ECR にアップロードするので少し時間がかかるかもしれないが，これが完了するとめでたくイメージが ECR に配置されたことになる． もう一度 ECR のコンソールを見てみると，確かにイメージが配置されていることが確認できる (<a href="#fig_ecr_console2">figure_title</a>)． これで，AWS Batch を使ってジョブを実行させるための最後の準備が完了した．</p><p><img src="'+y+`" alt="ECR へ image の配置が完了した"></p><h2 id="単一のジョブを実行する" tabindex="-1">単一のジョブを実行する <a class="header-anchor" href="#単一のジョブを実行する" aria-label="Permalink to &quot;単一のジョブを実行する&quot;">​</a></h2><p>さて，ここからは実際に AWS Batch にジョブを投入する方法を見ていこう．</p><p>ハンズオンのディレクトリの <code>notebook/</code> というディレクトリの中に， <a href="https://github.com/tomomano/learn-aws-by-coding/blob/main/handson/aws-batch/notebook/run_single.ipynb" target="_blank" rel="noreferrer">run_single.ipynb</a> というファイルが見つかるはずである (<code>.ipynb</code> は Jupyter notebook のファイル形式)． これを Jupyter notebook から開こう．</p><p>今回のハンズオンでは， <code>venv</code> による仮想環境の中に Jupyter notebook もインストール済みである． なので，ローカルマシンから以下のコマンドで Jupyter notebook を立ち上げる．</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#676E95;font-style:italic;"># .env の仮想環境にいることを確認</span></span>
<span class="line"><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">.env</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> $ cd notebook</span></span>
<span class="line"><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">.env</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> $ jupyter notebook</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># .env の仮想環境にいることを確認</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">.env</span><span style="color:#ABB2BF;">) $ cd notebook</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">.env</span><span style="color:#ABB2BF;">) $ jupyter notebook</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Jupyter notebook が起動したら， <code>run_single.ipynb</code> を開く．</p><p>最初の [1], [2], [3] 番のセルは，ジョブをサブミットするための関数 (<code>submit_job()</code>) を定義している．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#676E95;font-style:italic;"># [1]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> boto3</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> argparse</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># [2]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># AWS 認証ヘルパー ...省略...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># [3]</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">submit_job</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">lr</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">float</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">momentum</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">float</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">epochs</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">profile_name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">default</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> profile_name </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None:</span></span>
<span class="line"><span style="color:#A6ACCD;">        session </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> boto3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Session</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        session </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> boto3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Session</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">profile_name</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">profile_name</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    client </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> session</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">client</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">batch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lr</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">lr</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">replace</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">_m</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">momentum</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">replace</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    resp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">submit_job</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#A6ACCD;font-style:italic;">jobName</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">title</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#A6ACCD;font-style:italic;">jobQueue</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SimpleBatchjob-queue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#A6ACCD;font-style:italic;">jobDefinition</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SimpleBatchjob-definition</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#A6ACCD;font-style:italic;">containerOverrides</span><span style="color:#89DDFF;">={</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">command</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">--lr</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">lr</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">                        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">--momentum</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">momentum</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">                        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">--epochs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">epochs</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">                        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">--uploadS3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">true</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Job submitted!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">job name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> resp</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">jobName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">job ID</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> resp</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">jobId</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">])</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># [1]</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> boto3</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> argparse</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># [2]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># AWS 認証ヘルパー ...省略...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># [3]</span></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">submit_job</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">lr</span><span style="color:#ABB2BF;">:</span><span style="color:#56B6C2;">float</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">momentum</span><span style="color:#ABB2BF;">:</span><span style="color:#56B6C2;">float</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">epochs</span><span style="color:#ABB2BF;">:</span><span style="color:#56B6C2;">int</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">profile_name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;default&quot;</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> profile_name </span><span style="color:#C678DD;font-style:italic;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        session </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> boto3.</span><span style="color:#61AFEF;">Session</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">else</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        session </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> boto3.</span><span style="color:#61AFEF;">Session</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">profile_name</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">profile_name)</span></span>
<span class="line"><span style="color:#ABB2BF;">    client </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> session.</span><span style="color:#61AFEF;">client</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;batch&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    title </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;lr&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">(lr).</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;_m&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">(momentum).</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    resp </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> client.</span><span style="color:#61AFEF;">submit_job</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;font-style:italic;">jobName</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">title,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;font-style:italic;">jobQueue</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;SimpleBatchjob-queue&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;font-style:italic;">jobDefinition</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;SimpleBatchjob-definition&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;font-style:italic;">containerOverrides</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#98C379;">&quot;command&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;--lr&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">(lr),</span></span>
<span class="line"><span style="color:#ABB2BF;">                        </span><span style="color:#98C379;">&quot;--momentum&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">(momentum),</span></span>
<span class="line"><span style="color:#ABB2BF;">                        </span><span style="color:#98C379;">&quot;--epochs&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">(epochs),</span></span>
<span class="line"><span style="color:#ABB2BF;">                        </span><span style="color:#98C379;">&quot;--uploadS3&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;true&quot;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Job submitted!&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;job name&quot;</span><span style="color:#ABB2BF;">, resp[</span><span style="color:#98C379;">&quot;jobName&quot;</span><span style="color:#ABB2BF;">], </span><span style="color:#98C379;">&quot;job ID&quot;</span><span style="color:#ABB2BF;">, resp[</span><span style="color:#98C379;">&quot;jobId&quot;</span><span style="color:#ABB2BF;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p><code>submit_job()</code> 関数について簡単に説明しよう． <a href="#sec_run_mnist_docker_local">MNIST 手書き文字認識 (再訪)</a> で， MNIST の Docker をローカルで実行したとき，次のようなコマンドを使用した．</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mymnist</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--lr</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--momentum</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--epochs</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">docker</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">run</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-it</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">mymnist</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--lr</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--momentum</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0.5</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--epochs</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ここで， <code>--lr 0.1 --momentum 0.5 --epochs 10</code> の部分が，コンテナに渡されるコマンドである．</p><p>AWS Batch でジョブを実行する際も，<code>ContainerOverrides</code> の <code>command</code> というパラメータを使用することで，コンテナに渡されるコマンドを指定することができる． コードでは以下の部分が該当する．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">containerOverrides</span><span style="color:#89DDFF;">={</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">command</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">--lr</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">lr</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">--momentum</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">momentum</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">--epochs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">epochs</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">--uploadS3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">true</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#ABB2BF;">containerOverrides</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;command&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;--lr&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">(lr),</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#98C379;">&quot;--momentum&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">(momentum),</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#98C379;">&quot;--epochs&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">(epochs),</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#98C379;">&quot;--uploadS3&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;true&quot;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>続いて， [4] 番のセルに移ろう． ここでは，上記の <code>submit_job()</code> 関数を用いて， 学習率 = 0.01, モメンタム=0.1, エポック数=100 を指定したジョブを投入する．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#676E95;font-style:italic;"># [4]</span></span>
<span class="line"><span style="color:#82AAFF;">submit_job</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0.01</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0.1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">)</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># [4]</span></span>
<span class="line"><span style="color:#61AFEF;">submit_job</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0.01</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>AWS の認証情報は， Jupyter Notebook の内部から再度定義する必要がある． これを手助けするため， Notebook の [2] 番のセル (デフォルトではすべてコメントアウトされている) を用意した． これを使うにはコメントアウトを解除すればよい． このセルを実行すると， AWS の認証情報を入力する対話的なプロンプトが表示される． プロンプトに従って aws secret key などを入力することで， (Jupyter のセッションに固有な) 環境変数に AWS の認証情報が記録される．</p><p>もう一つの認証方法として， <code>submit_job()</code> 関数に <code>profile_name</code> というパラメータを用意した． もし <code>~/.aws/credentials</code> に認証情報が書き込まれているのならば (詳しくは <a href="#aws_cli_install">???</a>)， <code>profile_name</code> に使用したいプロファイルの名前を渡すだけで， 認証を行うことができる． 慣れている読者は後者のほうが便利であると感じるだろう．</p><p>[4] 番のセルを実行したら，ジョブが実際に投入されたかどうかを AWS コンソールから確認してみよう． AWS Batch の管理コンソールを開くと， <a href="#fig_batch_running_job">figure_title</a> のような画面が表示されるだろう．</p><p><img src="`+F+'" alt="AWS Batch でジョブが実行されている様子"></p><p><a href="#fig_batch_running_job">figure_title</a> で赤で囲った箇所に注目してほしい． 一つのジョブが投入されると，それは <code>SUBMITTED</code> という状態を経て <code>RUNNABLE</code> という状態に遷移する． <code>RUNNABLE</code> とは， ジョブを実行するためのインスタンスが Compute environment に不足しているため，新たなインスタンスが起動されるのを待っている状態に相当する． インスタンスの準備が整うと，ジョブの状態は <code>STARTING</code> を経て <code>RUNNING</code> に至る．</p><p>次に，ジョブのステータスが <code>RUNNING</code> のときの Compute environment の <code>Desired vCPU</code> を見てみよう (<a href="#fig_batch_running_job">figure_title</a> で紫で囲った箇所)． ここで 4 と表示されているのは， <code>g4dn.xlarge</code> インスタンス一つ分の vCPU の数である． ジョブの投入に応じて，それを実行するのに最低限必要な EC2 インスタンスが起動されたことが確認できる (興味のある人は， EC2 コンソールも同時に覗いてみるとよい)．</p><p>しばらく経つと，ジョブの状態は <code>RUNNING</code> から <code>SUCCEEDED</code> (あるいは何らかの理由でエラーが発生したときには <code>FAILED</code>) に遷移する． 今回のハンズオンで使っている MNIST の学習はだいたい 10 分くらいで完了するはずである． ジョブの状態が <code>SUCCEEDED</code> になるまで見届けよう．</p><p>ジョブが完了すると，学習の結果 (エポックごとの Loss と Accuracy を記録した CSV ファイル) は S3 に保存される． AWS コンソールからこれを確認しよう．</p><p>S3 のコンソールに行くと <code>simplebatch-bucketXXXX</code> (XXXX の部分はユーザーによって異なる) という名前のバケットが見つかるはずである． これをクリックして中身を見てみると， <code>metrics_lr0.0100_m0.1000.csv</code> という名前の CSV があることが確認できるだろう (<a href="#fig_s3_saved_file">figure_title</a>)． これが， 学習率 = 0.01, モメンタム = 0.1 として学習を行ったときの結果である．</p><p><img src="'+i+`" alt="ジョブの実行結果は S3 に保存される"></p><p>さて，ここで <code>run_single.ipynb</code> に戻ってこよう． [5] から [7] 番のセルでは，学習結果の CSV ファイルのダウンロードを行っている．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#676E95;font-style:italic;"># [5]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pandas </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> pd</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> io</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> matplotlib </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pyplot </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> plt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># [6]</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">read_table_from_s3</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">bucket_name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">profile_name</span><span style="color:#89DDFF;">=None):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> profile_name </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None:</span></span>
<span class="line"><span style="color:#A6ACCD;">        session </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> boto3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Session</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        session </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> boto3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Session</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">profile_name</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">profile_name</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    s3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> session</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resource</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">s3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    bucket </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> s3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Bucket</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">bucket_name</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> bucket</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">key</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Body</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    df </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pd</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read_csv</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">obj</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> df</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># [7]</span></span>
<span class="line"><span style="color:#A6ACCD;">bucket_name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">simplebatch-bucket43879c71-mbqaltx441fu</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">df </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">read_table_from_s3</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    bucket_name</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">metrics_lr0.0100_m0.1000.csv</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># [5]</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> pandas </span><span style="color:#C678DD;font-style:italic;">as</span><span style="color:#ABB2BF;"> pd</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> io</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> matplotlib </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> pyplot </span><span style="color:#C678DD;font-style:italic;">as</span><span style="color:#ABB2BF;"> plt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># [6]</span></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">read_table_from_s3</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">bucket_name</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">profile_name</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> profile_name </span><span style="color:#C678DD;font-style:italic;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        session </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> boto3.</span><span style="color:#61AFEF;">Session</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">else</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        session </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> boto3.</span><span style="color:#61AFEF;">Session</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">profile_name</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">profile_name)</span></span>
<span class="line"><span style="color:#ABB2BF;">    s3 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> session.</span><span style="color:#61AFEF;">resource</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;s3&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    bucket </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> s3.</span><span style="color:#61AFEF;">Bucket</span><span style="color:#ABB2BF;">(bucket_name)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    obj </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> bucket.</span><span style="color:#61AFEF;">Object</span><span style="color:#ABB2BF;">(key).</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Body&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    df </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> pd.</span><span style="color:#61AFEF;">read_csv</span><span style="color:#ABB2BF;">(obj)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> df</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># [7]</span></span>
<span class="line"><span style="color:#ABB2BF;">bucket_name </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;simplebatch-bucket43879c71-mbqaltx441fu&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">df </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">read_table_from_s3</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">    bucket_name,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;metrics_lr0.0100_m0.1000.csv&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>[6] で S3 から CSV データをダウンロードし， pandas の <code>DataFrame</code> オブジェクトとしてロードする関数を定義している． [7] を実行する際， <code>bucket_name</code> という変数の値を，<strong>自分自身のバケットの名前に置き換える</strong>ことに注意しよう (先ほど S3 コンソールから確認した <code>simplebatch-bucketXXXX</code> のことである)．</p><p>続いて， [9] 番のセルで， CSV のデータをプロットしている (<a href="#fig_loss_epoch_profile2">figure_title</a>)． ローカルで実行したときと同じように， AWS Batch を用いて MNIST モデルを訓練することに成功した！</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#676E95;font-style:italic;"># [9]</span></span>
<span class="line"><span style="color:#A6ACCD;">fig</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ax1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ax2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">subplots</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">figsize</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">df</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">shape</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">])]</span></span>
<span class="line"><span style="color:#A6ACCD;">ax1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plot</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> df</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">train_loss</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">label</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Train</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">ax1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plot</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> df</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val_loss</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">label</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Val</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">ax2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plot</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> df</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val_accuracy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">ax1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set_xlabel</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Epochs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">ax1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set_ylabel</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Loss</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">ax1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">legend</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">ax2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set_xlabel</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Epochs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">ax2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set_ylabel</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Accuracy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Best loss:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> df</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val_loss</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">].</span><span style="color:#82AAFF;">min</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Best loss epoch:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> df</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val_loss</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">].</span><span style="color:#82AAFF;">argmin</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Best accuracy:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> df</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val_accuracy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">].</span><span style="color:#82AAFF;">max</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Best accuracy epoch:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> df</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val_accuracy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">].</span><span style="color:#82AAFF;">argmax</span><span style="color:#89DDFF;">())</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># [9]</span></span>
<span class="line"><span style="color:#ABB2BF;">fig, (ax1, ax2) </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> plt.</span><span style="color:#61AFEF;">subplots</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">figsize</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">x </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [i </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">range</span><span style="color:#ABB2BF;">(df.shape[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">])]</span></span>
<span class="line"><span style="color:#ABB2BF;">ax1.</span><span style="color:#61AFEF;">plot</span><span style="color:#ABB2BF;">(x, df[</span><span style="color:#98C379;">&quot;train_loss&quot;</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;font-style:italic;">label</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;Train&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">ax1.</span><span style="color:#61AFEF;">plot</span><span style="color:#ABB2BF;">(x, df[</span><span style="color:#98C379;">&quot;val_loss&quot;</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;font-style:italic;">label</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;Val&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">ax2.</span><span style="color:#61AFEF;">plot</span><span style="color:#ABB2BF;">(x, df[</span><span style="color:#98C379;">&quot;val_accuracy&quot;</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">ax1.</span><span style="color:#61AFEF;">set_xlabel</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Epochs&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">ax1.</span><span style="color:#61AFEF;">set_ylabel</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Loss&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">ax1.</span><span style="color:#61AFEF;">legend</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">ax2.</span><span style="color:#61AFEF;">set_xlabel</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Epochs&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">ax2.</span><span style="color:#61AFEF;">set_ylabel</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Accuracy&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Best loss:&quot;</span><span style="color:#ABB2BF;">, df[</span><span style="color:#98C379;">&quot;val_loss&quot;</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">min</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Best loss epoch:&quot;</span><span style="color:#ABB2BF;">, df[</span><span style="color:#98C379;">&quot;val_loss&quot;</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">argmin</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Best accuracy:&quot;</span><span style="color:#ABB2BF;">, df[</span><span style="color:#98C379;">&quot;val_accuracy&quot;</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Best accuracy epoch:&quot;</span><span style="color:#ABB2BF;">, df[</span><span style="color:#98C379;">&quot;val_accuracy&quot;</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">argmax</span><span style="color:#ABB2BF;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><img src="`+D+`" alt="AWS Batch で行った MNIST モデルの学習の結果"></p><h2 id="並列に複数の-job-を実行する" tabindex="-1">並列に複数の Job を実行する <a class="header-anchor" href="#並列に複数の-job-を実行する" aria-label="Permalink to &quot;並列に複数の Job を実行する&quot;">​</a></h2><p>さて，ここからが最後の仕上げである． ここまでのハンズオンで構築した AWS Batch のシステムを使って，ハイパーパラメータサーチを実際に行おう．</p><p>先ほど実行した <code>run_single.ipynb</code> と同じディレクトリにある <code>run_sweep.ipynb</code> を開く．</p><p>セル [1], [2], [3] は <code>run_single.ipynb</code> と同一である．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#676E95;font-style:italic;"># [1]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> boto3</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> argparse</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># [2]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># AWS 認証ヘルパー ...省略...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># [3]</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">submit_job</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">lr</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">float</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">momentum</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">float</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">epochs</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">profile_name</span><span style="color:#89DDFF;">=None):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># ...省略...</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># [1]</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> boto3</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> argparse</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># [2]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># AWS 認証ヘルパー ...省略...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># [3]</span></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">submit_job</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">lr</span><span style="color:#ABB2BF;">:</span><span style="color:#56B6C2;">float</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">momentum</span><span style="color:#ABB2BF;">:</span><span style="color:#56B6C2;">float</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">epochs</span><span style="color:#ABB2BF;">:</span><span style="color:#56B6C2;">int</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">profile_name</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># ...省略...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>セル [4] の for ループを使って，グリッド状にハイパーパラメータの組み合わせを用意し， batch にジョブを投入している． ここでは 3x3=9 個のジョブを作成した．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#676E95;font-style:italic;"># [4]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> lr </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0.1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.01</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.001</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> m </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.05</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">submit_job</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">lr</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> m</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">)</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># [4]</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> lr </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.01</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.001</span><span style="color:#ABB2BF;">]:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> m </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">0.5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.05</span><span style="color:#ABB2BF;">]:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">submit_job</span><span style="color:#ABB2BF;">(lr, m, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>セル [4] を実行したら， Batch のコンソールを開こう． 先ほどと同様に，ジョブのステータスは <code>SUBMITTED</code> &gt; <code>RUNNABLE</code> &gt; <code>STARTING</code> &gt; <code>RUNNING</code> と移り変わっていくことがわかるだろう． 最終的に 9 個のジョブがすべて <code>RUNNING</code> の状態になることを確認しよう (<a href="#fig_batch_many_parallel_jobs">figure_title</a>)． また，このとき Compute environment の <code>Desired vCPUs</code> は 4x9=36 となっていることを確認しよう (<a href="#fig_batch_many_parallel_jobs">figure_title</a>)．</p><p><img src="`+A+'" alt="複数のジョブを同時投入したときの Batch コンソール"></p><p>次に，Batch のコンソールの左側のメニューから <code>Jobs</code> をクリックしてみよう． ここでは，実行中のジョブの一覧が確認することができる (<a href="#fig_batch_parallel_job_list">figure_title</a>)． ジョブのステータスでフィルタリングをすることも可能である． 9 個のジョブがどれも <code>RUNNING</code> 状態にあることが確認できるだろう．</p><p><img src="'+B+'" alt="複数のジョブを同時投入したときの Job 一覧"></p><p>今度は EC2 コンソールを見てみよう． 左のメニューから <code>Instances</code> を選択すると， <a href="#fig_ec2_instances_list">figure_title</a> に示すような起動中のインスタンスの一覧が表示される． <code>g4dn.xlarge</code> が 9 台稼働しているのが確認できる． Batch がジョブの投下に合わせて必要な数のインスタンスを起動してくれたのだ！</p><p><img src="'+C+`" alt="複数のジョブを同時投入したときの EC2 インスタンスの一覧"></p><p>ここまで確認できたら，それぞれの Job が終了するまでしばらく待とう (だいたい 10-15 分くらいで終わる)． すべてのジョブが終了すると，ダッシュボードの <code>SUCCEEDED</code> が 9 となっているはずだ． また， Compute environment の <code>Desired vCPUs</code> も 0 に落ちていることを確認しよう． 最後に EC2 コンソールに行って，すべての g4dn インスタンスが停止していることを確認しよう．</p><p>以上から， AWS Batch を使うことで，<strong>ジョブの投入に応じて自動的に EC2 インスタンスが起動され，ジョブの完了とともに，ただちにインスタンスの停止が行われる</strong>一連の挙動を観察することができた． 一つのジョブの完了におよそ 10 分の時間がかかるので，9 個のハイパーパラメータの組を逐次的に計算していた場合は 90 分の時間を要することになる． AWS Batch を使ってこれらの計算を並列に実行することで，ジョブ一個分の計算時間 (=10 分) ですべての計算を終えることができた！</p><p>さて，再び <code>run_sweep.ipynb</code> に戻ってこよう． [5] 以降のセルでは，グリッドサーチの結果を可視化している．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#676E95;font-style:italic;"># [5]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pandas </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> pd</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> numpy </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> np</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> io</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> matplotlib </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pyplot </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> plt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># [6]</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">read_table_from_s3</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">bucket_name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">profile_name</span><span style="color:#89DDFF;">=None):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> profile_name </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None:</span></span>
<span class="line"><span style="color:#A6ACCD;">        session </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> boto3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Session</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        session </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> boto3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Session</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">profile_name</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">profile_name</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    s3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> session</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resource</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">s3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    bucket </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> s3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Bucket</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">bucket_name</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> bucket</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">key</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Body</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    df </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pd</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read_csv</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">obj</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> df</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># [7]</span></span>
<span class="line"><span style="color:#A6ACCD;">grid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> np</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">zeros</span><span style="color:#89DDFF;">((</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> lr</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">enumerate</span><span style="color:#89DDFF;">([</span><span style="color:#F78C6C;">0.1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0.01</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0.001</span><span style="color:#89DDFF;">]):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> m</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">enumerate</span><span style="color:#89DDFF;">([</span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0.1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0.05</span><span style="color:#89DDFF;">]):</span></span>
<span class="line"><span style="color:#A6ACCD;">        key </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;metrics_lr</span><span style="color:#F78C6C;">{</span><span style="color:#A6ACCD;">lr</span><span style="color:#C792EA;">:0.4f</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">_m</span><span style="color:#F78C6C;">{</span><span style="color:#A6ACCD;">m</span><span style="color:#C792EA;">:0.4f</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">.csv&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        df </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">read_table_from_s3</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">simplebatch-bucket43879c71-mbqaltx441fu</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> key</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        grid</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> df</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val_accuracy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">].</span><span style="color:#82AAFF;">max</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># [8]</span></span>
<span class="line"><span style="color:#A6ACCD;">fig</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ax </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">subplots</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">figsize</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">ax</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set_aspect</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">equal</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ax</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pcolor</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">grid</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">edgecolors</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">w</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">linewidths</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        text </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ax</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">text</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">j</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> i</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">grid</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> j</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">:0.1f</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">                       </span><span style="color:#A6ACCD;font-style:italic;">ha</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">center</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">va</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">center</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">color</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">w</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># [5]</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> pandas </span><span style="color:#C678DD;font-style:italic;">as</span><span style="color:#ABB2BF;"> pd</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> numpy </span><span style="color:#C678DD;font-style:italic;">as</span><span style="color:#ABB2BF;"> np</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> io</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> matplotlib </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> pyplot </span><span style="color:#C678DD;font-style:italic;">as</span><span style="color:#ABB2BF;"> plt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># [6]</span></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">read_table_from_s3</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">bucket_name</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">profile_name</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> profile_name </span><span style="color:#C678DD;font-style:italic;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        session </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> boto3.</span><span style="color:#61AFEF;">Session</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">else</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        session </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> boto3.</span><span style="color:#61AFEF;">Session</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">profile_name</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">profile_name)</span></span>
<span class="line"><span style="color:#ABB2BF;">    s3 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> session.</span><span style="color:#61AFEF;">resource</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;s3&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    bucket </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> s3.</span><span style="color:#61AFEF;">Bucket</span><span style="color:#ABB2BF;">(bucket_name)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    obj </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> bucket.</span><span style="color:#61AFEF;">Object</span><span style="color:#ABB2BF;">(key).</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Body&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    df </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> pd.</span><span style="color:#61AFEF;">read_csv</span><span style="color:#ABB2BF;">(obj)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> df</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># [7]</span></span>
<span class="line"><span style="color:#ABB2BF;">grid </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> np.</span><span style="color:#61AFEF;">zeros</span><span style="color:#ABB2BF;">((</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> (i, lr) </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">enumerate</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.01</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.001</span><span style="color:#ABB2BF;">]):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> (j, m) </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">enumerate</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">0.5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.05</span><span style="color:#ABB2BF;">]):</span></span>
<span class="line"><span style="color:#ABB2BF;">        key </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&quot;metrics_lr</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">lr</span><span style="color:#C678DD;">:0.4f</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">_m</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">m</span><span style="color:#C678DD;">:0.4f</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">.csv&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        df </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">read_table_from_s3</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;simplebatch-bucket43879c71-mbqaltx441fu&quot;</span><span style="color:#ABB2BF;">, key)</span></span>
<span class="line"><span style="color:#ABB2BF;">        grid[i,j] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> df[</span><span style="color:#98C379;">&quot;val_accuracy&quot;</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># [8]</span></span>
<span class="line"><span style="color:#ABB2BF;">fig, ax </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> plt.</span><span style="color:#61AFEF;">subplots</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">figsize</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">ax.</span><span style="color:#61AFEF;">set_aspect</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;equal&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">c </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> ax.</span><span style="color:#61AFEF;">pcolor</span><span style="color:#ABB2BF;">(grid, </span><span style="color:#E06C75;font-style:italic;">edgecolors</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;w&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">linewidths</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> j </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        text </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> ax.</span><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">(j</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">0.5</span><span style="color:#ABB2BF;">, i</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">0.5</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&quot;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">grid[i, j]</span><span style="color:#C678DD;">:0.1f</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                       </span><span style="color:#E06C75;font-style:italic;">ha</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;center&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">va</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;center&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">color</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;w&quot;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>最終的に出力されるプロットが <a href="#fig_grid_search_result">figure_title</a> である．</p><p><img src="`+u+'" alt="ハイパーパラメータのグリッドサーチの結果"></p><p>このプロットから，差は僅かであるが，学習率が 0.1 のときに精度は最大となることがわかる． また，学習率 0.1 のときはモメンタムを変えても大きな差は生じないことが見て取れる．</p><p>今回のパラメータサーチは勉強用に極めて単純化されたものである点は承知いただきたい．</p><p>たとえば，今回は学習率が 0.1 が最も良いとされたが，それは訓練のエポックを 100 に限定しているからかもしれない． 学習率が低いとその分訓練に必要なエポック数も多くなる． 訓練のエポック数をもっと増やせばまた違った結果が観察される可能性はある．</p><p>また，今回は MNIST の訓練データ 60,000 枚のうち， 48,000 枚を訓練データ，残り 12,000 枚を検証データとして用いた． この分割は乱数を固定してランダムに行ったが，もしこの分割によるデータのバイアスを気にするならば， k 個の異なる学習・検証データの分割をあらかじめ用意して，複数回モデルの評価を行う (<strong>k-fold cross-validation</strong>) 方法も，より精緻なアプローチとして考えられる．</p><p>以上のようにして， CNN を用いた MNIST 分類モデルのハイパーパラメータの最適化の一連の流れを体験した． AWS Batch を利用することで，比較的少ないプログラミングで，動的に EC2 クラスターを制御し，並列にジョブを処理するシステムが構築できた． ここまで EC2 を使いこなすことができれば，多くの問題を自力で解くことが可能になるだろう！</p><h2 id="スタックの削除" tabindex="-1">スタックの削除 <a class="header-anchor" href="#スタックの削除" aria-label="Permalink to &quot;スタックの削除&quot;">​</a></h2><p>これにて，本ハンズオンは終了である．最後にスタックを削除しよう． 今回のスタックを削除するにあたり，ECR に配置された Docker のイメージは手動で削除されなければならない (これをしないと， <code>cdk destroy</code> を実行したときにエラーになってしまう． これは CloudFormation の仕様なので従うしかない)．</p><p>ECR の Docker image を削除するには， ECR のコンソールに行き，イメージが配置されたレポジトリを開く． そして，画面右上の <code>DELETE</code> ボタンを押して削除する (<a href="#fig_delete_ecr">figure_title</a>)．</p><p><img src="'+b+'" alt="ECR から Docker image を削除する"></p><p>あるいは， AWS CLI から同様の操作を行うには，以下のコマンドを用いる (<code>XXXX</code> は自分の ECR レポジトリ名に置き換える)．</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">aws</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ecr</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">batch-delete-image</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--repository-name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">XXXX</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--image-ids</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">imageTag=latest</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">aws</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ecr</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">batch-delete-image</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--repository-name</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">XXXX</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--image-ids</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">imageTag=latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>image の削除が完了したうえで，次のコマンドでスタックを削除する．</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cdk</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">destroy</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">cdk</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">destroy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><a href="#sec:batch_development_and_debug">???</a> === クラウドを用いた機械学習アプリケーションの開発とデバッグ</p><p>本章で紹介したハンズオンでは， AWS Batch を使用することでニューラルネットの学習を複数並列に実行し，高速化を実現した． 本章の最後の話題として，クラウドを用いた機械学習アプリケーションの開発とデバッグの方法について述べよう．</p><p>ローカルに GPU を搭載した強力なマシンがなく，クラウドを利用する予算が確保されているのであれば， <a href="#fig:cloud_development">figure_title</a> のような開発のスキームが理想的であると考える． 最初の段階では， <a href="#sec_jupyter_and_deep_learning">???</a> で見たような方法で， GPU 搭載型の EC2 インスタンスを作成し， Jupyter Notebook などのインタラクティブな環境で様々なモデルを試し実験を行う． Jupyter である程度アプリケーションが完成してきたタイミングで，作成したアプリケーションを Docker イメージにパッケージングする． そして， EC2 上で <code>docker run</code> を行い，作成したイメージがバグなく動作するか確認を行う． その次に，ハイパーパラメータの最適化などのチューニングを， <a href="#sec_aws_batch">Hands-on #4: AWS Batch を使って機械学習のハイパーパラメータサーチを並列化する</a> のハンズオンで学んだ AWS Batch などの計算システムを利用して行う． よい深層学習モデルが完成したら，仕上げに大規模データへの推論処理を行うシステムを <a href="#sec_fargate_qabot">???</a> を参考に構築する．</p><p>実際，本書ではこの流れに沿って演習を進めてきた． MNIST タスクを解くモデルを，最初 Jupyter Notebook を使用して実験し，そのコードをほとんどそのまま Docker にパッケージし， AWS Batch を用いてハイパーパラメータサーチを行った． このサイクルを繰り返すことで，クラウドを最大限に活用した機械学習アプリケーションの開発を進めることができる．</p><p><img src="'+m+'" alt="クラウドを活用した機械学習アプリケーションの開発フロー"></p><h2 id="小括" tabindex="-1">小括 <a class="header-anchor" href="#小括" aria-label="Permalink to &quot;小括&quot;">​</a></h2><p>ここまでが，本書第二部の内容である． 第一部に引き続き盛りだくさんの内容であったが，ついてこれたであろうか？</p><p>第二部ではまず最初に，深層学習の計算をクラウドで実行するため， GPU 搭載型の EC2 インスタンスの起動について解説した． さらに，ハンズオンでは，クラウドに起動した仮想サーバーを使って MNIST 文字認識タスクを解くニューラルネットを訓練した (<a href="#sec_jupyter_and_deep_learning">???</a>)．</p><p>また，より大規模な機械学習アプリケーションを作るための手段として， Docker と ECS によるクラスターの初歩を説明した (<a href="#sec_docker_introduction">???</a>)． その応用として，英語で与えられた文章問題への回答を自動で生成するボットをクラウドに展開した (<a href="#sec_fargate_qabot">???</a>)． タスクの投入に応じて動的に計算リソースが作成・削除される様子を実際に体験できただろう．</p><p>さらに， <a href="#sec_aws_batch">Hands-on #4: AWS Batch を使って機械学習のハイパーパラメータサーチを並列化する</a> では AWS Batch を用いてニューラルネットの学習を並列に実行する方法を紹介した． ここで紹介した方法は，ミニマムであるが，計算機システムを大規模化していくためのエッセンスが網羅されている． これらのハンズオン体験から，クラウド技術を応用してどのように現実世界の問題を解いていくのか，なんとなくイメージが伝わっただろうか？</p><p>本書の第三部では，さらにレベルアップし，サーバーレスアーキテクチャという最新のクラウドの設計手法について解説する． その応用として，ハンズオンでは簡単な SNS サービスをゼロから実装する． 引き続きクラウドの最先端の世界を楽しんでいこう！</p>',163),q=[g];function v(k,S,j,x,w,N){return h(),f("div",null,q)}const U=d(_,[["render",v]]);export{T as __pageData,U as default};
