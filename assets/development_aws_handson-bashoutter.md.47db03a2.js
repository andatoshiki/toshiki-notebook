import{_ as n}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.250b3e56.js";import{_ as p,a as l,b as o,c as e,d as t,e as c,f as r,g as i,h as y}from"./chunks/bashoutter_2.cd8a2a95.js";import{_ as d,o as u,c as A,H as b,k as s,a as m,Q as D}from"./chunks/framework.b7580407.js";import"./chunks/commonjsHelpers.725317a4.js";const I=JSON.parse('{"title":"Hands-on #6: Bashoutter","description":"","frontmatter":{},"headers":[],"relativePath":"development/aws/handson-bashoutter.md","filePath":"development/aws/handson-bashoutter.md","lastUpdated":1726412901000}'),C={name:"development/aws/handson-bashoutter.md"},h=s("h1",{id:"hands-on-6-bashoutter",tabindex:"-1"},[m("Hands-on #6: Bashoutter "),s("a",{class:"header-anchor",href:"#hands-on-6-bashoutter","aria-label":'Permalink to "Hands-on \\#6: Bashoutter"'},"​")],-1),F=D('<p>さて，最後のハンズオンとなる第六回では，これまで学んできたサーバーレスクラウドの技術を使って，簡単なウェブサービスを作ってみよう． 具体的には，人々が自分の作った俳句を投稿する SNS サービス (<strong>Bashoutter</strong> と名付ける) を作成してみよう． Lambda, DynamoDB, S3 などの技術をすべて盛り込み，シンプルながらもサーバーレスの利点を生かしたスケーラブルな SNS アプリが誕生する． 最終的には， <a href="#handson_05_bashoutter">figure_title</a> のような，ミニマルではあるがとても現代風な SNS サイトが完成する！</p><p><img src="'+p+'" alt="ハンズオン#6で作製する SNS アプリケーション &quot;Bashoutter&quot;"></p><h2 id="準備" tabindex="-1">準備 <a class="header-anchor" href="#準備" aria-label="Permalink to &quot;準備&quot;">​</a></h2><p>ハンズオンのソースコードは GitHub の <a href="https://github.com/andatoshiki/toshiki-notebooktree/main/handson/bashoutter" target="_blank" rel="noreferrer">handson/bashoutter</a> に置いてある．</p><p>本ハンズオンの実行には，第一回ハンズオンで説明した準備 ( (#handson_01_prep)) が整っていることを前提とする． それ以外に必要な準備はない．</p><p>このハンズオンは，基本的に <a href="https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;all-free-tier.sort-order=asc" target="_blank" rel="noreferrer">AWS の無料枠</a> の範囲内で実行できる．</p><h2 id="アプリケーションの説明" tabindex="-1">アプリケーションの説明 <a class="header-anchor" href="#アプリケーションの説明" aria-label="Permalink to &quot;アプリケーションの説明&quot;">​</a></h2><h3 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h3><p>今回のアプリケーションでは，人々からの俳句の投稿を受け付けたり，投稿された俳句の一覧を取得する，といった機能を実装したい． この機能を実現するための最小限の設計として， <a href="#tab_handson_05_api">table_title</a> に示すような四つの REST API を今回は実装する． 俳句を投稿する，閲覧する，削除するという基本的なデータ操作を行うための API が完備されている． また， <code>PATCH /haiku/{item_id}</code> は， <code>{item_id}</code> で指定された俳句に”いいね”をするために使用する．</p><table><caption>Bashoutter API</caption><colgroup><col style="width:50%;"><col style="width:50%;"></colgroup><tbody><tr class="odd"><td><p><code>GET /haiku</code></p></td><td><p>俳句の一覧を取得する</p></td></tr><tr class="even"><td><p><code>POST /haiku</code></p></td><td><p>新しい俳句を投稿する</p></td></tr><tr class="odd"><td><p><code>PATCH /haiku/{item_id}</code></p></td><td><p><code>{item_id}</code> で指定された俳句にお気に入り票を一つ入れる</p></td></tr><tr class="even"><td><p><code>DELETE /haiku/{item_id}</code></p></td><td><p><code>{item_id}</code> で指定された俳句を削除する</p></td></tr></tbody></table><p>それぞれの API のパラメータおよび返り値の詳細は，ハンズオンのソースコードの中の <a href="https://github.com/andatoshiki/toshiki-notebookblob/main/handson/bashoutter/specs/swagger.yml" target="_blank" rel="noreferrer">swagger.yml</a> に定義してある．</p><p><strong>Open API Specification</strong> (OAS; 少し前は Swagger Specification とよばれていた) は， REST API のための記述フォーマットである． OAS に従って API の仕様が記述されていると，簡単にドキュメンテーションを生成したり，クライアントアプリケーションを自動生成することができる． <a href="https://github.com/andatoshiki/toshiki-notebookblob/main/handson/bashoutter/specs/swagger.yml" target="_blank" rel="noreferrer">今回用意した API 仕様</a> も， OAS に従って書いてある． 詳しくは <a href="https://swagger.io/docs/specification/about/" target="_blank" rel="noreferrer">Swagger の公式ドキュメンテーション</a> などを参照．</p><h3 id="アプリケーションアーキテクチャ" tabindex="-1">アプリケーションアーキテクチャ <a class="header-anchor" href="#アプリケーションアーキテクチャ" aria-label="Permalink to &quot;アプリケーションアーキテクチャ&quot;">​</a></h3><p>このハンズオンで作成するアプリケーションの概要を <a href="#handson_05_architecture">figure_title</a> に示す．</p><p><img src="'+l+`" alt="ハンズオン#5で作製するアプリケーションのアーキテクチャ"></p><p>簡単にまとめると，次のような設計である．</p><ul><li><p>クライアントからの API リクエストは， <strong>API Gateway</strong> (後述)にまず送信され， API の URI で指定された Lambda 関数へ転送される．</p></li><li><p>それぞれの API のパス (リソース) ごとに独立した Lambda を用意する．</p></li><li><p>俳句の情報 (作者，本文，投稿日時など) を記録するためのデータベース (DynamoDB) を用意する．</p></li><li><p>各 Lambda 関数には， DynamoDB へのアクセス権を付与する．</p></li><li><p>最後に，ウェブブラウザからコンテンツを表示できるよう， ウェブページの静的コンテンツを配信するための S3 バケットを用意する．クライアントはこの S3 バケットにアクセスすることで HTML/CSS/JS などのコンテンツを取得する．</p></li></ul><p>それでは，プログラムのソースコードを見てみよう (<a href="https://github.com/andatoshiki/toshiki-notebookblob/main/handson/bashoutter/app.py" target="_blank" rel="noreferrer">handson/bashoutter/app.py</a>)．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Bashoutter</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">core</span><span style="color:#ADBAC7;">.</span><span style="color:#6CB6FF;">Stack</span><span style="color:#ADBAC7;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">__init__</span><span style="color:#ADBAC7;">(self, scope: core.App, name: </span><span style="color:#6CB6FF;">str</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">**</span><span style="color:#ADBAC7;">kwargs) -&gt; </span><span style="color:#6CB6FF;">None</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">().</span><span style="color:#6CB6FF;">__init__</span><span style="color:#ADBAC7;">(scope, name, </span><span style="color:#F47067;">**</span><span style="color:#ADBAC7;">kwargs)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">#</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;"># dynamoDB table to store haiku</span></span>
<span class="line"><span style="color:#ADBAC7;">        table </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> ddb.Table(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;Bashoutter-Table&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">partition_key</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">ddb.Attribute(</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F69D50;">name</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;item_id&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F69D50;">type</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">ddb.AttributeType.</span><span style="color:#6CB6FF;">STRING</span></span>
<span class="line"><span style="color:#ADBAC7;">            ),</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">billing_mode</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">ddb.BillingMode.</span><span style="color:#6CB6FF;">PAY_PER_REQUEST</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">removal_policy</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">core.RemovalPolicy.</span><span style="color:#6CB6FF;">DESTROY</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">#</span></span>
<span class="line"><span style="color:#ADBAC7;">        bucket </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> s3.Bucket(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;Bashoutter-Bucket&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">website_index_document</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;index.html&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">public_read_access</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">removal_policy</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">core.RemovalPolicy.</span><span style="color:#6CB6FF;">DESTROY</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        common_params </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#96D0FF;">&quot;runtime&quot;</span><span style="color:#ADBAC7;">: _lambda.Runtime.</span><span style="color:#6CB6FF;">PYTHON_3_7</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#96D0FF;">&quot;environment&quot;</span><span style="color:#ADBAC7;">: {</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#96D0FF;">&quot;TABLE_NAME&quot;</span><span style="color:#ADBAC7;">: table.table_name</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">#</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;"># define Lambda functions</span></span>
<span class="line"><span style="color:#ADBAC7;">        get_haiku_lambda </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> _lambda.Function(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;GetHaiku&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">code</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">_lambda.Code.from_asset(</span><span style="color:#96D0FF;">&quot;api&quot;</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">handler</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;api.get_haiku&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">memory_size</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">512</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">**</span><span style="color:#ADBAC7;">common_params,</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"><span style="color:#ADBAC7;">        post_haiku_lambda </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> _lambda.Function(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;PostHaiku&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">code</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">_lambda.Code.from_asset(</span><span style="color:#96D0FF;">&quot;api&quot;</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">handler</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;api.post_haiku&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">**</span><span style="color:#ADBAC7;">common_params,</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"><span style="color:#ADBAC7;">        patch_haiku_lambda </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> _lambda.Function(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;PatchHaiku&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">code</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">_lambda.Code.from_asset(</span><span style="color:#96D0FF;">&quot;api&quot;</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">handler</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;api.patch_haiku&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">**</span><span style="color:#ADBAC7;">common_params,</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"><span style="color:#ADBAC7;">        delete_haiku_lambda </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> _lambda.Function(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;DeleteHaiku&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">code</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">_lambda.Code.from_asset(</span><span style="color:#96D0FF;">&quot;api&quot;</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">handler</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;api.delete_haiku&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">**</span><span style="color:#ADBAC7;">common_params,</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">#</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;"># grant permissions</span></span>
<span class="line"><span style="color:#ADBAC7;">        table.grant_read_data(get_haiku_lambda)</span></span>
<span class="line"><span style="color:#ADBAC7;">        table.grant_read_write_data(post_haiku_lambda)</span></span>
<span class="line"><span style="color:#ADBAC7;">        table.grant_read_write_data(patch_haiku_lambda)</span></span>
<span class="line"><span style="color:#ADBAC7;">        table.grant_read_write_data(delete_haiku_lambda)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">#</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;"># define API Gateway</span></span>
<span class="line"><span style="color:#ADBAC7;">        api </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> apigw.RestApi(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;BashoutterApi&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">default_cors_preflight_options</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">apigw.CorsOptions(</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F69D50;">allow_origins</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">apigw.Cors.</span><span style="color:#6CB6FF;">ALL_ORIGINS</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F69D50;">allow_methods</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">apigw.Cors.</span><span style="color:#6CB6FF;">ALL_METHODS</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            )</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        haiku </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> api.root.add_resource(</span><span style="color:#96D0FF;">&quot;haiku&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        haiku.add_method(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#96D0FF;">&quot;GET&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            apigw.LambdaIntegration(get_haiku_lambda)</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"><span style="color:#ADBAC7;">        haiku.add_method(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#96D0FF;">&quot;POST&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            apigw.LambdaIntegration(post_haiku_lambda)</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        haiku_item_id </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> haiku.add_resource(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">{item_id}</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        haiku_item_id.add_method(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#96D0FF;">&quot;PATCH&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            apigw.LambdaIntegration(patch_haiku_lambda)</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"><span style="color:#ADBAC7;">        haiku_item_id.add_method(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#96D0FF;">&quot;DELETE&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            apigw.LambdaIntegration(delete_haiku_lambda)</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bashoutter</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">core</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Stack</span><span style="color:#24292E;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, scope: core.App, name: </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs) -&gt; </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(scope, name, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">#</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># dynamoDB table to store haiku</span></span>
<span class="line"><span style="color:#24292E;">        table </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ddb.Table(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Bashoutter-Table&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">partition_key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ddb.Attribute(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;item_id&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ddb.AttributeType.</span><span style="color:#005CC5;">STRING</span></span>
<span class="line"><span style="color:#24292E;">            ),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">billing_mode</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ddb.BillingMode.</span><span style="color:#005CC5;">PAY_PER_REQUEST</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">removal_policy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">core.RemovalPolicy.</span><span style="color:#005CC5;">DESTROY</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">#</span></span>
<span class="line"><span style="color:#24292E;">        bucket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s3.Bucket(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Bashoutter-Bucket&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">website_index_document</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;index.html&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">public_read_access</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">removal_policy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">core.RemovalPolicy.</span><span style="color:#005CC5;">DESTROY</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        common_params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;runtime&quot;</span><span style="color:#24292E;">: _lambda.Runtime.</span><span style="color:#005CC5;">PYTHON_3_7</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;environment&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;TABLE_NAME&quot;</span><span style="color:#24292E;">: table.table_name</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">#</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># define Lambda functions</span></span>
<span class="line"><span style="color:#24292E;">        get_haiku_lambda </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _lambda.Function(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;GetHaiku&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">code</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_lambda.Code.from_asset(</span><span style="color:#032F62;">&quot;api&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">handler</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;api.get_haiku&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">memory_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">512</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">common_params,</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">        post_haiku_lambda </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _lambda.Function(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;PostHaiku&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">code</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_lambda.Code.from_asset(</span><span style="color:#032F62;">&quot;api&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">handler</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;api.post_haiku&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">common_params,</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">        patch_haiku_lambda </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _lambda.Function(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;PatchHaiku&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">code</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_lambda.Code.from_asset(</span><span style="color:#032F62;">&quot;api&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">handler</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;api.patch_haiku&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">common_params,</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">        delete_haiku_lambda </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _lambda.Function(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;DeleteHaiku&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">code</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_lambda.Code.from_asset(</span><span style="color:#032F62;">&quot;api&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">handler</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;api.delete_haiku&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">common_params,</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">#</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># grant permissions</span></span>
<span class="line"><span style="color:#24292E;">        table.grant_read_data(get_haiku_lambda)</span></span>
<span class="line"><span style="color:#24292E;">        table.grant_read_write_data(post_haiku_lambda)</span></span>
<span class="line"><span style="color:#24292E;">        table.grant_read_write_data(patch_haiku_lambda)</span></span>
<span class="line"><span style="color:#24292E;">        table.grant_read_write_data(delete_haiku_lambda)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">#</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># define API Gateway</span></span>
<span class="line"><span style="color:#24292E;">        api </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> apigw.RestApi(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;BashoutterApi&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">default_cors_preflight_options</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">apigw.CorsOptions(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#E36209;">allow_origins</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">apigw.Cors.</span><span style="color:#005CC5;">ALL_ORIGINS</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#E36209;">allow_methods</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">apigw.Cors.</span><span style="color:#005CC5;">ALL_METHODS</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            )</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        haiku </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> api.root.add_resource(</span><span style="color:#032F62;">&quot;haiku&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        haiku.add_method(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            apigw.LambdaIntegration(get_haiku_lambda)</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">        haiku.add_method(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            apigw.LambdaIntegration(post_haiku_lambda)</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        haiku_item_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> haiku.add_resource(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{item_id}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        haiku_item_id.add_method(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;PATCH&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            apigw.LambdaIntegration(patch_haiku_lambda)</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">        haiku_item_id.add_method(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;DELETE&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            apigw.LambdaIntegration(delete_haiku_lambda)</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br></div></div><ul><li><p>ここで，俳句の情報を記録しておくための DynamoDB テーブルを定義している．</p></li><li><p>静的コンテンツを配信するための S3 バケットを用意している．</p></li><li><p>それぞれの API で実行される Lambda 関数を定義している． 関数は Python3.7 で書かれており，コードは <a href="https://github.com/andatoshiki/toshiki-notebookblob/main/handson/bashoutter/api/api.py" target="_blank" rel="noreferrer">handson/bashoutter/api/api.py</a> にある．</p></li><li><p>&lt;3&gt; で定義された Lambda 関数に対し，データベースへの読み書きのアクセス権限を付与している．</p></li><li><p>ここで，API Gateway により，各 API パスとそこで実行されるべき Lambda 関数を紐付けている．</p></li></ul><p>それぞれの項目について，もう少し詳しく説明しよう．</p><h3 id="public-access-mode-の-s3-バケット" tabindex="-1">Public access mode の S3 バケット <a class="header-anchor" href="#public-access-mode-の-s3-バケット" aria-label="Permalink to &quot;Public access mode の S3 バケット&quot;">​</a></h3><p>S3 のバケットを作成しているコードを見てみよう．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">bucket </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> s3.Bucket(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;Bashoutter-Bucket&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">website_index_document</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;index.html&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">public_read_access</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">removal_policy</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">core.RemovalPolicy.</span><span style="color:#6CB6FF;">DESTROY</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">bucket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s3.Bucket(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Bashoutter-Bucket&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">website_index_document</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;index.html&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">public_read_access</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">removal_policy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">core.RemovalPolicy.</span><span style="color:#005CC5;">DESTROY</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>ここで注目してほしいのは <code>public_read_access=True</code> の部分だ． 前章で， S3 について説明を行ったときには触れなかったが， S3 には <strong>Public access mode</strong> という機能がある． Public access mode をオンにしておくと，バケットの中のファイルは認証なしで (i.e. インターネット上の誰でも) 閲覧できるようになる． この設定は，一般公開されているウェブサイトの静的なコンテンツを置いておくのに最適であり，多くのサーバーレスによるウェブサービスでこのような設計が行われる． public access mode を設定しておくと， <code>http://XXXX.s3-website-ap-northeast-1.amazonaws.com/</code> のような固有の URL がバケットに対して付与される． そして，クライアントがこの URL にアクセスをすると，バケットの中にある <code>index.html</code> がクライアントに返され，ページがロードされる (どのファイルが返されるかは， <code>website_index_document=&quot;index.html&quot;</code> の部分で設定している．)</p><p>なお，この時点ではバケットは空である． HTML/CSS/JS など静的コンテンツの配置は，デプロイを行った後ほどのステップで行う．</p><p>より本格的なウェブページを運用する際には， public access mode の S3 バケットに， <a href="https://aws.amazon.com/cloudfront/" target="_blank" rel="noreferrer">CloudFront</a> という機能を追加することが一般的である． CloudFront により，　<strong>Content Delivery Nework (CDN)</strong> や暗号化された HTTPS 通信を設定することができる． CloudFront についての詳細は <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html" target="_blank" rel="noreferrer">公式ドキュメンテーション &quot;What is Amazon CloudFront?&quot;</a> などを参照いただきたい．</p><p>今回のハンズオンでは説明の簡略化のため CloudFront の設定を行わなかったが，興味のある読者は次のリンクのプログラムが参考になるだろう．</p><ul><li><a href="https://github.com/aws-samples/aws-cdk-examples/tree/master/typescript/static-site" target="_blank" rel="noreferrer">https://github.com/aws-samples/aws-cdk-examples/tree/master/typescript/static-site</a></li></ul><p>今回の S3 バケットには， AWS によって付与されたランダムな URL がついている． これを． <code>example.com</code> のような自分のドメインでホストしたければ， AWS によって付与された URL を自分のドメインの DNS レコードに追加すればよい．</p><h3 id="api-のハンドラ関数" tabindex="-1">API のハンドラ関数 <a class="header-anchor" href="#api-のハンドラ関数" aria-label="Permalink to &quot;API のハンドラ関数&quot;">​</a></h3><p>API リクエストが来たときに，リクエストされた処理を行う関数のことをハンドラ (handler) 関数とよぶ． <code>GET /haiku</code> の API に対してのハンドラ関数を Lambda で定義している部分を見てみよう．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">get_haiku_lambda </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> _lambda.Function(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;GetHaiku&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">code</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">_lambda.Code.from_asset(</span><span style="color:#96D0FF;">&quot;api&quot;</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">handler</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;api.get_haiku&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">memory_size</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">512</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">**</span><span style="color:#ADBAC7;">common_params</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">get_haiku_lambda </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _lambda.Function(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;GetHaiku&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">code</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_lambda.Code.from_asset(</span><span style="color:#032F62;">&quot;api&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">handler</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;api.get_haiku&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">memory_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">512</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">common_params</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>簡単なところから見ていくと， <code>memory_size=512</code> の箇所でメモリーの使用量を 512MB に指定している． また， <code>code=_lambda.Code.from_asset(&quot;api&quot;)</code> によって外部のディレクトリ (<code>api/</code>) を参照せよと指定しており， <code>handler=&quot;api.get_haiku&quot;</code> のところで <code>api.py</code> というファイルの <code>get_haiku()</code> という関数をハンドラ関数として実行せよ，と定義している．</p><p>次に，ハンドラ関数として使用されている <code>get_haiku()</code> のコードを見てみよう (<a href="https://github.com/andatoshiki/toshiki-notebookblob/main/handson/bashoutter/api/api.py" target="_blank" rel="noreferrer">handson/bashoutter/api/api.py</a>)．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">ddb </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> boto3.resource(</span><span style="color:#96D0FF;">&quot;dynamodb&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">table </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> ddb.Table(os.environ[</span><span style="color:#96D0FF;">&quot;TABLE_NAME&quot;</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">get_haiku</span><span style="color:#ADBAC7;">(event, context):</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#96D0FF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#96D0FF;">    handler for GET /haiku</span></span>
<span class="line"><span style="color:#96D0FF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">try</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">        response </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> table.scan()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        status_code </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">200</span></span>
<span class="line"><span style="color:#ADBAC7;">        resp </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> response.get(</span><span style="color:#96D0FF;">&quot;Items&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">except</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Exception</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> e:</span></span>
<span class="line"><span style="color:#ADBAC7;">        status_code </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">500</span></span>
<span class="line"><span style="color:#ADBAC7;">        resp </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span><span style="color:#96D0FF;">&quot;description&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#F47067;">f</span><span style="color:#96D0FF;">&quot;Internal server error. </span><span style="color:#F47067;">{</span><span style="color:#6CB6FF;">str</span><span style="color:#ADBAC7;">(e)</span><span style="color:#F47067;">}</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#96D0FF;">&quot;statusCode&quot;</span><span style="color:#ADBAC7;">: status_code,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#96D0FF;">&quot;headers&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">HEADERS</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#96D0FF;">&quot;body&quot;</span><span style="color:#ADBAC7;">: json.dumps(resp, </span><span style="color:#F69D50;">cls</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">DecimalEncoder)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ddb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> boto3.resource(</span><span style="color:#032F62;">&quot;dynamodb&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">table </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ddb.Table(os.environ[</span><span style="color:#032F62;">&quot;TABLE_NAME&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_haiku</span><span style="color:#24292E;">(event, context):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    handler for GET /haiku</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> table.scan()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        status_code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span></span>
<span class="line"><span style="color:#24292E;">        resp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.get(</span><span style="color:#032F62;">&quot;Items&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">except</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> e:</span></span>
<span class="line"><span style="color:#24292E;">        status_code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">500</span></span>
<span class="line"><span style="color:#24292E;">        resp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;description&quot;</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;Internal server error. </span><span style="color:#005CC5;">{str</span><span style="color:#24292E;">(e)</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;statusCode&quot;</span><span style="color:#24292E;">: status_code,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;headers&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">HEADERS</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;body&quot;</span><span style="color:#24292E;">: json.dumps(resp, </span><span style="color:#E36209;">cls</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">DecimalEncoder)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><code>response = table.scan()</code> で，俳句の格納された DynamoDB テーブルから，すべての要素を取り出している． もしなにもエラーが起きなければステータスコード 200 が返され，もしなにかエラーが起こればステータスコード 500 が返されるようになっている．</p><p>上記のような操作を，ほかの API についても繰り返すことで，すべての API のハンドラ関数が定義されている．</p><p><code>GET /haiku</code> のハンドラ関数で， <code>response = table.scan()</code> という部分があるが，実はこれは最善の書き方ではない． DynamoDB の <code>scan()</code> メソッドは，最大で 1MB までのデータしか返さない． データベースのサイズが大きく， 1MB 以上のデータがある場合には，再帰的に <code>scan()</code> メソッドをよぶ必要がある． 詳しくは <a href="https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Table.scan" target="_blank" rel="noreferrer">boto3 ドキュメンテーション</a> を参照．</p><h3 id="aws-における権限の管理-iam" tabindex="-1">AWS における権限の管理 (IAM) <a class="header-anchor" href="#aws-における権限の管理-iam" aria-label="Permalink to &quot;AWS における権限の管理 (IAM)&quot;">​</a></h3><p>以下の部分のコードに注目してほしい．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">table.grant_read_data(get_haiku_lambda)</span></span>
<span class="line"><span style="color:#ADBAC7;">table.grant_read_write_data(post_haiku_lambda)</span></span>
<span class="line"><span style="color:#ADBAC7;">table.grant_read_write_data(patch_haiku_lambda)</span></span>
<span class="line"><span style="color:#ADBAC7;">table.grant_read_write_data(delete_haiku_lambda)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">table.grant_read_data(get_haiku_lambda)</span></span>
<span class="line"><span style="color:#24292E;">table.grant_read_write_data(post_haiku_lambda)</span></span>
<span class="line"><span style="color:#24292E;">table.grant_read_write_data(patch_haiku_lambda)</span></span>
<span class="line"><span style="color:#24292E;">table.grant_read_write_data(delete_haiku_lambda)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>これまでは説明の簡略化のためにあえて触れてこなかったが， AWS には <a href="https://aws.amazon.com/iam/" target="_blank" rel="noreferrer">IAM (Identity and Access Management)</a> という重要な概念がある． IAM は基本的に，あるリソースがほかのリソースに対してどのような権限をもっているか，を規定するものである． Lambda は，デフォルトの状態ではほかのリソースにアクセスする権限をなにも有していない． したがって， Lambda 関数が DynamoDB のデータを読み書きするためには，それを許可するような IAM が Lambda 関数に付与されていなければならない．今回の S3 バケットには， AWS によって付与されたランダムな URL がついている． これを． <code>example.com</code> のような自分のドメインでホストしたければ， AWS によって付与された URL を自分のドメインの DNS レコードに追加すればよい．</p><p>CDK による <code>dynamodb.Table</code> オブジェクトには <code>grant_read_write_data()</code> という便利なメソッドが備わっており，アクセスを許可したい Lambda 関数を引数としてこのメソッドを呼ぶことで，データベースへの読み書きを許可する IAM を付与することができる． 同様に，CDK の <code>s3.Bucket</code> オブジェクトにも <code>grant_read_write()</code> というメソッドが備わっており，これによってバケットへの読み書きを許可することができる． このメソッドは，実は (#sec_aws_batch) で AWS Batch によるクラスターを構成した際に使用した． 興味のある読者は振り返ってコードを確認してみよう．</p><p>各リソースに付与する IAM は，<strong>必要最低限の権限を与えるにとどめる</strong>というのが基本方針である． これにより，セキュリティを向上させるだけでなく，意図していないプログラムからのデータベースへの読み書きを防止するという点で，バグを未然に防ぐことができる．</p><p>そのような理由により，このコードでは <code>GET</code> のハンドラー関数に対しては <code>grant_read_data()</code> によって， read 権限のみを付与している．</p><h3 id="api-gateway" tabindex="-1">API Gateway <a class="header-anchor" href="#api-gateway" aria-label="Permalink to &quot;API Gateway&quot;">​</a></h3><p><a href="https://aws.amazon.com/api-gateway/" target="_blank" rel="noreferrer">API Gateway</a> とは， API の&quot;入り口&quot;として，API のリクエストパスに従って Lambda や EC2 などに接続を行うという機能を担う (<a href="#fig:bashoutter_api_gateway">figure_title</a>)． Lambda や EC2 によって行われた処理の結果は，再び API Gateway を経由してクライアントに返される． このように，クライアントとバックエンドサーバーの間に立ち， API のリソースパスに応じて接続先を振り分けるようなサーバーを<strong>ルーター</strong>，あるいは<strong>リバースプロキシ</strong>とよんだりする． 従来的には，ルーターにはそれ専用の仮想サーバーが置かれることが一般的であった． しかし， API Gateway はサーバーレスなルーターとして，固定されたサーバーを配置することなく， API のリクエストが来たときのみ起動し，API のルーティングを実行する． サーバーレスであることの当然の帰結として，アクセスの件数が増大したときにはそれにルーティングの処理能力を自動で増やす機能も備わっている．</p><p><img src="`+o+`" alt="API Gateway"></p><p>API Gateway を配置することで，大量 (1 秒間に数千から数万件) の API リクエストに対応することのできるシステムを容易に構築することができる． API Gateway の料金は <a href="#tab_handson_05_apigateway_price">table_title</a> のように設定されている． また，無料利用枠により，月ごとに 100 万件までのリクエストは 0 円で利用できる．</p><table><caption>API Gateway の利用料金設定 (<a href="https://aws.amazon.com/api-gateway/pricing/">参照</a>)</caption><colgroup><col style="width:50%;"><col style="width:50%;"></colgroup><thead><tr class="header"><th>Number of Requests (per month)</th><th>Price (per million)</th></tr></thead><tbody><tr class="odd"><td><p>First 333 million</p></td><td><p>$4.25</p></td></tr><tr class="even"><td><p>Next 667 million</p></td><td><p>$3.53</p></td></tr><tr class="odd"><td><p>Next 19 billion</p></td><td><p>$3.00</p></td></tr><tr class="even"><td><p>Over 20 billion</p></td><td><p>$1.91</p></td></tr></tbody></table><p>ソースコードの該当箇所を見てみよう．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">#</span></span>
<span class="line"><span style="color:#ADBAC7;">api </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> apigw.RestApi(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;BashoutterApi&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">default_cors_preflight_options</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">apigw.CorsOptions(</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">allow_origins</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">apigw.Cors.</span><span style="color:#6CB6FF;">ALL_ORIGINS</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">allow_methods</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">apigw.Cors.</span><span style="color:#6CB6FF;">ALL_METHODS</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">#</span></span>
<span class="line"><span style="color:#ADBAC7;">haiku </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> api.root.add_resource(</span><span style="color:#96D0FF;">&quot;haiku&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">#</span></span>
<span class="line"><span style="color:#ADBAC7;">haiku.add_method(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#96D0FF;">&quot;GET&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    apigw.LambdaIntegration(get_haiku_lambda)</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">haiku.add_method(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#96D0FF;">&quot;POST&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    apigw.LambdaIntegration(post_haiku_lambda)</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">#</span></span>
<span class="line"><span style="color:#ADBAC7;">haiku_item_id </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> haiku.add_resource(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">{item_id}</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">#</span></span>
<span class="line"><span style="color:#ADBAC7;">haiku_item_id.add_method(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#96D0FF;">&quot;PATCH&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    apigw.LambdaIntegration(patch_haiku_lambda)</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">haiku_item_id.add_method(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#96D0FF;">&quot;DELETE&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    apigw.LambdaIntegration(delete_haiku_lambda)</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#</span></span>
<span class="line"><span style="color:#24292E;">api </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> apigw.RestApi(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;BashoutterApi&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">default_cors_preflight_options</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">apigw.CorsOptions(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">allow_origins</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">apigw.Cors.</span><span style="color:#005CC5;">ALL_ORIGINS</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">allow_methods</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">apigw.Cors.</span><span style="color:#005CC5;">ALL_METHODS</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#</span></span>
<span class="line"><span style="color:#24292E;">haiku </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> api.root.add_resource(</span><span style="color:#032F62;">&quot;haiku&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">#</span></span>
<span class="line"><span style="color:#24292E;">haiku.add_method(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    apigw.LambdaIntegration(get_haiku_lambda)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">haiku.add_method(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    apigw.LambdaIntegration(post_haiku_lambda)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#</span></span>
<span class="line"><span style="color:#24292E;">haiku_item_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> haiku.add_resource(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{item_id}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">#</span></span>
<span class="line"><span style="color:#24292E;">haiku_item_id.add_method(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;PATCH&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    apigw.LambdaIntegration(patch_haiku_lambda)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">haiku_item_id.add_method(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;DELETE&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    apigw.LambdaIntegration(delete_haiku_lambda)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><ul><li><p>最初に， <code>api = apigw.RestApi()</code> により，空の API Gateway を作成している．</p></li><li><p>次に， <code>api.root.add_resource()</code> のメソッドを呼ぶことで， <code>/haiku</code> という API パスを追加している．</p></li><li><p>続いて， <code>add_method()</code> を呼ぶことで， <code>GET</code>, <code>POST</code> のメソッドを <code>/haiku</code> のパスに定義している．</p></li><li><p>さらに， <code>haiku.add_resource(&quot;{item_id}&quot;)</code> により， <code>/haiku/{item_id}</code> という API パスを追加している．</p></li><li><p>最後に， <code>add_method()</code> を呼ぶことにより， <code>PATCH</code>, <code>DELETE</code> のメソッドを <code>/haiku/{item_id}</code> のパスに定義している．</p></li></ul><p>このように， API Gateway の使い方は非常にシンプルで，逐次的に API パスとそこで実行されるメソッド・Lambda を記述していくだけでよい．</p><p>このプログラムで 新規 API を作成すると， ランダムな URL がその API のエンドポイントとして割り当てられる． これを． <code>api.example.com</code> のような自分のドメインでホストしたければ， AWS によって付与された URL を自分のドメインの DNS レコードに追加すればよい．</p><p>API Gateway で新規 API を作成したとき， <code>default_cors_preflight_options=</code> というパラメータで <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank" rel="noreferrer">Cross Origin Resource Sharing (CORS)</a> の設定を行っている． これは，ブラウザで走る Web アプリケーションと API を接続するときに必要な設定である．</p><h2 id="アプリケーションのデプロイ" tabindex="-1">アプリケーションのデプロイ <a class="header-anchor" href="#アプリケーションのデプロイ" aria-label="Permalink to &quot;アプリケーションのデプロイ&quot;">​</a></h2><p>アプリケーションの中身が理解できたところで，早速デプロイを行ってみよう． デプロイの手順は，これまでのハンズオンとほとんど共通である． ここでは，コマンドのみ列挙する (<code>#</code> で始まる行はコメントである)． シークレットキーの設定も忘れずに ( (#aws_cli_install))．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># プロジェクトのディレクトリに移動</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">cd</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">intro-aws/handson/bashoutter</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># venv を作成し，依存ライブラリのインストールを行う</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">python3</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-m</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">venv</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">.env</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">source</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">.env/bin/activate</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">pip</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">install</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-r</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># デプロイを実行</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">cdk</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">deploy</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># プロジェクトのディレクトリに移動</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">intro-aws/handson/bashoutter</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># venv を作成し，依存ライブラリのインストールを行う</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python3</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">venv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.env</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">source</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.env/bin/activate</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-r</span><span style="color:#24292E;"> </span><span style="color:#032F62;">requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># デプロイを実行</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cdk</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deploy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>デプロイのコマンドが無事に実行されれば， <a href="#handson_05_cdk_output">figure_title</a> のような出力が得られるはずである． ここで表示されている <code>Bashoutter.BashoutterApiEndpoint = XXXX</code>, <code>Bashoutter.BucketUrl = YYYY</code> の二つ文字列はあとで使うのでメモしておこう．</p><p><img src="`+e+'" alt="CDKデプロイ実行後の出力"></p><p>AWS コンソールにログインして，デプロイされたスタックを確認してみよう． まずは，コンソールから API Gateway のページに行く． すると， <a href="#handson_05_apigw_console_list">figure_title</a> のような画面が表示され，デプロイ済みの API エンドポイントの一覧が確認できる．</p><p><img src="'+t+'" alt="API Gateway コンソール画面 (1)"></p><p>今回デプロイした &quot;BashoutterApi&quot; という名前の API をクリックすることで <a href="#handson_05_apigw_console_detail">figure_title</a> のような画面に遷移し，詳細情報を閲覧できる． <code>GET /haiku</code>, <code>POST /haiku</code> などが定義されていることが確認できる．</p><p>それぞれのメソッドをクリックすると，そのメソッドの詳細情報を確認できる． API Gateway は，前述したルーティングの機能だけでなく，認証機能などを追加することも可能である． このハンズオンではとくにこれらの機能は使用しないが， &quot;Method Request&quot; と書いてある項目などがそれに相当する． 次に， <a href="#handson_05_apigw_console_detail">figure_title</a> で画面右端の赤色で囲った部分に，この API で呼ばれる Lambda 関数が指定されていることに注目しよう． 関数名をクリックと，該当する Lambda のコンソールに遷移し，関数の中身を閲覧することが可能である．</p><p><img src="'+c+'" alt="API Gateway コンソール画面 (2)"></p><p>次に， S3 のコンソール画面に移ってみよう． <code>bashouter-</code> で始まるランダムな名前のバケットが見つかるはずである (<a href="#handson_05_s3_console">figure_title</a>)．</p><p><img src="'+r+'" alt="S3 コンソール画面"></p><p>バケットの名前をクリックすることで，バケットの中身を確認してみよう． <code>index.html</code> のほか， <code>css/</code>, <code>js/</code> などのディレクトリがあるのが確認できるだろう (<a href="#handson_05_s3_contents">figure_title</a>)． これらが，ウェブページの&quot;枠&quot;を定義している静的コンテンツである．</p><p><img src="'+i+`" alt="S3 バケットの中身"></p><h2 id="api-リクエストを送信する" tabindex="-1">API リクエストを送信する <a class="header-anchor" href="#api-リクエストを送信する" aria-label="Permalink to &quot;API リクエストを送信する&quot;">​</a></h2><p>それでは，デプロイしたアプリケーションに対し，実際に API リクエストを送信してみよう． まずはコマンドラインから API を送信する演習を行おう． S3 に配置した GUI は一旦おいておく．</p><p>ここではコマンドラインから HTTP API リクエストを送信するためのシンプルな HTTP クライアントである <a href="https://httpie.org/" target="_blank" rel="noreferrer">HTTPie</a> を使ってみよう． HTTPie は，スタックをデプロイするときに Python 仮想環境 (venv) を作成したとき，一緒にインストールされている． 念のためインストールがうまくいっているか確認するには，仮想環境を立ち上げたあとコマンドラインに <code>http</code> と打ってみる． ヘルプのメッセージが出力されたら準備 OK である．</p><p>まず，先ほどデプロイを実行したときに得られた API のエンドポイントの URL (<code>Bashoutter.BashoutterApiEndpoint = XXXX</code> で得られた <code>XXXX</code> の文字列) をコマンドラインの変数に設定しておく．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">export</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">ENDPOINT_URL=XXXX</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">export</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ENDPOINT_URL=XXXX</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>次に，俳句の一覧を取得するため， <code>GET /haiku</code> の API を送信してみよう．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">http</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">GET</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;\${</span><span style="color:#ADBAC7;">ENDPOINT_URL</span><span style="color:#96D0FF;">}/haiku&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http</span><span style="color:#24292E;"> </span><span style="color:#032F62;">GET</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">ENDPOINT_URL</span><span style="color:#032F62;">}/haiku&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>現時点では，まだだれも俳句を投稿していないので，空の配列 (<code>[]</code>) が返ってくる．</p><p>それでは次に， <code>POST /haiku</code> を使って俳句を投稿してみよう．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">http</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">POST</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;\${</span><span style="color:#ADBAC7;">ENDPOINT_URL</span><span style="color:#96D0FF;">}/haiku&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">\\</span></span>
<span class="line"><span style="color:#ADBAC7;">username=</span><span style="color:#96D0FF;">&quot;松尾芭蕉&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">\\</span></span>
<span class="line"><span style="color:#ADBAC7;">first=</span><span style="color:#96D0FF;">&quot;閑さや&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">\\</span></span>
<span class="line"><span style="color:#ADBAC7;">second=</span><span style="color:#96D0FF;">&quot;岩にしみ入る&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">\\</span></span>
<span class="line"><span style="color:#ADBAC7;">third=</span><span style="color:#96D0FF;">&quot;蝉の声&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http</span><span style="color:#24292E;"> </span><span style="color:#032F62;">POST</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">ENDPOINT_URL</span><span style="color:#032F62;">}/haiku&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">username=</span><span style="color:#032F62;">&quot;松尾芭蕉&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">first=</span><span style="color:#032F62;">&quot;閑さや&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">second=</span><span style="color:#032F62;">&quot;岩にしみ入る&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">third=</span><span style="color:#032F62;">&quot;蝉の声&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>次のような出力が得られるだろう．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">HTTP/1.1</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">201</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">Created</span></span>
<span class="line"><span style="color:#F69D50;">Connection:</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">keep-alive</span></span>
<span class="line"><span style="color:#F69D50;">Content-Length:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">49</span></span>
<span class="line"><span style="color:#F69D50;">Content-Type:</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">application/json</span></span>
<span class="line"><span style="color:#6CB6FF;">....</span></span>
<span class="line"><span style="color:#ADBAC7;">{</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">&quot;description&quot;</span><span style="color:#6CB6FF;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Successfully added a new haiku&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">HTTP/1.1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">201</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Created</span></span>
<span class="line"><span style="color:#6F42C1;">Connection:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">keep-alive</span></span>
<span class="line"><span style="color:#6F42C1;">Content-Length:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">49</span></span>
<span class="line"><span style="color:#6F42C1;">Content-Type:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">application/json</span></span>
<span class="line"><span style="color:#005CC5;">....</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">&quot;description&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Successfully added a new haiku&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>新しい俳句を投稿することに成功したようである． 本当に俳句が追加されたか，再び GET リクエストを呼ぶことで確認してみよう．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">http</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">GET</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;\${</span><span style="color:#ADBAC7;">ENDPOINT_URL</span><span style="color:#96D0FF;">}/haiku&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F69D50;">HTTP/1.1</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">200</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">OK</span></span>
<span class="line"><span style="color:#F69D50;">Connection:</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">keep-alive</span></span>
<span class="line"><span style="color:#F69D50;">Content-Length:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">258</span></span>
<span class="line"><span style="color:#F69D50;">Content-Type:</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">application/json</span></span>
<span class="line"><span style="color:#6CB6FF;">...</span></span>
<span class="line"><span style="color:#ADBAC7;">[</span></span>
<span class="line"><span style="color:#ADBAC7;">    {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#96D0FF;">&quot;created_at&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&quot;2020-07-06T02:46:04+00:00&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#96D0FF;">&quot;first&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&quot;閑さや&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#96D0FF;">&quot;item_id&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&quot;7e91c5e4d7ad47909e0ac14c8bbab05b&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#96D0FF;">&quot;likes&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">0.0</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#96D0FF;">&quot;second&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&quot;岩にしみ入る&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#96D0FF;">&quot;third&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&quot;蝉の声&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#96D0FF;">&quot;username&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&quot;松尾芭蕉&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http</span><span style="color:#24292E;"> </span><span style="color:#032F62;">GET</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">ENDPOINT_URL</span><span style="color:#032F62;">}/haiku&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">HTTP/1.1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span><span style="color:#032F62;">OK</span></span>
<span class="line"><span style="color:#6F42C1;">Connection:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">keep-alive</span></span>
<span class="line"><span style="color:#6F42C1;">Content-Length:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">258</span></span>
<span class="line"><span style="color:#6F42C1;">Content-Type:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">application/json</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;created_at&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;2020-07-06T02:46:04+00:00&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;first&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;閑さや&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;item_id&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;7e91c5e4d7ad47909e0ac14c8bbab05b&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;likes&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;second&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;岩にしみ入る&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;third&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;蝉の声&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;松尾芭蕉&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>素晴らしい！</p><p>次に， <code>PATCH /haiku/{item_id}</code> を呼ぶことでこの俳句にいいねを追加してみよう． 一つ前のコマンドで取得した俳句の <code>item_id</code> を，次のコマンドの <code>XXXX</code> に代入した上で実行しよう．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">http</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">PATCH</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;\${</span><span style="color:#ADBAC7;">ENDPOINT_URL</span><span style="color:#96D0FF;">}/haiku/XXXX&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PATCH</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">ENDPOINT_URL</span><span style="color:#032F62;">}/haiku/XXXX&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>{&quot;description&quot;: &quot;OK&quot;}</code> という出力が得られるはずである． 再び GET リクエストを送ることで，いいね (<code>likes</code>) が 1 増えたことを確認しよう．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">http</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">GET</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;\${</span><span style="color:#ADBAC7;">ENDPOINT_URL</span><span style="color:#96D0FF;">}/haiku&quot;</span></span>
<span class="line"><span style="color:#6CB6FF;">...</span></span>
<span class="line"><span style="color:#ADBAC7;">[</span></span>
<span class="line"><span style="color:#ADBAC7;">    {</span></span>
<span class="line"><span style="color:#ADBAC7;">        ...</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#96D0FF;">&quot;likes&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">1.0</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        ...</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http</span><span style="color:#24292E;"> </span><span style="color:#032F62;">GET</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">ENDPOINT_URL</span><span style="color:#032F62;">}/haiku&quot;</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        ...</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;likes&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>最後に， DELETE リクエストを送ることで俳句をデータベースから削除しよう． <code>XXXX</code> は <code>item_id</code> の値で置き換えたうえで次のコマンドを実行する．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">http</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">DELETE</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;\${</span><span style="color:#ADBAC7;">ENDPOINT_URL</span><span style="color:#96D0FF;">}/haiku/XXXX&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http</span><span style="color:#24292E;"> </span><span style="color:#032F62;">DELETE</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">ENDPOINT_URL</span><span style="color:#032F62;">}/haiku/XXXX&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>再び GET リクエストを送ることで，返り値が空 (<code>[]</code>) になっていることを確認しよう．</p><p>これで，俳句の投稿・取得・削除そしていいねの追加，といった基本的な API がきちんと動作していることが確認できた．</p><h2 id="大量の-api-リクエストをシミュレートする" tabindex="-1">大量の API リクエストをシミュレートする <a class="header-anchor" href="#大量の-api-リクエストをシミュレートする" aria-label="Permalink to &quot;大量の API リクエストをシミュレートする&quot;">​</a></h2><p>さて，前節ではマニュアルで一つずつ俳句を投稿した． 多数のユーザーがいるような SNS では，1 秒間に数千件以上の投稿がされている． 今回はサーバーレスアーキテクチャを採用したことで，そのような瞬間的な大量アクセスにも容易に対応できるようなシステムが自動的に構築されている． このポイントを実証するため，ここでは大量の API が送信された状況をシミュレートしてみよう．</p><p><a href="https://github.com/andatoshiki/toshiki-notebookblob/main/handson/bashoutter/client.py" target="_blank" rel="noreferrer">handson/bashoutter/client.py</a> に，大量の API リクエストをシミュレートするためのプログラムが書かれている． このプログラムを使用すると， <code>POST /haiku</code> の API リクエストを指定された回数だけ実行することができる．</p><p>テストとして， API を 300 回実行してみよう． 次のコマンドを実行する．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">python</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">client.py</span><span style="color:#ADBAC7;"> $ENDPOINT_URL </span><span style="color:#96D0FF;">post_many</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">300</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python</span><span style="color:#24292E;"> </span><span style="color:#032F62;">client.py</span><span style="color:#24292E;"> $ENDPOINT_URL </span><span style="color:#032F62;">post_many</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">300</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>数秒のうちに実行が完了するだろう． これがもし，単一のサーバーからなる API だったとしたら，このような大量のリクエストの処理にはもっと時間がかかっただろう． 最悪の場合には，サーバーダウンにもつながっていたかもしれない． したがって，今回作成したサーバーレスアプリケーションは，とてもシンプルながらも 1 秒間に数百件の処理を行えるような，スケーラブルなクラウドシステムであることがわかる． サーバーレスでクラウドを設計することの利点を垣間見ることができただろうか？</p><p>先述のコマンドにより大量の俳句を投稿するとデータベースに無駄なデータがどんどん溜まってしまう． データベースを完全に空にするには，次のコマンドを使用する．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">python</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">client.py</span><span style="color:#ADBAC7;"> $ENDPOINT_URL </span><span style="color:#96D0FF;">clear_database</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python</span><span style="color:#24292E;"> </span><span style="color:#032F62;">client.py</span><span style="color:#24292E;"> $ENDPOINT_URL </span><span style="color:#032F62;">clear_database</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="bashoutter-gui-を動かしてみる" tabindex="-1">Bashoutter GUI を動かしてみる <a class="header-anchor" href="#bashoutter-gui-を動かしてみる" aria-label="Permalink to &quot;Bashoutter GUI を動かしてみる&quot;">​</a></h2><p>前節ではコマンドラインから API を送信する演習を行った． ウェブアプリケーションでは，これと同じことがウェブブラウザの背後で行われ，ページのコンテンツが表示されている ( (#fig:web_server) 参照)． 最後に， API が GUI と統合されるとどうなるのか，見てみよう．</p><p>CDK のコードで， Public access mode の S3 バケットを作成したことを思い出してほしい． 最初のステップとして，ここにウェブサイトのコンテンツをアップロードしよう． ハンズオンのソースコードの中に <code>gui/dist</code> というフォルダが見つかるはずである． ここにはビルド済みのウェブサイトの静的コンテンツ (HTML/CSS/JavaScript) が入っている． AWS CLI のコマンドを使うことでこれらのファイルを S3 にアップロードしよう．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">aws</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">s3</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">cp</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--recursive</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">./gui/dist</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">s3://</span><span style="color:#F47067;">&lt;</span><span style="color:#96D0FF;">BUCKET_NAM</span><span style="color:#ADBAC7;">E</span><span style="color:#F47067;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aws</span><span style="color:#24292E;"> </span><span style="color:#032F62;">s3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cp</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--recursive</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./gui/dist</span><span style="color:#24292E;"> </span><span style="color:#032F62;">s3://</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">BUCKET_NAM</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>コマンドを実行する際は， Bashoutter ハンズオンのディレクトリから行うこと (<code>./gui/dist</code> に注目)，そして <code>&lt;BUCKET_NAME&gt;</code> にはデプロイした自身のバケットの名前が入る点に注意． 念のため，AWS コンソールにログインし，バケットにファイルがアップロードされている点を確認しておこう．</p><p>なお，今回は GUI の説明はとくに行わないが， Bashoutter のウェブサイトは <a href="https://vuejs.org/" target="_blank" rel="noreferrer">Vue.js</a> と <a href="https://vuetifyjs.com/" target="_blank" rel="noreferrer">Vuetify</a> という UI フレームワークを使って作成した． Vue を使うことで， Single page application (SPA) の技術でウェブサイトの画面がレンダリングされる． ソースコードは <a href="https://github.com/andatoshiki/toshiki-notebooktree/main/handson/bashoutter/gui" target="_blank" rel="noreferrer">handson/bashoutter/gui</a> のディレクトリの中にあるので，興味のある読者は確認してみるとよい．</p><p>アップトードが完了したところで，続いてデプロイを実行したときにコマンドラインの出力を見直してみよう． <code>Bashoutter.BucketUrl=</code> で与えられた URL が見つかるはずである (<a href="#handson_05_cdk_output">figure_title</a>)． これは，先述したとおり， Public access mode の S3 バケットの URL である．</p><p>ウェブブラウザを開き，アドレスバーに S3 の URL を入力しへアクセスしてみよう． すると， <a href="#handson_05_bashoutter_2">figure_title</a> のようなページが表示されるはずである．</p><p><img src="`+y+'" alt="&quot;Bashoutter&quot; の GUI 画面"></p><p>ページが表示されたら，一番上の &quot;API Endpoint URL&quot; と書いてあるテキストボックスに，今回デプロイした <strong>API Gateway の URL を入力</strong>する (今回のアプリケーションでは，API Gateway の URL はランダムに割り当てられるのでこのような GUI の仕様になっている)． そうしたら，画面の &quot;REFRESH&quot; と書いてあるボタンを押してみよう． データベースに俳句が登録済みであれば，俳句の一覧が表示されるはずである． 各俳句の左下にあるハートのアイコンをクリックすることで， &quot;like&quot; の票を入れることができる．</p><p>新しい俳句を投稿するには，五七五と投稿者の名前を入力して， &quot;POST&quot; を押す． &quot;POST&quot; を押した後は，再び &quot;REFRESH&quot; ボタンを押すことで最新の俳句のリストをデータベースから取得する．</p><h2 id="アプリケーションの削除" tabindex="-1">アプリケーションの削除 <a class="header-anchor" href="#アプリケーションの削除" aria-label="Permalink to &quot;アプリケーションの削除&quot;">​</a></h2><p>これで， Bashoutter プロジェクトが完成した！ この SNS は，インターネットを通じて世界のどこからでもアクセスできる状態にある． また， <a href="#simulating_many_apis">大量の API リクエストをシミュレートする</a> で見たように，大量のユーザーの同時アクセスによる負荷がかかっても，柔軟にスケールが行われ遅延なく処理を行うことができる． 極めて簡素ながらも，立派なウェブサービスとしてのスペックは満たしているのである！</p><p>Bashoutter アプリを存分に楽しむことができたら，最後に忘れずにスタックを削除しよう．</p><p>コマンドラインからスタックの削除を実行するには，次のコマンドを使う．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">cdk</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">destroy</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cdk</span><span style="color:#24292E;"> </span><span style="color:#032F62;">destroy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>CDK のバージョンによっては S3 のバケットが空でないと， <code>cdk destroy</code> がエラーを出力する場合がある． この場合はスタックを削除する前に， S3 バケットの中身をすべて削除しなければならない．</p><p>コンソールから実行するには， S3 コンソールに行き，バケットの中身を開いたうえで，すべてのファイルを選択し， &quot;Actions&quot; → &quot;Delete&quot; を実行すればよいい．</p><p>コマンドラインから実行するには， 次のコマンドを使う． &lt;BUCKET NAME&gt; のところは，自分の バケットの名前 (&quot;BashoutterBucketXXXX&quot; というパターンの名前がついているはずである) に置き換えることを忘れずに．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">aws</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">s3</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">rm</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&lt;</span><span style="color:#96D0FF;">BUCKET</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">NAM</span><span style="color:#ADBAC7;">E</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--recursive</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aws</span><span style="color:#24292E;"> </span><span style="color:#032F62;">s3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">BUCKET</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NAM</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--recursive</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="小括" tabindex="-1">小括 <a class="header-anchor" href="#小括" aria-label="Permalink to &quot;小括&quot;">​</a></h2><p>ここまでが，本書第三部の内容であった．</p><p>第三部では，クラウドの応用として，一般の人に使ってもらうようなウェブアプリケーション・データベースをどのようにして作るのか，という点に焦点を当てて，説明を行った． その中で，従来的なクラウドシステムの設計と，ここ数年の最新の設計方法であるサーバーレスアーキテクチャについて解説した． (#sec_intro_serverless) では， AWS でのサーバーレスの実践として， Lambda, S3, DynamoDB のハンズオンを行った． 最後に， <a href="#sec_bashoutter">Hands-on #6: Bashoutter</a> では，これらの技術を統合することで，完全サーバーレスなウェブアプリケーション &quot;Bashoutter&quot; を作成した．</p><p>これらの演習を通じて，世の中のウェブサービスがどのようにしてでき上がっているのか，少し理解が深まっただろうか？ また，そのようなウェブアプリケーションを自分が作りたいと思ったとき，今回のハンズオンがその出発点となることができたならば幸いである．</p>',126);function E(_,B,g,q,k,v){const a=n;return u(),A("div",null,[h,b(a,{readTime:"12",words:"2.9k"}),F])}const S=d(C,[["render",E]]);export{I as __pageData,S as default};
