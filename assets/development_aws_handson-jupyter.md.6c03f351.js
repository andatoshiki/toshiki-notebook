import{_ as s,a,b as n,c as l,d as p,e as o,f as e,g as t,h as r,i as c,j as y,k as F,l as i,m as A,n as D,o as B,p as C}from"./chunks/mnist_prediction.4ba5b405.js";import{_ as d,c as u,o as m,R as h}from"./chunks/framework.a1bac067.js";const w=JSON.parse('{"title":"Hands-on #2: AWS でディープラーニングを実践","description":"","frontmatter":{},"headers":[],"relativePath":"development/aws/handson-jupyter.md","filePath":"development/aws/handson-jupyter.md","lastUpdated":1684857748000}'),b={name:"development/aws/handson-jupyter.md"},f=h('<h1 id="hands-on-2-aws-でディープラーニングを実践" tabindex="-1">Hands-on #2: AWS でディープラーニングを実践 <a class="header-anchor" href="#hands-on-2-aws-でディープラーニングを実践" aria-label="Permalink to &quot;Hands-on \\#2: AWS でディープラーニングを実践&quot;">​</a></h1><h2 id="準備" tabindex="-1">準備 <a class="header-anchor" href="#準備" aria-label="Permalink to &quot;準備&quot;">​</a></h2><p>ハンズオン第二回では， GPU を搭載した EC2 インスタンスを起動し，深層学習モデルの学習と推論を実行する演習を行う．</p><p>ハンズオンのソースコードは GitHub の <a href="https://github.com/tomomano/learn-aws-by-coding/tree/main/handson/mnist" target="_blank" rel="noreferrer">handson/mnist</a> に置いてある．</p><p>本ハンズオンの実行には，第一回ハンズオンで説明した準備 (<a href="#handson_01_prep">???</a>) が整っていることを前提とする． それ以外に必要な準備はない．</p><p>初期状態の AWS アカウントでは， GPU 搭載の G タイプのインスタンスの起動上限が 0 になっていることがある． これを確認するには， AWS コンソールから EC2 の画面を開き，左のメニューから <code>Limits</code> を選択する． その中の <code>Running On-Demand All G instances</code> という数字が G インスタンスの起動上限を表している．</p><p>もし，これが 0 になっていた場合は， AWS の自動申請フォームから上限緩和のリクエストを送る必要がある． 詳しくは <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html" target="_blank" rel="noreferrer">公式ドキュメンテーション &quot;Amazon EC2 service quotas&quot;</a> を参照のこと．</p><p>このハンズオンは， <code>g4dn.xlarge</code> タイプの EC2 インスタンスを使うので，東京 (<code>ap-northeast-1</code>) リージョンでは 0.71 $/hour のコストが発生する．</p><p>AWS Educate Starter Account を使用している読者へ: 執筆時点においては， Starter Account には GPU 搭載型インスタンスを起動できないという制限が設けられている． したがって， Starter Account のユーザーはこのハンズオンを実行することはできない． 興味のある読者は，制限のない一般アカウントを自分自身で取得する必要があることに注意．</p><h2 id="アプリケーションの説明" tabindex="-1">アプリケーションの説明 <a class="header-anchor" href="#アプリケーションの説明" aria-label="Permalink to &quot;アプリケーションの説明&quot;">​</a></h2><p>このハンズオンで作成するアプリケーションの概要を <a href="#handson_02_architecture">figure_title</a> に示す．</p><p><img src="'+s+`" alt="ハンズオン#2で作製するアプリケーションのアーキテクチャ"></p><p>図の多くの部分が，第一回ハンズオンで作成したアプリケーションと共通していることに気がつくだろう． 少しの変更で，簡単にディープラーニングを走らせる環境を構築することができるのである！主な変更点は次の３点である．</p><ul><li><p>GPU を搭載した <code>g4dn.xlarge</code> インスタンスタイプを使用</p></li><li><p>ディープラーニングに使うプログラムがあらかじめインストールされた DLAMI (後述) を使用</p></li><li><p>SSH にポートフォワーディングのオプションつけてサーバーに接続し，サーバーで起動している Jupyter Notebook (後述) を使ってプログラムを書いたり実行したりする</p></li></ul><p>ハンズオンで使用するプログラムのコードをみてみよう <a href="https://github.com/tomomano/learn-aws-by-coding/tree/main/handson/mnist/app.py" target="_blank" rel="noreferrer">handson/mnist/app.py</a>)． コードは第一回目とほとんど共通である．変更点のみ解説を行う．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ec2ForDl</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">core</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Stack</span><span style="color:#89DDFF;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">scope</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> core</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">App</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key_name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;font-style:italic;">kwargs</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">super</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">scope</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> name</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">**</span><span style="color:#82AAFF;">kwargs</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        vpc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ec2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Vpc</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Ec2ForDl-Vpc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">max_azs</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">cidr</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">10.10.0.0/23</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">subnet_configuration</span><span style="color:#89DDFF;">=[</span></span>
<span class="line"><span style="color:#82AAFF;">                ec2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SubnetConfiguration</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">                    </span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">public</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">                    </span><span style="color:#A6ACCD;font-style:italic;">subnet_type</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">ec2</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">SubnetType</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">PUBLIC</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">nat_gateways</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        sg </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ec2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SecurityGroup</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Ec2ForDl-Sg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">vpc</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">vpc</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">allow_all_outbound</span><span style="color:#89DDFF;">=True,</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        sg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_ingress_rule</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">peer</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">ec2</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">Peer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">any_ipv4</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">connection</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">ec2</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">Port</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tcp</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">22</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        host </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ec2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Instance</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Ec2ForDl-Instance</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">instance_type</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">ec2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">InstanceType</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">g4dn.xlarge</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">),</span><span style="color:#82AAFF;"> </span><span style="color:#676E95;font-style:italic;">#</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">machine_image</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">ec2</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">MachineImage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">generic_linux</span><span style="color:#89DDFF;">({</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">us-east-1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ami-060f07284bb6f9faf</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ap-northeast-1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ami-09c0c16fc46a29ed9</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#89DDFF;">}),</span><span style="color:#82AAFF;"> </span><span style="color:#676E95;font-style:italic;">#</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">vpc</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">vpc</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">vpc_subnets</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">ec2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SubnetSelection</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">subnet_type</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">ec2</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">SubnetType</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">PUBLIC</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">security_group</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">sg</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">key_name</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">key_name</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">)</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Ec2ForDl</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">core</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Stack</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__init__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">scope</span><span style="color:#ABB2BF;">: core.App, </span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">key_name</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">, **</span><span style="color:#D19A66;font-style:italic;">kwargs</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">super</span><span style="color:#ABB2BF;">().</span><span style="color:#56B6C2;">__init__</span><span style="color:#ABB2BF;">(scope, name, **kwargs)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        vpc </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> ec2.</span><span style="color:#61AFEF;">Vpc</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Ec2ForDl-Vpc&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">max_azs</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">cidr</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;10.10.0.0/23&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">subnet_configuration</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">[</span></span>
<span class="line"><span style="color:#ABB2BF;">                ec2.</span><span style="color:#61AFEF;">SubnetConfiguration</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;public&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#E06C75;font-style:italic;">subnet_type</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">ec2.SubnetType.</span><span style="color:#D19A66;">PUBLIC</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                )</span></span>
<span class="line"><span style="color:#ABB2BF;">            ],</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">nat_gateways</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        sg </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> ec2.</span><span style="color:#61AFEF;">SecurityGroup</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Ec2ForDl-Sg&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">vpc</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">vpc,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">allow_all_outbound</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span>
<span class="line"><span style="color:#ABB2BF;">        sg.</span><span style="color:#61AFEF;">add_ingress_rule</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">peer</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">ec2.Peer.</span><span style="color:#61AFEF;">any_ipv4</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">connection</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">ec2.Port.</span><span style="color:#61AFEF;">tcp</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">22</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        host </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> ec2.</span><span style="color:#61AFEF;">Instance</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Ec2ForDl-Instance&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">instance_type</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">ec2.</span><span style="color:#61AFEF;">InstanceType</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;g4dn.xlarge&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#7F848E;font-style:italic;">#</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">machine_image</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">ec2.MachineImage.</span><span style="color:#61AFEF;">generic_linux</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#98C379;">&quot;us-east-1&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ami-060f07284bb6f9faf&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#98C379;">&quot;ap-northeast-1&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ami-09c0c16fc46a29ed9&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }), </span><span style="color:#7F848E;font-style:italic;">#</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">vpc</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">vpc,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">vpc_subnets</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">ec2.</span><span style="color:#61AFEF;">SubnetSelection</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">subnet_type</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">ec2.SubnetType.</span><span style="color:#D19A66;">PUBLIC</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">security_group</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">sg,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;font-style:italic;">key_name</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">key_name</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><ul><li><p>ここで， <code>g4dn.xlarge</code> インスタンスタイプを選択している (第一回では， CPU のみの <code>t2.micro</code> だった)． <code>g4dn.xlarge</code> のインスタンスタイプは， <a href="#sec_scientific_computing">???</a> ですでに触れた通り， <code>NVIDIA T4</code> と呼ばれる廉価版モデルの GPU を搭載したインスタンスである． CPU は 4 core, メインメモリーは 16GB が割り当てあられている．</p></li><li><p>ここでは，Deep Learning 用の諸々のソフトウェアがプリンストールされた AMI (<a href="https://docs.aws.amazon.com/dlami/latest/devguide/what-is-dlami.html" target="_blank" rel="noreferrer">Deep Learning Amazon Machine Image; DLAMI</a>) を選択している (第一回では，Amazon Linux という AMI を使用していた)． 使用する AMI の ID は リージョンごとに指定する必要があり，ここでは <code>us-east-1</code> と <code>ap-northeast-1</code> でそれぞれ定義している．</p></li></ul><p>DLAMI という新しい概念が出てきたので，説明しよう．</p><p>AMI が <code>us-east-1</code> と <code>ap-northeast-1</code> でしか定義されていないので，提供されているコードはこの二つのリージョンのみでデプロイ可能である． もしほかのリージョンを利用したい場合は， AMI の ID を自身で検索し，コードに書き込む必要がある．</p><h3 id="dlami-deep-learning-amazon-machine-image" tabindex="-1">DLAMI (Deep Learning Amazon Machine Image) <a class="header-anchor" href="#dlami-deep-learning-amazon-machine-image" aria-label="Permalink to &quot;DLAMI (Deep Learning Amazon Machine Image)&quot;">​</a></h3><p><strong>AMI (Amazon Machine Image)</strong> とは，大まかには OS (Operating System) に相当する概念である． 当然のことながら， OS がなければコンピュータはなにもできないので，EC2 インスタンスを起動するときには必ずなにかの OS を&quot;インストール&quot;する必要がある． EC2 が起動したときにロードされる OS に相当するものが， AMI である． AMI には，たとえば <a href="https://ubuntu.com/" target="_blank" rel="noreferrer">Ubuntu</a> などの Linux 系 OS に加えて，Windows Server を選択することもできる． また， EC2 での使用に最適化された <a href="https://aws.amazon.com/amazon-linux-ami/" target="_blank" rel="noreferrer">Amazon Linux</a> という AMI も提供されている．</p><p>しかしながら， AMI を単なる OS と理解するのは過剰な単純化である． AMI には，ベースとなる (空っぽの) OS を選択することもできるが，それに加えて，各種のプログラムがインストール済みの AMI も定義することができる． 必要なプログラムがインストールされている AMI を見つけることができれば，自身でインストールを行ったり環境設定したりする手間が大幅に省ける． 具体例を挙げると，ハンズオン第一回では EC2 インスタンスに Python 3.6 をインストールする例を示したが，そのような操作をインスタンスが起動するたびに行うのは手間である！</p><p>AMI は， AWS 公式のものに加えて，サードパーティから提供されているものもある． また，自分自身の AMI を作って登録することも可能である (<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-instance-store.html" target="_blank" rel="noreferrer">参考</a>)． AMI は EC2 のコンソールから検索することが可能である． あるいは，AWS CLI を使って，次のコマンドでリストを取得することができる (<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html" target="_blank" rel="noreferrer">参考</a>)．</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">aws</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ec2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">describe-images</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--owners</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">amazon</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">aws</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ec2</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">describe-images</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--owners</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">amazon</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ディープラーニングで頻繁に使われるプログラムがあらかじめインストールしてある AMI が， <a href="https://docs.aws.amazon.com/dlami/latest/devguide/what-is-dlami.html" target="_blank" rel="noreferrer">DLAMI (Deep Learning AMI)</a> である． DLAMI には <code>TensorFlow</code>, <code>PyTorch</code> などの人気の高いディープラーニングのフレームワーク・ライブラリがすでにインストールされているため， EC2 インスタンスを起動してすぐさまディープラーニングの計算を実行できる．</p><p>本ハンズオンでは， Amazon Linux 2 をベースにした DLAMI を使用する (AMI ID = ami-09c0c16fc46a29ed9．この AMI は ap-northeast-1 でしか使用できない点に注意)． AWS CLI を使って，この AMI の詳細情報を取得してみよう．</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">aws</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ec2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">describe-images</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--owners</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">amazon</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--image-ids</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ami-09c0c16fc46a29ed9</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--region</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ap-northeast-1</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">aws</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ec2</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">describe-images</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--owners</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">amazon</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--image-ids</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;ami-09c0c16fc46a29ed9&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--region</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ap-northeast-1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+a+`" alt="AMI ID = ami-09c0c16fc46a29ed9 の詳細情報"></p><p><a href="#handson_02_ami-info">figure_title</a> のような出力が得られるはずである．得られた出力から，この DLAMI には PyTorch のバージョン 1.4.0 と 1.5.0 がインストールされていることがわかる． この DLAMI を使って，早速ディープラーニングの計算を実行してみよう．</p><p>DLAMI には具体的には何がインストールされているのだろうか？ 興味のある読者のために，簡単な解説をしよう (参考: <a href="https://docs.aws.amazon.com/dlami/latest/devguide/what-is-dlami.html" target="_blank" rel="noreferrer">公式ドキュメンテーション &quot;What Is the AWS Deep Learning AMI?&quot;</a>)．</p><p>最も low-level なレイヤーとしては， GPU ドライバー がインストールされている． GPU ドライバーなしには OS は GPU とコマンドのやり取りをすることができない． 次のレイヤーが <a href="https://developer.nvidia.com/about-cuda" target="_blank" rel="noreferrer">CUDA</a> と <a href="https://developer.nvidia.com/cudnn" target="_blank" rel="noreferrer">cuDNN</a> である． CUDA は， NVIDIA 社が開発した， GPU 上で汎用コンピューティングを行うための言語であり， C++ 言語を拡張したシンタックスを備える． cuDNN は CUDA で書かれたディープラーニングのライブラリであり，n 次元の畳み込みなどの演算が実装されている． ここまでが， &quot;Base&quot; とよばれるタイプの DLAMI の中身である．</p><p>これに加えて， &quot;Conda&quot; とよばれるタイプには， &quot;Base&quot; のプログラム基盤の上に， <code>TensorFlow</code> や <code>PyTorch</code> などのライブラリがインストールされている． さらに， <a href="https://docs.conda.io/projects/conda/en/latest/index.html" target="_blank" rel="noreferrer">Anaconda</a> による仮想環境を使うことによって， <code>TensorFlow</code> の環境・ <code>PyTorch</code> の環境・ <code>MxNet</code> の環境など，フレームワークを簡単に切り替えることができる (これについては，後のハンズオンで触れる)． また， Jupyter Notebook もインストール済みである．</p><h2 id="スタックのデプロイ" tabindex="-1">スタックのデプロイ <a class="header-anchor" href="#スタックのデプロイ" aria-label="Permalink to &quot;スタックのデプロイ&quot;">​</a></h2><p>スタックの中身が理解できたところで，早速スタックをデプロイしてみよう．</p><p>デプロイの手順は，ハンズオン 1 とほとんど共通である． ここでは，コマンドのみ列挙する (<code>#</code> で始まる行はコメントである)． それぞれのコマンドの意味を忘れてしまった場合は，ハンズオン 1 に戻って復習していただきたい． シークレットキーの設定も忘れずに (<a href="#aws_cli_install">???</a>)．</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#676E95;font-style:italic;"># プロジェクトのディレクトリに移動</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">handson/mnist</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># venv を作成し，依存ライブラリのインストールを行う</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">python3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">venv</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.env</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">source</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.env/bin/activate</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pip</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-r</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># SSH鍵を生成</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">KEY_NAME=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">HirakeGoma</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">aws</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ec2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create-key-pair</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--key-name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">KEY_NAME</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--query</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">KeyMaterial</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--output</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">text</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">KEY_NAME</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">.pem</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mv</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">HirakeGoma.pem</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">~/.ssh/</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">chmod</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">400</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">~/.ssh/HirakeGoma.pem</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># デプロイを実行</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cdk</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">deploy</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">key_name=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">HirakeGoma</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># プロジェクトのディレクトリに移動</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">cd</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">handson/mnist</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># venv を作成し，依存ライブラリのインストールを行う</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">python3</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-m</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">venv</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">.env</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">source</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">.env/bin/activate</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">pip</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-r</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># SSH鍵を生成</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">KEY_NAME=&quot;HirakeGoma&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">aws</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ec2</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">create-key-pair</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--key-name</span><span style="color:#ABB2BF;"> \${</span><span style="color:#E06C75;">KEY_NAME</span><span style="color:#ABB2BF;">} </span><span style="color:#D19A66;">--query</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;KeyMaterial&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--output</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">text</span><span style="color:#ABB2BF;"> &gt; \${</span><span style="color:#E06C75;">KEY_NAME</span><span style="color:#ABB2BF;">}</span><span style="color:#98C379;">.pem</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">mv</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">HirakeGoma.pem</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">~/.ssh/</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">chmod</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">400</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">~/.ssh/HirakeGoma.pem</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># デプロイを実行</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">cdk</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">deploy</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-c</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">key_name=&quot;HirakeGoma&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>ハンズオン 1 で作成した SSH 鍵の削除を行わなかった場合は， SSH 鍵を改めて作成する必要はない． 逆に言うと，同じ名前の SSH がすでに存在する場合は，鍵生成のコマンドはエラーを出力する．</p><p>デプロイのコマンドが無事に実行されれば， <a href="#handson_02_cdk_output">figure_title</a> のような出力が得られるはずである．AWS により割り振られた IP アドレス (<code>InstancePublicIp</code> に続く文字列) をメモしておこう．</p><p><img src="`+n+'" alt="CDKデプロイ実行後の出力"></p><h2 id="ログイン" tabindex="-1">ログイン <a class="header-anchor" href="#ログイン" aria-label="Permalink to &quot;ログイン&quot;">​</a></h2><p>早速，デプロイしたインスタンスに SSH でログインしてみよう． ここでは，この後で使う Jupyter Notebook に接続するため，<strong>ポートフォワーディング (port forwarding)</strong> のオプション (<code>-L</code>) をつけてログインする．</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ssh</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">~/.ssh/HirakeGoma.pem</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-L</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">localhost:8931:localhost:8888</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ec2-user@</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">IP</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">addres</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ssh</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-i</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">~/.ssh/HirakeGoma.pem</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-L</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">localhost:8931:localhost:8888</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ec2-user@</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#98C379;">IP</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">addres</span><span style="color:#ABB2BF;">s&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ポートフォワーディングとは，クライアントマシンの特定のアドレスへの接続を， SSH の暗号化された通信を介して，リモートマシンの特定のアドレスへ転送する，という意味である． このコマンドの <code>-L localhost:8931:localhost:8888</code> は，自分のローカルマシンの <code>localhost:8931</code> へのアクセスを，リモートサーバーの <code>localhost:8888</code> のアドレスに転送せよ，という意味である (<code>:</code> につづく数字は TCP/IP ポートの番号を意味している)． リモートサーバーのポート 8888 には，後述する Jupyter Notebook が起動している． したがって，ローカルマシンの <code>localhost:8931</code> にアクセスすることで，リモートサーバーの Jupyter Notebook にアクセスすることができるのである (<a href="#fig:ssh_port_forwarding">figure_title</a>)． このような SSH による接続方式を<strong>トンネル接続</strong>とよぶ．</p><p><img src="'+l+'" alt="SSH のポートフォワーディングによる Jupyter Notebook へのアクセス"></p><p>ポートフォワーディングのオプションで，ポートの番号 (<code>:8931</code>, <code>:8888</code> など) には 1 から 65535 までの任意の整数を指定できる． しかし，たとえば ポート 22 (SSH) やポート 80 (HTTP) など，いくつかすでに使われているポート番号もあることに注意する． また， Jupyter Notebook はデフォルトではポート 8888 番を使用する． したがって，リモート側のポート番号は，8888 を使うのがよい．</p><p>SSH ログインコマンドの <code>&lt;IP address&gt;</code> 部分は自身のインスタンスの IP アドレスを代入することを忘れずに．</p><p><strong>本書の提供している Docker を使ってデプロイを実行した人へ</strong></p><p>SSH によるログインは， <strong>Docker の外</strong> (すなわちクライアントマシン本体) から行わなければならない． なぜなら，Jupyter を開くウェブブラウザは Docker の外にあるからである．</p><p>その際，秘密鍵を Docker の外にもってこなければならない． 手っ取り早い方法は， <code>cat ~/.ssh/HirakeGoma</code> と打って，出力結果をコピーしてホストマシンのファイルに書き込む方法である． あるいは <code>-v</code> オプションをつけて，ファイルシステムをマウントしてもよい (詳しくは <a href="https://docs.docker.com/storage/volumes/" target="_blank" rel="noreferrer">Docker 公式ドキュメンテーション &quot;Use volumes&quot;</a> を参照)．</p><p>SSH によるログインができたら，早速， GPU の状態を確認してみよう． 次のコマンドを実行する．</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nvidia-smi</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">nvidia-smi</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><a href="#handson_02_nvidia-smi">figure_title</a> のような出力が得られるはずである． 出力を見ると， Tesla T4 型の GPU が 1 台搭載されていることが確認できる． その他，GPU Driver や CUDA のバージョン， GPU の負荷・メモリー使用率などの情報を確認することができる．</p><p><img src="'+p+'" alt="nvidia-smi の出力"></p><h2 id="jupyter-notebook-の起動" tabindex="-1">Jupyter Notebook の起動 <a class="header-anchor" href="#jupyter-notebook-の起動" aria-label="Permalink to &quot;Jupyter Notebook の起動&quot;">​</a></h2><p><a href="https://jupyter.org/" target="_blank" rel="noreferrer">Jupyter Notebook</a> とは，インタラクティブに Python のプログラムを書いたり実行したりするためのツールである． Jupyter は GUI としてウェブブラウザを介してアクセスする形式をとっており，まるでノートを書くように，プロットやテーブルのデータも美しく表示することができる (<a href="#handson_02_welcome_jupyter">figure_title</a>)． Python に慣れている読者は，きっと一度は使ったことがあるだろう．</p><p><img src="'+o+`" alt="Jupyter Notebook の画面"></p><p>このハンズオンでは， Jupyter Notebook を使ってディープラーニングのプログラムをインタラクティブに実行していく． DLAMI には既に Jupyter がインストールされているので，特段の設定なしに使い始めることができる．</p><p>早速， Jupyter を起動しよう． SSH でログインした先の EC2 インスタンスで，次のコマンドを実行すればよい．</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">~</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># go to home directory</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">jupyter</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">notebook</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">cd</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">~</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;"># go to home directory</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">jupyter</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">notebook</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>このコマンドを実行すると， <a href="#handson_02_jupyter_launch">figure_title</a> のような出力が確認できるだろう． この出力から，Jupyter のサーバーが EC2 インスタンスの <code>localhost:8888</code> というアドレスに起動していることがわかる． また， <code>localhost:8888</code> に続く <code>?token=XXXX</code> は，アクセスに使うための一時的なトークンである．</p><p><img src="`+e+'" alt="Jupyter Notebook サーバーを起動"></p><p>Jupyter Notebook を初回に起動するときは，起動に数分程度の時間がかかることがある． ほかの動作も起動直後は遅く，いくつかプログラムを走らせていくうちに俊敏に反応するようになってくる． これは， AWS の GPU 搭載型仮想マシンの運用方法に起因する現象だと考えられる．</p><p>先ほど，ポートフォワーディングのオプションをつけて SSH 接続をしているので， Jupyter の起動している <code>localhost:8888</code> には，ローカルマシンの <code>localhost:8931</code> からアクセスすることができる． したがって，ローカルマシンから Jupyter にアクセスするには，ウェブブラウザ (Chrome, FireFox など)から次のアドレスにアクセスすれば良い．</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">http://localhost:8931/?token=XXXX&amp;lt;/programlisting&amp;gt;</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#abb2bf;">http://localhost:8931/?token=XXXX&amp;lt;/programlisting&amp;gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>?token=XXXX</code> の部分は，上で Jupyter を起動したときに発行されたトークンの値に置き換える．</p><p>上のアドレスにアクセスすると， Jupyter のホーム画面が起動するはずである (<a href="#handson_02_jupyter_home">figure_title</a>)． これで， Jupyter の準備が整った！</p><p><img src="'+t+'" alt="Jupyter ホーム画面"></p><p>Jupyter Notebook の使い方 (超簡易版)</p><ul><li><p><code>Shift</code> + <code>Enter</code>: セルを実行</p></li><li><p><code>Esc</code>: <strong>Command mode</strong> に遷移</p></li><li><p>メニューバーの &quot;+&quot; ボタン または Command mode で <code>A</code> ⇒ セルを追加</p></li><li><p>メニューバーの &quot;ハサミ&quot; ボタン または Command mode で <code>X</code> ⇒ セルを削除</p></li></ul><p>ショートカットの一覧などは <a href="https://towardsdatascience.com/jypyter-notebook-shortcuts-bf0101a98330" target="_blank" rel="noreferrer">Ventsislav Yordanov 氏によるブログ</a> が参考になる．</p><h2 id="pytorch-はじめの一歩" tabindex="-1">PyTorch はじめの一歩 <a class="header-anchor" href="#pytorch-はじめの一歩" aria-label="Permalink to &quot;PyTorch はじめの一歩&quot;">​</a></h2><p><a href="https://pytorch.org/" target="_blank" rel="noreferrer">PyTorch</a> は Facebook AI Research LAB (FAIR) が中心となって開発を進めている，オープンソースのディープラーニングのライブラリである． PyTorch は 有名な例で言えば Tesla 社の自動運転プロジェクトなどで使用されており，執筆時点において最も人気の高いディープラーニングライブラリの一つである． 本ハンズオンでは， PyTorch を使ってディープラーニングの実践を行う．</p><p>PyTorch の歴史のお話</p><p>Facebook は PyTorch のほかに Caffe2 とよばれるディープラーニングのフレームワークを開発していた (初代 Caffe は UC Berkley の博士課程学生だった Yangqing Jia によって創られた)． Caffe2 は 2018 年に PyTorch プロジェクトに合併された．</p><p>また，2019 年 12 月，日本の Preferred Networks 社が開発していた <a href="https://chainer.org/" target="_blank" rel="noreferrer">Chainer</a> も開発を終了し，PyTorch の開発チームと協業していくことが発表された (詳しくは <a href="https://chainer.org/announcement/2019/12/05/released-v7-ja.html" target="_blank" rel="noreferrer">プレスリリース</a> を参照)． PyTorch には，開発統合前から Chainer からインスパイアされた API がいくつもあり， Chainer の DNA は今も PyTorch に引き継がれているのである…!</p><p>本格的なディープラーニングの計算に移る前に， PyTorch ライブラリを使って， GPU で計算を行うとはどういうものか，その入り口に触れてみよう．</p><p>まずは，新しいノートブックを作成する． Jupyter のホーム画面の右上の &quot;New&quot; を押し，&quot;conda_pytorch_p36&quot; という環境を選択したうえで，新規ノートブックを作成する (<a href="#handson_02_jupyeter_new">figure_title</a>)． &quot;conda_pytorch_p36&quot; の仮想環境には， PyTorch がインストール済みである．</p><p><img src="'+r+'" alt="新規ノートブックの作成． &quot;conda_pytorch_p36&quot; の環境を選択する．"></p><p>ここでは，次のようなプログラムを書いて，実行していく． (<a href="#handson_02_jupyeter_pytorch">figure_title</a>)．</p><p><img src="'+c+`" alt="PyTorch始めの一歩"></p><p>まずは， PyTorch をインポートする．さらに， GPU が使える環境にあるか，確認する．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> torch</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Is CUDA ready?</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">cuda</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">is_available</span><span style="color:#89DDFF;">())</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> torch</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Is CUDA ready?&quot;</span><span style="color:#ABB2BF;">, torch.cuda.</span><span style="color:#61AFEF;">is_available</span><span style="color:#ABB2BF;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>出力:</p><p>Is CUDA ready? True&lt;/programlisting&gt;</p><p>次に，3x3 のランダムな行列を <strong>CPU</strong> 上に作ってみよう．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rand</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">)</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#ABB2BF;">x </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> torch.</span><span style="color:#61AFEF;">rand</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(x)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>出力:</p><p>tensor([[0.6896, 0.2428, 0.3269], [0.0533, 0.3594, 0.9499], [0.9764, 0.5881, 0.0203]])&lt;/programlisting&gt;</p><p>次に，行列を <strong>GPU</strong> 上に作成する．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ones_like</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">device</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cuda</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cuda</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#ABB2BF;">y </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> torch.</span><span style="color:#61AFEF;">ones_like</span><span style="color:#ABB2BF;">(x, </span><span style="color:#E06C75;font-style:italic;">device</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;cuda&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">x </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> x.</span><span style="color:#61AFEF;">to</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cuda&quot;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>そして，行列 <code>x</code> と <code>y</code> の加算を，<strong>GPU 上で実行する</strong>．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">z </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> y</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">z</span><span style="color:#89DDFF;">)</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#ABB2BF;">z </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> x </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> y</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(z)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>出力:</p><p>tensor([[1.6896, 1.2428, 1.3269], [1.0533, 1.3594, 1.9499], [1.9764, 1.5881, 1.0203]], device=&#39;cuda:0&#39;)&lt;/programlisting&gt;</p><p>最後に， GPU 上にある行列を， CPU に戻す．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">z </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> z</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cpu</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">z</span><span style="color:#89DDFF;">)</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#ABB2BF;">z </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> z.</span><span style="color:#61AFEF;">to</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cpu&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(z)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>出力:</p><p>tensor([[1.6896, 1.2428, 1.3269], [1.0533, 1.3594, 1.9499], [1.9764, 1.5881, 1.0203]])&lt;/programlisting&gt;</p><p>以上の例は， GPU を使った計算の初歩の初歩であるが，雰囲気はつかめただろうか？ CPU と GPU で明示的にデータを交換するのが肝である． この例はたった 3x3 の行列の足し算なので， GPU を使う意味はまったくないが，これが数千，数万のサイズの行列になったとき， GPU は格段の威力を発揮する．</p><p>完成した Jupyter Notebook は <a href="https://github.com/tomomano/learn-aws-by-coding/blob/main/handson/mnist/pytorch/pytorch_get_started.ipynb" target="_blank" rel="noreferrer">/handson/mnist/pytorch/pytorch_get_started.ipynb</a> にある． Jupyter の画面右上の &quot;Upload&quot; からこのファイルをアップロードして，コードを走らせることが可能である．</p><p>しなしながら，勉強のときにはコードはすべて自分の手で打つことが，記憶に残りやすくより効果的である，というのが筆者の意見である．</p><p>実際にベンチマークを取ることで GPU と CPU の速度を比較をしてみよう． 実行時間を計測するツールとして， Jupyter の提供する <a href="https://ipython.readthedocs.io/en/stable/interactive/magics.html" target="_blank" rel="noreferrer">%time</a> マジックコマンドを利用する．</p><p>まずは CPU を使用して，10000x10000 の行列の行列積を計算した場合の速度を測ってみよう． 先ほどのノートブックの続きに，次のコードを実行する．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10000</span></span>
<span class="line"><span style="color:#A6ACCD;">device </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cpu</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rand</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">s</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> s</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">device</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">device</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">dtype</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">torch</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">float32</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rand</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">s</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> s</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">device</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">device</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">dtype</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">torch</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">float32</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">time z </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">matmul</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">y</span><span style="color:#89DDFF;">)</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#ABB2BF;">s </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10000</span></span>
<span class="line"><span style="color:#ABB2BF;">device </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;cpu&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">x </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> torch.</span><span style="color:#61AFEF;">rand</span><span style="color:#ABB2BF;">(s, s, </span><span style="color:#E06C75;font-style:italic;">device</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">device, </span><span style="color:#E06C75;font-style:italic;">dtype</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">torch.float32)</span></span>
<span class="line"><span style="color:#ABB2BF;">y </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> torch.</span><span style="color:#61AFEF;">rand</span><span style="color:#ABB2BF;">(s, s, </span><span style="color:#E06C75;font-style:italic;">device</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">device, </span><span style="color:#E06C75;font-style:italic;">dtype</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">torch.float32)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">%</span><span style="color:#ABB2BF;">time z </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> torch.</span><span style="color:#61AFEF;">matmul</span><span style="color:#ABB2BF;">(x,y)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>出力は以下のようなものが得られるだろう． これは，行列積の計算に実時間で 5.8 秒かかったことを意味する (実行のたびに計測される時間はばらつくことに留意)．</p><p>CPU times: user 11.5 s, sys: 140 ms, total: 11.6 s Wall time: 5.8 s&lt;/programlisting&gt;</p><p>次に， GPU を使用して，同じ演算を行った場合の速度を計測しよう．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10000</span></span>
<span class="line"><span style="color:#A6ACCD;">device </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cuda</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rand</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">s</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> s</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">device</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">device</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">dtype</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">torch</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">float32</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rand</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">s</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> s</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">device</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">device</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">dtype</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">torch</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">float32</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">torch</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">cuda</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">synchronize</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">time z </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">matmul</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">; torch</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">cuda</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">synchronize</span><span style="color:#89DDFF;">()</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#ABB2BF;">s </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10000</span></span>
<span class="line"><span style="color:#ABB2BF;">device </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;cuda&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">x </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> torch.</span><span style="color:#61AFEF;">rand</span><span style="color:#ABB2BF;">(s, s, </span><span style="color:#E06C75;font-style:italic;">device</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">device, </span><span style="color:#E06C75;font-style:italic;">dtype</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">torch.float32)</span></span>
<span class="line"><span style="color:#ABB2BF;">y </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> torch.</span><span style="color:#61AFEF;">rand</span><span style="color:#ABB2BF;">(s, s, </span><span style="color:#E06C75;font-style:italic;">device</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">device, </span><span style="color:#E06C75;font-style:italic;">dtype</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">torch.float32)</span></span>
<span class="line"><span style="color:#ABB2BF;">torch.cuda.</span><span style="color:#61AFEF;">synchronize</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">%</span><span style="color:#ABB2BF;">time z </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> torch.</span><span style="color:#61AFEF;">matmul</span><span style="color:#ABB2BF;">(x,y); torch.cuda.</span><span style="color:#61AFEF;">synchronize</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>出力は以下のようなものになるだろう． GPU では 553 ミリ秒 で計算を終えることができた！</p><p>CPU times: user 334 ms, sys: 220 ms, total: 554 ms Wall time: 553 ms&lt;/programlisting&gt;</p><p>PyTorch において， GPU での演算は asynchronous (非同期) で実行される． その理由で，上のベンチマークコードでは， <code>torch.cuda.synchronize()</code> というステートメントを埋め込んである．</p><p>このベンチマークでは， <code>dtype=torch.float32</code> と指定することで，32bit の浮動小数点型を用いている． ディープラーニングの学習および推論の計算には，32bit 型，場合によっては 16bit 型が使われるのが一般的である． これの主な理由として，教師データやミニバッチに起因するノイズが，浮動小数点の精度よりも大きいことがあげられる． 32bit/16bit を採用することで，メモリー消費を抑えたり，計算速度の向上が達成できる．</p><p>上記のベンチマークから，GPU を用いることで，<strong>約 10 倍のスピードアップ</strong>を実現することができた． スピードアップの性能は，演算の種類や行列のサイズに依存する． 行列積は，そのなかでも最も速度向上が見込まれる演算の一つである．</p><h2 id="実践ディープラーニング-mnist-手書き数字認識タスク" tabindex="-1">実践ディープラーニング! MNIST 手書き数字認識タスク <a class="header-anchor" href="#実践ディープラーニング-mnist-手書き数字認識タスク" aria-label="Permalink to &quot;実践ディープラーニング! MNIST 手書き数字認識タスク&quot;">​</a></h2><p>ここまで，AWS 上でディープラーニングの計算をするための概念や前提知識をながながと説明してきたが，ついにここからディープラーニングの計算を実際に走らせてみる．</p><p>ここでは，機械学習のタスクで最も初歩的かつ有名な <strong>MNIST データセットを使った数字認識</strong>を扱う (<a href="#handson_02_mnist_examples">figure_title</a>)． これは，0 から 9 までの手書きの数字の画像が与えられ，その数字が何の数字なのかを当てる，というシンプルなタスクである．</p><p><img src="`+y+'" alt="MNIST 手書き数字データセット"></p><p>今回は， MNIST 文字認識タスクを，<strong>畳み込みニューラルネットワーク (Convolutional Neural Network; CNN)</strong> を使って解く． ソースコードは <a href="https://github.com/tomomano/learn-aws-by-coding-source-code/tree/main/handson/mnist/pytorch" target="_blank" rel="noreferrer">/handson/minist/pytorch/</a> にある <code>mnist.ipynb</code> と <code>simple_mnist.py</code> である． なお，このプログラムは， <a href="https://github.com/pytorch/examples/tree/master/mnist" target="_blank" rel="noreferrer">PyTorch の公式 Example Project 集</a> を参考に，多少の改変を行ったものである．</p><p>まずは，カスタムのクラスや関数が定義された <code>simple_mnist.py</code> をアップロードしよう (<a href="#handson_02_jupyter_upload">figure_title</a>)． 画面右上の &quot;Upload&quot; ボタンをクリックし，ファイルを選択することでアップロードができる． この Python プログラムの中に，CNN のモデルや，学習の各イテレーションにおけるパラメータの更新などが記述されている． 今回はこの中身を説明することはしないが，興味のある読者は自身でソースコードを読んでみるとよい．</p><p><img src="'+F+`" alt=" をアップロード"></p><p><code>simple_mnist.py</code> をアップロードできたら，次に新しい notebook を作成しよう． &quot;conda_pytorch_p36&quot; の環境を選択することを忘れずに．</p><p>新しいノートブックが起動したら，まずは必要なライブラリをインポートしよう．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> torch</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">optim</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> optim</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> torchvision</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> torchvision </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> datasets</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> transforms</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> matplotlib </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pyplot </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> plt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># custom functions and classes</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> simple_mnist </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Model</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> train</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> evaluate</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> torch</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> torch.optim </span><span style="color:#C678DD;font-style:italic;">as</span><span style="color:#ABB2BF;"> optim</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> torchvision</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> torchvision </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> datasets, transforms</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> matplotlib </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> pyplot </span><span style="color:#C678DD;font-style:italic;">as</span><span style="color:#ABB2BF;"> plt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># custom functions and classes</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">from</span><span style="color:#ABB2BF;"> simple_mnist </span><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> Model, train, evaluate</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><a href="https://pytorch.org/docs/stable/torchvision/index.html" target="_blank" rel="noreferrer">torchvision</a> パッケージには，MNIST データセットをロードするなどの便利な関数が含まれている． また，今回のハンズオンで使うカスタムのクラス・関数 (<code>Model</code>, <code>train</code>, <code>evaluate</code>) のインポートを行っている．</p><p>次に，MNIST テストデータをダウンロードしよう． 同時に，画像データの輝度の正規化も行っている．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">transf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> transforms</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Compose</span><span style="color:#89DDFF;">([</span><span style="color:#82AAFF;">transforms</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ToTensor</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#82AAFF;">                             transforms</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Normalize</span><span style="color:#89DDFF;">((</span><span style="color:#F78C6C;">0.1307</span><span style="color:#89DDFF;">,),</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0.3081</span><span style="color:#89DDFF;">,))])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">trainset </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> datasets</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">MNIST</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">train</span><span style="color:#89DDFF;">=True,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">download</span><span style="color:#89DDFF;">=True,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">transform</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">transf</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">trainloader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">utils</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">DataLoader</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">trainset</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">batch_size</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">64</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">shuffle</span><span style="color:#89DDFF;">=True)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">testset </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> datasets</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">MNIST</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">train</span><span style="color:#89DDFF;">=False,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">download</span><span style="color:#89DDFF;">=True,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">transform</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">transf</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">testloader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">utils</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">DataLoader</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">testset</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">batch_size</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">shuffle</span><span style="color:#89DDFF;">=True)</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#ABB2BF;">transf </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> transforms.</span><span style="color:#61AFEF;">Compose</span><span style="color:#ABB2BF;">([transforms.</span><span style="color:#61AFEF;">ToTensor</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">                             transforms.</span><span style="color:#61AFEF;">Normalize</span><span style="color:#ABB2BF;">((</span><span style="color:#D19A66;">0.1307</span><span style="color:#ABB2BF;">,), (</span><span style="color:#D19A66;">0.3081</span><span style="color:#ABB2BF;">,))])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">trainset </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> datasets.</span><span style="color:#61AFEF;">MNIST</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">root</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;./data&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">train</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">download</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">transform</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">transf)</span></span>
<span class="line"><span style="color:#ABB2BF;">trainloader </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> torch.utils.data.</span><span style="color:#61AFEF;">DataLoader</span><span style="color:#ABB2BF;">(trainset, </span><span style="color:#E06C75;font-style:italic;">batch_size</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">64</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">shuffle</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">testset </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> datasets.</span><span style="color:#61AFEF;">MNIST</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">root</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;./data&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">train</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">False</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">download</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">transform</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">transf)</span></span>
<span class="line"><span style="color:#ABB2BF;">testloader </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> torch.utils.data.</span><span style="color:#61AFEF;">DataLoader</span><span style="color:#ABB2BF;">(testset, </span><span style="color:#E06C75;font-style:italic;">batch_size</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">shuffle</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>今回扱う MNIST データは 28x28 ピクセルの正方形の画像(モノクロ)と，それぞれのラベル(0 - 9 の数字)の組で構成されている． いくつかのデータを抽出して，可視化してみよう． <a href="#handson_02_mnist_ground_truth">figure_title</a> のような出力が得られるはずである．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">examples </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">iter</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">testloader</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">example_data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> example_targets </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> examples</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Example data size:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> example_data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">shape</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">fig </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">figure</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">figsize</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">subplot</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tight_layout</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">imshow</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">example_data</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">][</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">],</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">cmap</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">gray</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">interpolation</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">none</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">title</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Ground Truth: </span><span style="color:#F78C6C;">{}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">format</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">example_targets</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">]))</span></span>
<span class="line"><span style="color:#A6ACCD;">    plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">xticks</span><span style="color:#89DDFF;">([])</span></span>
<span class="line"><span style="color:#A6ACCD;">    plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">yticks</span><span style="color:#89DDFF;">([])</span></span>
<span class="line"><span style="color:#A6ACCD;">plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">show</span><span style="color:#89DDFF;">()</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#ABB2BF;">examples </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">iter</span><span style="color:#ABB2BF;">(testloader)</span></span>
<span class="line"><span style="color:#ABB2BF;">example_data, example_targets </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> examples.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Example data size:&quot;</span><span style="color:#ABB2BF;">, example_data.shape)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">fig </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> plt.</span><span style="color:#61AFEF;">figure</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">figsize</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    plt.</span><span style="color:#61AFEF;">subplot</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,i</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    plt.</span><span style="color:#61AFEF;">tight_layout</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    plt.</span><span style="color:#61AFEF;">imshow</span><span style="color:#ABB2BF;">(example_data[i][</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;font-style:italic;">cmap</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;gray&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">interpolation</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;none&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    plt.</span><span style="color:#61AFEF;">title</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Ground Truth: </span><span style="color:#D19A66;">{}</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">format</span><span style="color:#ABB2BF;">(example_targets[i]))</span></span>
<span class="line"><span style="color:#ABB2BF;">    plt.</span><span style="color:#61AFEF;">xticks</span><span style="color:#ABB2BF;">([])</span></span>
<span class="line"><span style="color:#ABB2BF;">    plt.</span><span style="color:#61AFEF;">yticks</span><span style="color:#ABB2BF;">([])</span></span>
<span class="line"><span style="color:#ABB2BF;">plt.</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><img src="`+i+`" alt="MNIST の手書き数字画像とその教師ラベル"></p><p>次に， CNN のモデルを定義する．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">model </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Model</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">model</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cuda</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># load to GPU</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#ABB2BF;">model </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Model</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">model.</span><span style="color:#61AFEF;">to</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cuda&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;"># load to GPU</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>今回使う <code>Model</code> は <code>simple_mnist.py</code> の中で定義されている． このモデルは，<a href="#handson_02_cnn_architecture">figure_title</a> に示したような，２層の畳み込み層と 2 層の全結合層からなるネットワークである． 出力層 (output layer) には Softmax 関数を使用し，損失関数 (Loss function) には 負の対数尤度関数 (Negative log likelyhood; NLL) を使用している．</p><p><img src="`+A+`" alt="本ハンズオンで使用するニューラルネットの構造．"></p><p>続いて， CNN のパラメータを更新する最適化アルゴリズムを定義する． ここでは， <strong>確率的勾配降下法 (Stochastic Gradient Descent; SGD)</strong> を使用している．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">optimizer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> optim</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SGD</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">model</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parameters</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">lr</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0.01</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">momentum</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">)</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#ABB2BF;">optimizer </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> optim.</span><span style="color:#61AFEF;">SGD</span><span style="color:#ABB2BF;">(model.</span><span style="color:#61AFEF;">parameters</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;font-style:italic;">lr</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0.01</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">momentum</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0.5</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>これで，準備が整った． CNN の学習ループを開始しよう!</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">train_losses </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> epoch </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    losses </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">train</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">model</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> trainloader</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> optimizer</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> epoch</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    train_losses </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> train_losses </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> losses</span></span>
<span class="line"><span style="color:#A6ACCD;">    test_loss</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> test_accuracy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">evaluate</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">model</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> testloader</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#C3E88D;">Test set: Average loss: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">test_loss</span><span style="color:#C792EA;">:.4f</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">, Accuracy: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">test_accuracy</span><span style="color:#C792EA;">:.1f</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">%</span><span style="color:#A6ACCD;">\\n</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">figure</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">figsize</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plot</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">train_losses</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">xlabel</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Iterations</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ylabel</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Train loss</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">show</span><span style="color:#89DDFF;">()</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#ABB2BF;">train_losses </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> epoch </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    losses </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">train</span><span style="color:#ABB2BF;">(model, trainloader, optimizer, epoch)</span></span>
<span class="line"><span style="color:#ABB2BF;">    train_losses </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> train_losses </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> losses</span></span>
<span class="line"><span style="color:#ABB2BF;">    test_loss, test_accuracy </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">evaluate</span><span style="color:#ABB2BF;">(model, testloader)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">Test set: Average loss: </span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">test_loss</span><span style="color:#C678DD;">:.4f</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">, Accuracy: </span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">test_accuracy</span><span style="color:#C678DD;">:.1f</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">%</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">plt.</span><span style="color:#61AFEF;">figure</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">figsize</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">plt.</span><span style="color:#61AFEF;">plot</span><span style="color:#ABB2BF;">(train_losses)</span></span>
<span class="line"><span style="color:#ABB2BF;">plt.</span><span style="color:#61AFEF;">xlabel</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Iterations&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">plt.</span><span style="color:#61AFEF;">ylabel</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Train loss&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">plt.</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>ここでは 5 エポック分の学習を行っている． GPU を使えば，これくらいの計算であれば 1 分程度で完了するだろう．</p><p>出力として， <a href="#handson_02_train_loss">figure_title</a> のようなプロットが得られるはずである． イテレーションを重ねるにつれて，損失関数 (Loss function) の値が減少している (=精度が向上している) ことがわかる．</p><p><img src="`+D+'" alt="学習の進行に対する Train loss の変化"></p><p>出力にはテキスト形式で各エポック終了後のテストデータに対する精度も表示されている． 最終的には 98% 以上の極めて高い精度を実現できていることが確認できるだろう (<a href="#handson_02_mnist_final_score">figure_title</a>)．</p><p><img src="'+B+`" alt="学習したCNNのテストデータに対するスコア (5エポック後)"></p><p>学習した CNN の推論結果を可視化してみよう． 次のコードを実行することで， <a href="#handson_02_mnist_mnist_prediction">figure_title</a> のような出力が得られるだろう． この図で，下段右から二番目は，&quot;1&quot;に近い見た目をしているが，きちんと&quot;9&quot;と推論できている． なかなか賢い CNN を作り出すことができたようだ！</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">model</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">eval</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">no_grad</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    output </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">model</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">example_data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cuda</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">fig </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">figure</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">figsize</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">subplot</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tight_layout</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">imshow</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">example_data</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">][</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">],</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">cmap</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">gray</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">interpolation</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">none</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">title</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Prediction: </span><span style="color:#F78C6C;">{}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">format</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">output</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">max</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">keepdim</span><span style="color:#89DDFF;">=True)[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">][</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">].</span><span style="color:#82AAFF;">item</span><span style="color:#89DDFF;">()))</span></span>
<span class="line"><span style="color:#A6ACCD;">    plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">xticks</span><span style="color:#89DDFF;">([])</span></span>
<span class="line"><span style="color:#A6ACCD;">    plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">yticks</span><span style="color:#89DDFF;">([])</span></span>
<span class="line"><span style="color:#A6ACCD;">plt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">show</span><span style="color:#89DDFF;">()</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#ABB2BF;">model.</span><span style="color:#61AFEF;">eval</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">with</span><span style="color:#ABB2BF;"> torch.</span><span style="color:#61AFEF;">no_grad</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">    output </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">model</span><span style="color:#ABB2BF;">(example_data.</span><span style="color:#61AFEF;">to</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cuda&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">fig </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> plt.</span><span style="color:#61AFEF;">figure</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">figsize</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    plt.</span><span style="color:#61AFEF;">subplot</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,i</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    plt.</span><span style="color:#61AFEF;">tight_layout</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    plt.</span><span style="color:#61AFEF;">imshow</span><span style="color:#ABB2BF;">(example_data[i][</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;font-style:italic;">cmap</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;gray&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">interpolation</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;none&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    plt.</span><span style="color:#61AFEF;">title</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Prediction: </span><span style="color:#D19A66;">{}</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">format</span><span style="color:#ABB2BF;">(output.data.</span><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">keepdim</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">][i].</span><span style="color:#61AFEF;">item</span><span style="color:#ABB2BF;">()))</span></span>
<span class="line"><span style="color:#ABB2BF;">    plt.</span><span style="color:#61AFEF;">xticks</span><span style="color:#ABB2BF;">([])</span></span>
<span class="line"><span style="color:#ABB2BF;">    plt.</span><span style="color:#61AFEF;">yticks</span><span style="color:#ABB2BF;">([])</span></span>
<span class="line"><span style="color:#ABB2BF;">plt.</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><img src="`+C+'" alt="学習した CNN による，MNIST画像の推論結果"></p><p>最後に，学習したニューラルネットワークのパラメータを <code>mnist_cnn.pt</code> というファイル名で保存しておこう． これで，将来いつでも今回学習したモデルを再現し，別の実験に使用することができる．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#A6ACCD;">torch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">save</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">model</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">state_dict</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mnist_cnn.pt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#ABB2BF;">torch.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(model.</span><span style="color:#61AFEF;">state_dict</span><span style="color:#ABB2BF;">(), </span><span style="color:#98C379;">&quot;mnist_cnn.pt&quot;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>以上が， AWS クラウドの仮想サーバーを立ち上げ，最初のディープラーニングの計算を行う一連の流れである． MNIST 文字認識のタスクを行うニューラルネットを，クラウド上の GPU を使って高速に学習させ，現実的な問題を一つ解くことができたのである． 興味のある読者は，今回のハンズオンを雛形に，自分の所望の計算を走らせてみるとよいだろう．</p><h2 id="スタックの削除" tabindex="-1">スタックの削除 <a class="header-anchor" href="#スタックの削除" aria-label="Permalink to &quot;スタックの削除&quot;">​</a></h2><p>これにて，ハンズオン第二回の内容はすべて説明した． クラウドの利用料金を最小化するため，使い終わった EC2 インスタンスはすぐさま削除しよう．</p><p>ハンズオン第一回と同様に， AWS の CloudFormation コンソールか， AWS CLI により削除を実行する (詳細は <a href="#handson_01_delete_stack">???</a> 参照)．</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cdk</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">destroy</span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">cdk</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">destroy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>スタックの削除は各自で必ず行うこと！</strong> 行わなかった場合，EC2 インスタンスの料金が発生し続けることになる！ <code>g4dn.xlarge</code> は $0.71 / hour の料金設定なので，一日起動しつづけると約$17 の請求が発生することになる！</p><p><strong>AWS のバジェットアラート</strong></p><p>AWS の初心者が (あるいは経験者も) しばしば陥る失敗が，インスタンスの停止忘れなどで無駄なリソースがクラウドで放置されてしまい，巨大な額の請求が届く，というミスだ． 特に，開発を行っている間はこのような事態は起こりうるものだと思って，備えておかなければならない． このような事態を未然に防ぐため， AWS Budgets という機能が無料で提供されている． AWS Budgets を利用することで，月の利用金額がある閾値を超えた場合にユーザーにメールが送信される，などのアラートを設定することができる． 詳細な手順は <a href="https://aws.amazon.com/blogs/aws-cost-management/getting-started-with-aws-budgets/" target="_blank" rel="noreferrer">AWS の公式ブログ &quot;Getting Started with AWS Budgets&quot;</a> を参照のこと． 本書の読者も，ぜひこのタイミングでアラートを設定しておくことを推奨する．</p>',155),g=[f];function E(v,_,k,q,S,P){return m(),u("div",null,g)}const T=d(b,[["render",E]]);export{w as __pageData,T as default};
