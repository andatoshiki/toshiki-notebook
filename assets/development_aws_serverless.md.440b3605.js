import{_ as t}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.250b3e56.js";import{_ as r,a as o,b as s,c as n,d as p}from"./chunks/s3_vs_filesystem.fd65005d.js";import{_ as d,o as l,c as i,H as c,k as e,a as m,Q as h}from"./chunks/framework.b7580407.js";import"./chunks/commonjsHelpers.725317a4.js";const A=JSON.parse('{"title":"Serverless architecture","description":"","frontmatter":{},"headers":[],"relativePath":"development/aws/serverless.md","filePath":"development/aws/serverless.md","lastUpdated":1712870707000}'),g={name:"development/aws/serverless.md"},u=e("h1",{id:"serverless-architecture",tabindex:"-1"},[m("Serverless architecture "),e("a",{class:"header-anchor",href:"#serverless-architecture","aria-label":'Permalink to "Serverless architecture"'},"​")],-1),b=h('<p>サーバーレスアーキテクチャ (Serverless architecture) あるいは サーバーレスコンピューティング (Serverless computing) とは，従来とは全く異なるアプローチに基づくクラウドシステムの設計方法である． 歴史的には， AWS が 2014 年に発表した <a href="https://aws.amazon.com/lambda/" target="_blank" rel="noreferrer">Lamba</a> がサーバーレスアーキテクチャの先駆けとされている． その後， Google や Microsoft などのクラウドプラットフォームも同様の機能の提供を開始している． サーバーレスアーキテクチャの利点は，スケーラブルなクラウドシステムを安価かつ簡易に作成できる点であり，近年いたるところで導入が進んでいる．</p><p>Serverless とは，文字どおりの意味としてはサーバーなしで計算をするということになるが，それは一体どういう意味だろうか？ サーバーレスについて説明するためには，まずは従来的な， &quot;serverful&quot; とよばれるようなシステムについて解説しなければならない．</p><h2 id="serverful-クラウド-従来型" tabindex="-1">Serverful クラウド (従来型) <a class="header-anchor" href="#serverful-クラウド-従来型" aria-label="Permalink to &quot;Serverful クラウド (従来型)&quot;">​</a></h2><p>従来的なクラウドシステムのスケッチを <a href="#serverful">figure_title</a> に示す． クライアントから送信されたリクエストは，最初に API サーバーに送られる． API サーバーでは，リクエストの内容に応じてタスクが実行される． タスクには，API サーバーだけで完結できるものもあるが，多くの場合，データベースの読み書きが必要である． データベースには，データベース専用の独立したサーバーマシンが用いられることが一般的である． また，画像や動画などの容量の大きいデータは，また別のストレージサーバーに保存されることが多い． これらの API サーバー，データベースサーバー，ストレージサーバーはそれぞれ独立したサーバーマシンであり， AWS の言葉では EC2 による仮想インスタンスを想定してもらったらよい．</p><p>多くのウェブサービスでは，多数のクライアントからのリクエストを処理するため，複数のサーバーマシンがクラウド内で起動し，負荷を分散するような設計がなされている． クライアントから来たリクエストを計算容量に余裕のあるサーバーに振り分けるような操作を <strong>Load balancing</strong> とよび，そのような操作を担当するマシンのことを <strong>Load balancer</strong> という．</p><p>計算負荷を分散する目的で多数のインスタンスを起動するのはよいのだが，計算負荷が小さすぎてアイドリング状態にあるようではコストと電力の無駄遣いである． したがって，すべてのサーバーが常に目標とする計算負荷を維持するよう，計算の負荷に応じてクラスター内の仮想サーバーの数を動的に増減させるような仕組みが必要である． そのような仕組みを<strong>クラスターのスケーリング</strong>とよび，負荷の増大に応答して新しい仮想インスタンスをクラスターに追加する操作を <strong>scale-out</strong>，負荷の減少に応答してインスタンスをシャットダウンする操作を <strong>scale-in</strong> とよぶ． クラスターのスケーリングは， API サーバーではもちろんのこと，データベースサーバー・ストレージサーバーでも必要になる． ストレージサーバーでは，例えば頻繁にアクセスされるデータはキャッシュ領域に保存したり，データのコピーを複数作るなどのスケーリングが行われる． データベースサーバーも同様に，頻繁にアクセスされるデータのアクセスがパンクしてしまわないよう，分散的な処理が必要となる． このように，<strong>クラウドシステム内すべての箇所で，負荷が均一になるような調整が必要であり，開発者は多くの時間をそのチューニングに費やさなければならない．</strong> また，サービスの利用者の数などに応じてスケーリングの設定は常に見直される必要があり，継続的な開発が要求される．</p><p>さらに問題を複雑にするのは，API サーバーで処理されるべきタスクが，非一様な点である． 非一様であるとは，たとえばタスク A は 3000 ミリ秒の実行時間と 512MB のメモリーを消費し，別のタスク B は 1000 ミリ秒の実行時間と 128MB のメモリーを消費する，というような状況を指している． 一つのサーバーマシンが計算負荷が異なる複数のタスクを処理する場合，クラスターのスケーリングはより複雑になる． この状況をシンプルにするために，１サーバーで実行するタスクは１種類に限る，という設計も可能であるが，そうするとで生まれる弊害も多い (ほとんど使われないタスクに対してもサーバー一台をまるまる割り当てなければならない = ほとんどアイドリング状態になってしまう，など)．</p><p><img src="'+r+'" alt="Serverful なクラウドシステム"></p><h2 id="serverless-クラウドへ" tabindex="-1">Serverless クラウドへ <a class="header-anchor" href="#serverless-クラウドへ" aria-label="Permalink to &quot;Serverless クラウドへ&quot;">​</a></h2><p><a href="#chap_serverful_cloud">Serverful クラウド (従来型)</a> で議論したように，クラスターのスケーリングはクラウドシステムの経済的効率とシステムの安定性を最大化するために必須の作業である． それを反映して，多くの開発者の時間が投資されてきた．</p><p>クラスターのスケーリングはすべての開発者が何度も繰り返し行ってきた作業であり，いくつかの側面をテンプレート化し，共通化することができたならば開発のコストを大幅に削減できるだろう． それを実現するには，根本的なレベルからクラウドシステムの設計を考え直す必要がある． <strong>スケーリングを前提</strong>として考えることで，もっと<strong>シンプルで見通しがよいクラウドシステムの設計の仕組みはないだろうか</strong>？ そのような動機が，サーバーレスアーキテクチャが誕生する背後にあった．</p><p>従来の serverful なシステムでの最大の問題点は，<strong>サーバーをまるまる占有してしまう</strong>という点にある． すなわち， EC2 インスタンスを起動したとき，そのインスタンスは起動したユーザーだけが使えるものであり，<strong>計算のリソース (CPU や RAM) が独占的に割り当てられた状態</strong>になる． 固定した計算資源の割り当てがされてしまっているので，<strong>インスタンスの計算負荷が 0%であろうが 100%であろうが，均一の使用料金が起動時間に比例</strong>して発生する．</p><p>サーバーレスアーキテクチャは，このような <strong>独占的に割り当てられた計算リソースというものを完全に廃止する</strong>ことを出発点とする． サーバーレスアーキテクチャでは，計算のリソースは，クラウドプロバイダーがすべて管理する． クライアントは，仮想インスタンスを一台まるごと借りるのではなく，計算のタスクの需要が生まれる毎に，<strong>実行したいプログラム・コマンドをクラウドに提出する</strong>． クラウドプロバイダーは，自身のもつ巨大な計算リソースから空きを探し，提出されたプログラムを実行し，実行結果をクライアントに返す． 言い換えると，計算リソースのスケーリングやアロケーションなどはクラウドプロバイダーが一手に引き受け，ユーザーはジョブをサブミットすることに注力する，という枠組みである． これを図示すると， <a href="#serverless">figure_title</a> のようになる．</p><p><img src="'+o+'" alt="従来のクラウドと Serverless クラウドの比較"></p><p>サーバーレスクラウドでは，スケーリングはすべてクラウドプロバイダーが引き受けるので，スケーラビリティーが保証されている． クライアントが同時に大量のタスクを送信した場合でも，クラウドプロバイダー側の独自の仕組みによってすべてのタスクが遅延なく実行される． また，サーバーレスクラウドを利用することで，<strong>クラウドのコストは実際に使用した計算の総量 (稼働時間) で決定される</strong>ことになる． これは，計算の実行総量に関わらずインスタンスの起動時間で料金が決定されていた従来のシステムと比べて大きな違いである．</p><p>サーバーレスクラウドは，従来のクラウドとは根本から異なったアプローチなので，コードの書き方やシステムの設計が大きく異なる． サーバーレスクラウドを開発・運用するには，サーバーレス固有の概念や用語に精通している必要がある． 以降では，実際にクラウドを動かしながら，サーバーレスをより具体的に体験していこう．</p><p>従来型の(仮想インスタンスをたくさん起動するような)クラウドシステムは，<strong>賃貸</strong>と似ているかもしれない． 部屋を借りるというのは，その部屋でどれだけの時間を過ごそうが，月々の家賃は一定である． 同様に，仮想サーバーも，それがどれほどの計算を行っているかに関わらず，一定の料金が時間ごとに発生する．</p><p>一方で，サーバーレスクラウドは，<strong>電気・水道・ガス料金</strong> と似ている． こちらは，実際に使用した量に比例して料金が決定されている． サーバーレスクラウドも，実際に計算を行った総時間で料金が決まる仕組みになっている．</p><h2 id="サーバーレスクラウドを構成するコンポーネント" tabindex="-1">サーバーレスクラウドを構成するコンポーネント <a class="header-anchor" href="#サーバーレスクラウドを構成するコンポーネント" aria-label="Permalink to &quot;サーバーレスクラウドを構成するコンポーネント&quot;">​</a></h2><p>サーバーレスアーキテクチャの概要がわかってきたところで，ここでは AWS においてサーバーレスクラウドを構成する様々なコンポーネントを紹介していこう． 特に， <strong>Lambda</strong>, <strong>S3</strong>, <strong>DynamoDB</strong> を取り上げ，解説する (<a href="#fig:serverless_logos">figure_title</a>)． サーバーレスクラウドは，これらのコンポーネントを統合することで一つのシステムが出来上がる． ここでは， Lambda，S3，DynamoDB を利用する際に押さえておかなければならない知識を一通り説明しきる都合上，具体的なイメージがわきにくいかもしれない． が，続く (#sec_intro_serverless) でそれぞれについてハンズオン形式で演習を行うので，そこでさらに理解を深めれば大丈夫である．</p><p><img src="'+s+'" alt="Lambda, S3, DynamoDB のアイコン"></p><h3 id="lambda" tabindex="-1">Lambda <a class="header-anchor" href="#lambda" aria-label="Permalink to &quot;Lambda&quot;">​</a></h3><p>AWS でサーバーレスコンピューティングの中心を担うのが， <a href="https://aws.amazon.com/lambda/" target="_blank" rel="noreferrer">Lambda</a> である． Lambda の使い方を <a href="#lambda_workflow">figure_title</a> に図示している． Lambda の仕組みはシンプルで，まずユーザーは実行したいプログラムのコードを事前に登録しておく． プログラムは， Python, Node.js, Ruby などの主要な言語がサポートされている． Lambda に登録されたひとつひとつのプログラムを関数 (Function) とよぶ． そして，関数を実行したいときに，invoke コマンドを Lambda に送信する． Lambda では， invoke のリクエストを受け取るとただちに (数ミリセカンドから数百ミリセカンド程度の時間で) プログラムの実行を開始する． そして，実行結果をクライアントやその他の計算機に返す．</p><p><img src="'+n+'" alt="AWS Lambda"></p><p>このように，Lambda では占有された仮想インスタンスは存在せず，実行を待っているプログラムだけがある状態である． invoke のリクエストに応じて，プログラムが AWS の巨大な計算機プールのどこかに配置され，実行される． 同時に複数のリクエストが来た場合でも， AWS はそれらを実行するための計算リソースを割り当て，並列的に処理を行ってくれる． 原理上は，<strong>数千から数万のリクエストが同時に来たとしても， Lambda はそれらを同時に実行することができる</strong>． このような，占有された仮想サーバーの存在なしに，動的に関数を実行するサービスのことを総称して <strong>FaaS (Function as a Service)</strong> とよぶ．</p><p>Lambda ではそれぞれの関数につき， 128MB から 10240MB のメモリーを使用することができる (執筆時点の仕様)． また，実効的な CPU のパワーはメモリーの量に比例する形で割り当てられる． すなわち，タスクに割り当てたメモリーの量が多ければ多いほど，より多くの CPU リソースが割り当てられることになる (しかし， RAM と CPU パワーの具体的な換算表は AWS からは公開されていない)． 実行時間は 100 ミリ秒の単位で記録され，実行時間に比例して料金が決定される． <a href="#lambda_pricing">table_title</a> は Lambda の利用料金表である (執筆時点で <code>ap-north-east1</code> リージョンを選択した場合)．</p><table><caption>Lambda の料金表</caption><colgroup><col style="width:50%;"><col style="width:50%;"></colgroup><thead><tr class="header"><th>Memory (MB)</th><th>Price per 100ms</th></tr></thead><tbody><tr class="odd"><td><p>128</p></td><td><p>$0.0000002083</p></td></tr><tr class="even"><td><p>512</p></td><td><p>$0.0000008333</p></td></tr><tr class="odd"><td><p>1024</p></td><td><p>$0.0000016667</p></td></tr><tr class="even"><td><p>3008</p></td><td><p>$0.0000048958</p></td></tr></tbody></table><p>実行時間に比例する料金に追加して，リクエストを送信するごとに発生する料金が設定されている． これは，百万回のリクエストにつき $0.2 である． たとえば， 128MB のメモリーを使用する関数を，それぞれ 200 ミリ秒，合計で 100 万回実行した場合， 0.0000002083 * 2 * 10^6 + 0.2 = $0.6 の料金となる． ウェブサーバーのデータベースの更新など簡単な計算であれば，200 ミリ秒程度で実行できる関数も多いことから，100 万回データベースの更新を行ったとしても，たった $0.6 しかコストが発生しないことになる． また，コードが実行されず待機状態になっている場合は，発生する料金は 0 である． このように，実際に意味のある処理が行われた時間にのみ，料金が発生する仕組みになっている．</p><p>Lambda は比較的短時間で完了する，反復性の高いタスクの実行に向いている． データベースの読み書きはその典型的な例であるが，そのほかにも，画像のサイズをトリミングしたり，サーバーサイドで定期的に実行されるメンテナンス処理などの利用が考えられる． また，複数の Lambda をリレー式に繋げることも可能で，シンプルな処理を組み合わせることで複雑なロジックを表現することができる．</p><p>上述の Lambda の料金計算は，説明のためコストに寄与する要素をいくつか省いている点は承知いただきたい． 例えば， DynamoDB の読み書きに関する料金や，ネットワークの通信にかかわるコストが考慮されていない．</p><h3 id="サーバーレスストレージ-s3" tabindex="-1">サーバーレスストレージ: S3 <a class="header-anchor" href="#サーバーレスストレージ-s3" aria-label="Permalink to &quot;サーバーレスストレージ: S3&quot;">​</a></h3><p>サーバーレスの概念は，ストレージにも拡張されている．</p><p>従来的なストレージ (ファイルシステム) では，必ずホストとなるマシンと OS が存在しなければならない． したがって，それほどパワーは必要ないまでも，ある程度の CPU リソースを割かなければならない． また，従来的なファイルシステムでは，データ領域のサイズは最初にディスクを初期化するときに決めなければならず，後から容量を増加させることはしばしば困難である (ZFS などのファイルシステムを使えばある程度は自由にファイルシステムのサイズを変更することは可能である)． よって，従来的なクラウドでは，ストレージを借りる際にはあらかじめディスクのサイズを指定せねばならず，ディスクの中身が空であろうと満杯であろうと，同じ利用料金が発生することになる (<a href="#fig:s3_vs_filesystem">figure_title</a>)．</p><p><a href="https://aws.amazon.com/s3/" target="_blank" rel="noreferrer">Simple Storage Service (S3)</a> は，サーバーレスなストレージシステムを提供する (<a href="#fig:s3_vs_filesystem">figure_title</a>)． S3 は従来的なストレージシステムと異なり， OS に&quot;マウントする”という概念はない． 基本的に API を通じてデータの読み書きの操作が行われる． また，データの冗長化や暗号化，バックアップの作成など，通常ならば OS と CPU が介在しなければならない操作も， API を通じて行うことができる． S3 では事前に決められたディスク領域のサイズはなく，データを入れれば入れた分だけ，保存領域は拡大していく (仕様上はペタバイトスケールのデータを保存することが可能である)． ストレージにかかる料金は，保存してあるデータの総容量で決定される．</p><p><img src="'+p+'" alt="S3 と従来的なファイルシステムの比較"></p><p>S3 を利用する際に，料金に関わってくる主要な事項をまとめたのが <a href="#tab:s3_pricing">table_title</a> である (<code>us-east-1</code> リージョンのもの． 説明のため主要な事項のみ取り出している． 詳細は <a href="https://aws.amazon.com/s3/pricing/?nc=sn&amp;loc=4" target="_blank" rel="noreferrer">公式ドキュメンテーション &quot;Amazon S3 pricing&quot;</a> を参照)．</p><table><caption>S3 の利用料金</caption><colgroup><col style="width:50%;"><col style="width:50%;"></colgroup><thead><tr class="header"><th>項目</th><th>料金</th></tr></thead><tbody><tr class="odd"><td><p>Data storage (First 50TB)</p></td><td><p>$0.023 per GB per month</p></td></tr><tr class="even"><td><p>PUT, COPY, POST, LIST requests (per 1,000 requests)</p></td><td><p>$0.005</p></td></tr><tr class="odd"><td><p>GET, SELECT, and all other requests (per 1,000 requests)</p></td><td><p>$0.0004</p></td></tr><tr class="even"><td><p>Data Transfer IN To Amazon S3 From Internet</p></td><td><p>$0</p></td></tr><tr class="odd"><td><p>Data Transfer OUT From Amazon S3 To Internet</p></td><td><p>$0.09 per GB</p></td></tr></tbody></table><p>第一に，データの保存には $0.025 per GB のコストが月ごとに発生する． したがって，1000GB のデータを S3 に一ヵ月保存した場合， $25 の料金が発生することになる． また，<code>PUT</code>, <code>COPY</code>, <code>POST</code> などのリクエスト (=データを書き込む操作) に対しては，データ容量に関係なく，1000 回ごとに $0.005 のコストが発生する． <code>GET</code>, <code>SELECT</code> などのリクエスト (=データを読み込む操作) に対しては，1000 回ごとに $0.0004 のコストが発生する． また， S3 はデータを外に取り出す際の通信にもコストが生じる． 執筆時点では，S3 からインターネットを通じて外部にデータを転送 (data-out) すると $0.09 per GB のコストが発生する． データをインターネットを通じて S3 に入れる (data-in) 通信は無料で行える． また， AWS の 同じ Region 内のサービス (Lambda や EC2 など) にデータを転送するのは無料である． AWS のリージョンをまたいだデータの転送にはコストが発生する． いずれにせよ，サーバーレスの概念に則り，すべての料金が従量課金制で決定される設定になっている．</p><h3 id="サーバーレスデータベース-dynamodb" tabindex="-1">サーバーレスデータベース: DynamoDB <a class="header-anchor" href="#サーバーレスデータベース-dynamodb" aria-label="Permalink to &quot;サーバーレスデータベース: DynamoDB&quot;">​</a></h3><p>サーバーレスの概念は，データベースにも適用することができる．</p><p>ここでいうデータベースとは， Web サービスなどにおけるユーザーや商品の情報を記録しておくための保存領域のことを指している． 従来的に有名なデータベースとしては <a href="https://www.mysql.com/" target="_blank" rel="noreferrer">MySQL</a>, <a href="https://www.postgresql.org/" target="_blank" rel="noreferrer">PostgreSQL</a>, <a href="https://www.mongodb.com/" target="_blank" rel="noreferrer">MongoDB</a> などが挙げられる． データベースと普通のストレージの違いは，データの検索機能にある． 普通のストレージではデータは単純にディスクに書き込まれるだけだが， データベースでは検索がより効率的になるようなデータの配置がされたり， 頻繁にアクセスされるデータはメモリーにキャッシュされるなどの機能が備わっている． これにより，巨大なデータの中から，興味のある要素を高速に取得することができる．</p><p>このような検索機能を実現するには，当然 CPU の存在が必須である． したがって，従来的なデータベースを構築する際は，ストレージ領域に加えて，たくさんの CPU コアを搭載したマシンが用いられることが多い． また，データベースが巨大な場合は複数マシンにまたがった分散型のシステムが設計される． 分散型システムの場合は， <a href="#chap_serverful_cloud">Serverful クラウド (従来型)</a> で議論したようにデータベースへのアクセス負荷に応じて適切なスケーリングがなされる必要がある．</p><p><a href="https://aws.amazon.com/dynamodb/" target="_blank" rel="noreferrer">DynamoDB</a> は， AWS が提供しているサーバーレスな分散型データベースである． サーバーレスであるので，占有されたデータベース用仮想インスタンスは存在せず， API を通じてデータの書き込み・読み出し・検索などの操作を行う． S3 と同様に，データ保存領域の上限は定められておらず，データを入れれば入れた分だけ，保存領域は拡大していく． また，データベースへの負荷が増減したときのスケーリングは， DynamoDB が自動で行うので，ユーザーは心配する必要はない．</p><p>DynamoDB での利用料金の計算はやや複雑なのだが， &quot;On-demand Capacity&quot; というモードで使用した場合の料金に関わってくる主要な事項をまとめたのが <a href="#tab:dynamodb_pricing">table_title</a> である (<code>us-east-1</code> リージョンのもの． 詳細は <a href="https://aws.amazon.com/dynamodb/pricing/on-demand/" target="_blank" rel="noreferrer">公式ドキュメンテーション &quot;Pricing for On-Demand Capacity&quot;</a> を参照)．</p><table><caption>DynamoDB の利用料金</caption><colgroup><col style="width:50%;"><col style="width:50%;"></colgroup><thead><tr class="header"><th>項目</th><th>料金</th></tr></thead><tbody><tr class="odd"><td><p>Write request units</p></td><td><p>$1.25 per million write request units</p></td></tr><tr class="even"><td><p>Read request units</p></td><td><p>$0.25 per million read request units</p></td></tr><tr class="odd"><td><p>Data storage</p></td><td><p>$0.25 per GB-month</p></td></tr></tbody></table><p>DynamoDB ではデータの書き込み操作の単位を write request unit とよび，データの読み込み操作の単位を read request unit とよぶ． 基本的に， 1kB 以下のデータを一度書き込むと 1 write request unit を消費し，4kB 以下のデータを一度読み込むと 1 read request unit を消費する (詳しくは <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html" target="_blank" rel="noreferrer">公式ドキュメンテーション &quot;Read/Write Capacity Mode&quot;</a> を参照のこと)． write request units は 100 万回ごとに $1.25, read request units は 100 万回ごとに $0.25 のコストが設定されている． また，保存されたデータ容量に対して $0.25 per GB のコストが月ごとに発生する． DynamoDB は高速な検索機能などを備えたデータベースであるので， GB あたりのストレージコストは S3 に比べ 10 倍程度高い． DynamoDB のデータの転送に関わるコストは，同じリージョン内ならば data-in，data-out ともに $0 である． リージョンをまたいだ通信には別途コストが発生する．</p><h3 id="その他のサーバーレスクラウドの構成要素" tabindex="-1">その他のサーバーレスクラウドの構成要素 <a class="header-anchor" href="#その他のサーバーレスクラウドの構成要素" aria-label="Permalink to &quot;その他のサーバーレスクラウドの構成要素&quot;">​</a></h3><p>以上で紹介した Lambda, S3, DynamoDB がサーバーレスクラウドの中で最も使用する頻度が高いサービスになる． その他のサーバーレスクラウドの構成要素を以下に列挙する． いくつかについては，今後のハンズオンを行う中で改めて解説を行う．</p><ul><li><p><a href="https://aws.amazon.com/api-gateway/" target="_blank" rel="noreferrer">API Gateway</a>: API を構築する際のルーティングを担う． (#sec_bashoutter) で取り上げる．</p></li><li><p><a href="https://aws.amazon.com/fargate/" target="_blank" rel="noreferrer">Fargate</a>: (#sec_fargate_qabot) で触れた Fargate も，サーバーレスクラウドの要素の一部である． Lambda との違いは，Lambda よりも大容量のメモリーや CPU を要するような計算などを行うことができる点が挙げられる．</p></li><li><p><a href="https://aws.amazon.com/sns/" target="_blank" rel="noreferrer">Simple Notification Service (SNS)</a>: サーバーレスのサービス間でイベントをやり取りするためのサービス．</p></li><li><p><a href="https://aws.amazon.com/step-functions/" target="_blank" rel="noreferrer">Step Functions</a>: サーバーレスのサービス間のオーケストレーションを担う．</p></li></ul><p><strong>サーバーレスアーキテクチャは万能か？</strong></p><p>この問いへの答えは，筆者は NO であると考える．</p><p>ここまで，サーバーレスの利点を強調して説明をしてきたが，まだまだ新しい技術なだけに，欠点，あるいはサーバーフルなシステムに劣る点は数多くある．</p><p>大きな欠点を一つあげるとすれば，サーバーレスのシステムは各クラウドプラットフォームに固有なものなので，特定のプラットフォームでしか運用できないシステムになってしまう点であろう． AWS で作成したサーバーレスのシステムを， Google のクラウドに移植するには，かなり大掛かりなプログラムの書き換えが必要になる． 一方， serverful なシステムであれば，プラットフォーム間のマイグレーションは比較的簡単に行うことができる． クラウドプロバイダーとしては，自社のシステムへの依存度を強めることで，顧客を離さないようにするという狙いがあるのだろう…</p><p>その他，サーバーレスコンピューティングの欠点や今後の課題などは，次の論文で詳しく議論されている． 興味のある読者はぜひ読んでいただきたい．</p><ul><li><a href="https://arxiv.org/abs/1812.03651" target="_blank" rel="noreferrer">Hellerstein et al., &quot;Serverless Computing: One Step Forward, Two Steps Back&quot; arXiv (2018)</a></li></ul>',55);function f(_,S,v,y,q,P){const a=t;return l(),i("div",null,[u,c(a,{readTime:"9",words:"2.4k"}),b])}const L=d(g,[["render",f]]);export{A as __pageData,L as default};
