import{_ as p}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.65c6b98c.js";import{_ as l,a as o,b as e,c as t,d as r,e as c,f as i,g as y,h as u,i as d,j as A}from"./chunks/ask_many_output.0bb19110.js";import{_ as b,o as h,c as C,k as a,a as m,E as D,O as F}from"./chunks/framework.c989bd33.js";import"./chunks/commonjsHelpers.725317a4.js";const G=JSON.parse('{"title":"Hands-on #3: AWS で自動質問回答ボットを走らせる","description":"","frontmatter":{},"headers":[],"relativePath":"development/aws/handson-qabot.md","filePath":"development/aws/handson-qabot.md","lastUpdated":1726418622000}'),E={name:"development/aws/handson-qabot.md"};function B(g,s,q,f,k,v){const n=p;return h(),C("div",null,[s[0]||(s[0]=a("h1",{id:"hands-on-3-aws-で自動質問回答ボットを走らせる",tabindex:"-1"},[m("Hands-on #3: AWS で自動質問回答ボットを走らせる "),a("a",{class:"header-anchor",href:"#hands-on-3-aws-で自動質問回答ボットを走らせる","aria-label":'Permalink to "Hands-on \\#3: AWS で自動質問回答ボットを走らせる"'},"​")],-1)),D(n,{readTime:"11",words:"2.5k"}),s[1]||(s[1]=F('<p>ハンズオン第三回では， Docker と ECS を駆使した機械学習アプリケーションを実装しよう． 具体的には，深層学習による自然言語処理を行うことで，クライアントから与えられた文章題に対して回答を生成する，自動 Question &amp; Answering ボットを作成しよう． ECS を利用することで，ジョブの数によって動的にインスタンスの数を制御し，並列にタスクを実行するようなシステムを構築しよう．</p><p>通常の機械学習のワークフローでは，モデルの訓練 ⇒ 推論 (データへの適用) が基本的な流れである． しかしながら， GPU 搭載型の EC2 クラスターを使ったモデルの訓練はやや難易度が高いため，次章 ( (#sec_aws_batch)) で取り扱う． 本章は，クラウド上でのクラスターの構築・タスクの管理などの概念に慣れるため，よりシンプルな実装で実現できる Fargate クラスターを用いた推論計算の並列化を紹介する．</p><h2 id="fargate" tabindex="-1">Fargate <a class="header-anchor" href="#fargate" aria-label="Permalink to &quot;Fargate&quot;">​</a></h2><p>ハンズオンに入っていく前に， <strong>Fargate</strong> という AWS の機能を知っておく必要がある (<a href="#fig:fargate_logo">figure_title</a>)．</p><p><img src="'+l+`" alt="Fargate のアイコン"></p><p>ECS の概要を示した (#ecs_overview) をもう一度見てみよう． この図で， ECS の管理下にあるクラスターが示されているが，このクラスターの中で計算を行う実体としては二つの選択肢がある． <strong>EC2 あるいは Fargate</strong> のいずれかである． EC2 を用いた場合は，先の章 ( (#sec_first_ec2), (#sec_jupyter_and_deep_learning)) で説明したような流れでインスタンスが起動し，計算が実行される． しかし， EC2 を用いた計算機クラスターの作成・管理は技術的な難易度がやや高いので，次章 ( (#sec_aws_batch)) で説明することにする．</p><p>Fargate とは， <strong>ECS での利用に特化</strong>して設計された，<strong>コンテナを使用した計算タスク</strong>を走らせるための仕組みである． 計算を走らせるという点では EC2 と役割は似ているが， Fargate は EC2 インスタンスのような物理的実体はもたない． 物理的実体をもたないというのは，たとえば SSH でログインすることは基本的に想定されていないし，なにかのソフトウェアをインストールしたりなどの概念も存在しない． Fargate ではすべての計算は Docker コンテナを介して行われる． すなわち， Fargate を利用するには，ユーザーは最初に所望の Docker イメージを指定しておき， Fargate は <code>docker run</code> のコマンドを使用することで計算タスクを実行する． Fargate を用いる利点は， Fargate を ECS のクラスターに指定すると，スケーリングなどの操作が簡単な設定・プログラムで構築できる点である．</p><p>Fargate では， EC2 と同様に CPU とメモリーのサイズを必要な分だけ指定できる． 執筆時点では， CPU は 0.25 - 4 コア， RAM は 0.5 - 30 GB の間で選択することができる (詳しくは <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html" target="_blank" rel="noreferrer">公式ドキュメンテーション &quot;Amazon ECS on AWS Fargate&quot;</a> 参照)． クラスターのスケーリングが容易な分， Fargate では EC2 ほど大きな CPU コア・ RAM 容量を単一インスタンスに付与することができず，また GPU を利用することもできない．</p><p>以上が Fargate の概要であったが，くどくど言葉で説明してもなかなかピンとこないだろう． ここからは実際に手を動かしながら， ECS と Fargate を使った並列タスクの処理の仕方を学んでいこう．</p><p>厳密には， ECS に付与するクラスターには EC2 と Fargate のハイブリッドを使用することも可能である．</p><h2 id="準備" tabindex="-1">準備 <a class="header-anchor" href="#準備" aria-label="Permalink to &quot;準備&quot;">​</a></h2><p>ハンズオンのソースコードは GitHub の <a href="https://github.com/andatoshiki/toshiki-notebooktree/main/handson/qa-bot" target="_blank" rel="noreferrer">handson/qa-bot</a> にある．</p><p>本ハンズオンの実行には，第一回ハンズオンで説明した準備 ( (#handson_01_prep)) が整っていることを前提とする． また， Docker が自身のローカルマシンにインストール済みであることも必要である．</p><p>このハンズオンでは 1CPU/4GB RAM の Fargate インスタンスを使用する． 計算の実行には 0.025 $/hour のコストが発生することに注意．</p><h2 id="transformer-を用いた-question-answering-プログラム" tabindex="-1">Transformer を用いた question-answering プログラム <a class="header-anchor" href="#transformer-を用いた-question-answering-プログラム" aria-label="Permalink to &quot;Transformer を用いた question-answering プログラム&quot;">​</a></h2><p>このハンズオンで開発する，自動質問回答システムをより具体的に定義しよう． 次のような文脈 (context) と質問 (question) が与えられた状況を想定する．</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">context: Albert Einstein (14 March 1879 – 18 April 1955) was a German-born theoretical physicist who developed the theory of relativity, one of the two pillars of modern physics (alongside quantum mechanics). His work is also known for its influence on the philosophy of science. He is best known to the general public for his mass–energy equivalence formula E = mc2, which has been dubbed \\&quot;the world&#39;s most famous equation\\&quot;. He received the 1921 Nobel Prize in Physics \\&quot;for his services to theoretical physics, and especially for his discovery of the law of the photoelectric effect\\&quot;, a pivotal step in the development of quantum theory.</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">question: In what year did Einstein win the Nobel prize?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">context: Albert Einstein (14 March 1879 – 18 April 1955) was a German-born theoretical physicist who developed the theory of relativity, one of the two pillars of modern physics (alongside quantum mechanics). His work is also known for its influence on the philosophy of science. He is best known to the general public for his mass–energy equivalence formula E = mc2, which has been dubbed \\&quot;the world&#39;s most famous equation\\&quot;. He received the 1921 Nobel Prize in Physics \\&quot;for his services to theoretical physics, and especially for his discovery of the law of the photoelectric effect\\&quot;, a pivotal step in the development of quantum theory.</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">question: In what year did Einstein win the Nobel prize?</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>今回作成する自動回答システムは，このような問題に対して， context に含まれる文字列から正解となる言葉を見つけ出すものとする． 上の問題では，次のような回答を返すべきである．</p><pre><code>answer: 1921
</code></pre><p>人間にとっては，このような文章を理解することは容易であるが，コンピュータにそれを解かせるのは難しいことは容易に想像ができるだろう． しかし，近年の深層学習を使った自然言語処理の進歩は著しく，上で示したような例題などは極めて高い正答率で回答できるモデルを作ることができる．</p><p>今回は， <a href="https://github.com/huggingface/transformers" target="_blank" rel="noreferrer">huggingface/transformers</a> で公開されている学習済みの言語モデルを利用することで，上で定義した問題を解く Q&amp;A ボットを作る． この Q&amp;A ボットは <a href="https://en.wikipedia.org/wiki/Transformer_(machine_learning_model)" target="_blank" rel="noreferrer">Transformer</a> とよばれるモデルを使った自然言語処理に支えられえている (<a href="#transformer_architecture">figure_title</a>)． このプログラムを， Docker にパッケージしたものが <a href="https://hub.docker.com/repository/docker/tomomano/qabot" target="_blank" rel="noreferrer">著者の Docker Hub リポジトリ</a> に用意してある． クラウドの設計に入る前に，まずはこのプログラムを単体で動かしてみよう．</p><p><img src="`+o+`" alt="Transformer モデルアーキテクチャ (画像出典: Vaswani+ 2017)"></p><p>なお，今回は学習済みのモデルを用いているので，私達が行うのは与えられた入力をモデルに投入して予測を行う (推論) のみである． 推論の演算は， CPU だけでも十分高速に行うことができるので，コストの削減と，実装をシンプルにする目的で，このハンズオンでは GPU は利用しない． 一般的に， ニューラルネットは学習のほうが圧倒的に計算コストが大きく，そのような場合に GPU はより威力を発揮する．</p><p>次のコマンドで，今回使う Docker image を ローカルにダウンロード (pull) してこよう．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">pull</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">tomomano/qabot:latest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tomomano/qabot:latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>pull できたら，早速この Docker に質問を投げかけてみよう． まずは context と question をコマンドラインの変数として定義する．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">context=&quot;Albert Einstein (14 March 1879 – 18 April 1955) was a German-born theoretical physicist who developed the theory of relativity, one of the two pillars of modern physics (alongside quantum mechanics). His work is also known for its influence on the philosophy of science. He is best known to the general public for his mass–energy equivalence formula E = mc2, which has been dubbed the world&#39;s most famous equation. He received the 1921 Nobel Prize in Physics for his services to theoretical physics, and especially for his discovery of the law of the photoelectric effect, a pivotal step in the development of quantum theory.&quot;</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">question=&quot;In what year did Einstein win the Nobel prize ?&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">context=&quot;Albert Einstein (14 March 1879 – 18 April 1955) was a German-born theoretical physicist who developed the theory of relativity, one of the two pillars of modern physics (alongside quantum mechanics). His work is also known for its influence on the philosophy of science. He is best known to the general public for his mass–energy equivalence formula E = mc2, which has been dubbed the world&#39;s most famous equation. He received the 1921 Nobel Prize in Physics for his services to theoretical physics, and especially for his discovery of the law of the photoelectric effect, a pivotal step in the development of quantum theory.&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">question=&quot;In what year did Einstein win the Nobel prize ?&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>そうしたら，次のコマンドによってコンテナを実行する．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">run</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">tomomano/qabot</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;\${</span><span style="color:#ADBAC7;">context</span><span style="color:#96D0FF;">}&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;\${</span><span style="color:#ADBAC7;">question</span><span style="color:#96D0FF;">}&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">foo</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--no_save</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tomomano/qabot</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">context</span><span style="color:#032F62;">}&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">question</span><span style="color:#032F62;">}&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--no_save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>今回用意した Docker image は，第一引数に context となる文字列を，第二引数に question に相当する文字列を受けつける． 第三引数，第四引数については，クラウドに展開するときの実装上の都合なので，いまは気にしなくてよい．</p><p>このコマンドを実行すると，次のような出力が得られるはずである．</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">{ </span><span style="color:#8DDB8C;">&quot;score&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">0.9881729286683587</span><span style="color:#ADBAC7;">, </span><span style="color:#8DDB8C;">&quot;start&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">437</span><span style="color:#ADBAC7;">, </span><span style="color:#8DDB8C;">&quot;end&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">441</span><span style="color:#ADBAC7;">, </span><span style="color:#8DDB8C;">&quot;answer&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&quot;1921&quot;</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span><span style="color:#005CC5;">&quot;score&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0.9881729286683587</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;start&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">437</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;end&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">441</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;answer&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1921&quot;</span><span style="color:#24292E;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>&quot;score&quot; は正解の自信度を表す数字で， [0,1] の範囲で与えられる． &quot;start&quot;, &quot;end&quot; は， context 中の何文字目が正解に相当するかを示しており， &quot;answer&quot; が正解と予測された文字列である． 1921 年という，正しい答えが返ってきていることに注目してほしい．</p><p>もう少し難しい質問を投げかけてみよう．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">question=&quot;Why did Einstein win the Nobel prize ?&quot;</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">run</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">tomomano/qabot</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;\${</span><span style="color:#ADBAC7;">context</span><span style="color:#96D0FF;">}&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;\${</span><span style="color:#ADBAC7;">question</span><span style="color:#96D0FF;">}&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">foo</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--no_save</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">question=&quot;Why did Einstein win the Nobel prize ?&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tomomano/qabot</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">context</span><span style="color:#032F62;">}&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">question</span><span style="color:#032F62;">}&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--no_save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>出力：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">{</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">&quot;score&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">0.5235594527494207</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">&quot;start&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">470</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">&quot;end&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">506</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">&quot;answer&quot;</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&quot;his services to theoretical physics,&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;score&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0.5235594527494207</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;start&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">470</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;end&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">506</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;answer&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;his services to theoretical physics,&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>今度は， score が 0.52 と，少し自信がないようだが，それでも正しい答えにたどりつけていることがわかる．</p><p>このように， 深層学習に支えられた言語モデルを用いることで，実用にも役に立ちそうな Q&amp;A ボットを実現できていることがわかる． 以降では，このプログラムをクラウドに展開することで，大量の質問に自動で対応できるようなシステムを設計していく．</p><p>今回使用する Question &amp; Answering システムには， DistilBERT という Transformer を基にした言語モデルが用いられている． 興味のある読者は， <a href="https://arxiv.org/abs/1910.01108" target="_blank" rel="noreferrer">原著論文</a> を参照してもらいたい． また， huggingface/transformers による DistilBert の実装のドキュメンテーションは <a href="https://huggingface.co/transformers/model_doc/distilbert.html" target="_blank" rel="noreferrer">公式ドキュメンテーション</a> を参照のこと．</p><p>今回提供する Q-A ボットの Docker のソースコードは <a href="https://github.com/andatoshiki/toshiki-notebookblob/main/handson/qa-bot/docker/Dockerfile" target="_blank" rel="noreferrer">https://github.com/andatoshiki/toshiki-notebookblob/main/handson/qa-bot/docker/Dockerfile</a> にある．</p><h2 id="アプリケーションの説明" tabindex="-1">アプリケーションの説明 <a class="header-anchor" href="#アプリケーションの説明" aria-label="Permalink to &quot;アプリケーションの説明&quot;">​</a></h2><p>このハンズオンで作成するアプリケーションの概要を <a href="#handson_03_architecture">figure_title</a> に示す．</p><p><img src="`+e+`" alt="アプリケーションのアーキテクチャ"></p><p>簡単にまとめると，以下のような設計である．</p><ul><li><p>クライアントは，質問を AWS 上のアプリケーションに送信する．</p></li><li><p>質問のタスクは ECS によって処理される．</p></li><li><p>ECS は， Docker Hub から，イメージをダウンロードする．</p></li><li><p>次に，ECS はクラスター内に新たな Fargate インスタンスを立ち上げ，ダウンロードされた Docker イメージをこの新規インスタンスに配置する．</p><ul><li>このとき，一つの質問に対し一つの Fargate インスタンスを立ち上げることで，複数の質問を並列的に処理できるようにする．</li></ul></li><li><p>ジョブが実行される．</p></li><li><p>ジョブの実行結果 (質問への回答) は， データベース (DynamoDB) に書き込まれる．</p></li><li><p>最後に，クライアントは DynamoDB から質問への回答を読み取る．</p></li></ul><p>それでは，プログラムのソースコードを見てみよう (<a href="https://github.com/andatoshiki/toshiki-notebookblob/main/handson/qa-bot/app.py" target="_blank" rel="noreferrer">handson/qa-bot/app.py</a>)．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">EcsClusterQaBot</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">core</span><span style="color:#ADBAC7;">.</span><span style="color:#6CB6FF;">Stack</span><span style="color:#ADBAC7;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">__init__</span><span style="color:#ADBAC7;">(self, scope: core.App, name: </span><span style="color:#6CB6FF;">str</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">**</span><span style="color:#ADBAC7;">kwargs) -&gt; </span><span style="color:#6CB6FF;">None</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">().</span><span style="color:#6CB6FF;">__init__</span><span style="color:#ADBAC7;">(scope, name, </span><span style="color:#F47067;">**</span><span style="color:#ADBAC7;">kwargs)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">#</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;"># dynamoDB table to store questions and answers</span></span>
<span class="line"><span style="color:#ADBAC7;">        table </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> dynamodb.Table(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;EcsClusterQaBot-Table&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">partition_key</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">dynamodb.Attribute(</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F69D50;">name</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;item_id&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">type</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">dynamodb.AttributeType.</span><span style="color:#6CB6FF;">STRING</span></span>
<span class="line"><span style="color:#ADBAC7;">            ),</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">billing_mode</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">dynamodb.BillingMode.</span><span style="color:#6CB6FF;">PAY_PER_REQUEST</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">removal_policy</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">core.RemovalPolicy.</span><span style="color:#6CB6FF;">DESTROY</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">#</span></span>
<span class="line"><span style="color:#ADBAC7;">        vpc </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> ec2.Vpc(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;EcsClusterQaBot-Vpc&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">max_azs</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">#</span></span>
<span class="line"><span style="color:#ADBAC7;">        cluster </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> ecs.Cluster(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;EcsClusterQaBot-Cluster&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">vpc</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">vpc,</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">#</span></span>
<span class="line"><span style="color:#ADBAC7;">        taskdef </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> ecs.FargateTaskDefinition(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;EcsClusterQaBot-TaskDef&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">cpu</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">1024</span><span style="color:#ADBAC7;">, </span><span style="color:#768390;"># 1 CPU</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">memory_limit_mib</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">4096</span><span style="color:#ADBAC7;">, </span><span style="color:#768390;"># 4GB RAM</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;"># grant permissions</span></span>
<span class="line"><span style="color:#ADBAC7;">        table.grant_read_write_data(taskdef.task_role)</span></span>
<span class="line"><span style="color:#ADBAC7;">        taskdef.add_to_task_role_policy(</span></span>
<span class="line"><span style="color:#ADBAC7;">            iam.PolicyStatement(</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F69D50;">effect</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">iam.Effect.</span><span style="color:#6CB6FF;">ALLOW</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F69D50;">resources</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[</span><span style="color:#96D0FF;">&quot;*&quot;</span><span style="color:#ADBAC7;">],</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F69D50;">actions</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[</span><span style="color:#96D0FF;">&quot;ssm:GetParameter&quot;</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">            )</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">#</span></span>
<span class="line"><span style="color:#ADBAC7;">        container </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> taskdef.add_container(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#96D0FF;">&quot;EcsClusterQaBot-Container&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">image</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">ecs.ContainerImage.from_registry(</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#96D0FF;">&quot;tomomano/qabot:latest&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">            ),</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EcsClusterQaBot</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">core</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Stack</span><span style="color:#24292E;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, scope: core.App, name: </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs) -&gt; </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(scope, name, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">#</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># dynamoDB table to store questions and answers</span></span>
<span class="line"><span style="color:#24292E;">        table </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dynamodb.Table(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;EcsClusterQaBot-Table&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">partition_key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dynamodb.Attribute(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;item_id&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dynamodb.AttributeType.</span><span style="color:#005CC5;">STRING</span></span>
<span class="line"><span style="color:#24292E;">            ),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">billing_mode</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dynamodb.BillingMode.</span><span style="color:#005CC5;">PAY_PER_REQUEST</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">removal_policy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">core.RemovalPolicy.</span><span style="color:#005CC5;">DESTROY</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">#</span></span>
<span class="line"><span style="color:#24292E;">        vpc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ec2.Vpc(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;EcsClusterQaBot-Vpc&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">max_azs</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">#</span></span>
<span class="line"><span style="color:#24292E;">        cluster </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ecs.Cluster(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;EcsClusterQaBot-Cluster&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">vpc</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">vpc,</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">#</span></span>
<span class="line"><span style="color:#24292E;">        taskdef </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ecs.FargateTaskDefinition(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;EcsClusterQaBot-TaskDef&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">cpu</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">, </span><span style="color:#6A737D;"># 1 CPU</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">memory_limit_mib</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">4096</span><span style="color:#24292E;">, </span><span style="color:#6A737D;"># 4GB RAM</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># grant permissions</span></span>
<span class="line"><span style="color:#24292E;">        table.grant_read_write_data(taskdef.task_role)</span></span>
<span class="line"><span style="color:#24292E;">        taskdef.add_to_task_role_policy(</span></span>
<span class="line"><span style="color:#24292E;">            iam.PolicyStatement(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#E36209;">effect</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">iam.Effect.</span><span style="color:#005CC5;">ALLOW</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#E36209;">resources</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#E36209;">actions</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;ssm:GetParameter&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">            )</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">#</span></span>
<span class="line"><span style="color:#24292E;">        container </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> taskdef.add_container(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;EcsClusterQaBot-Container&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">image</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ecs.ContainerImage.from_registry(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;tomomano/qabot:latest&quot;</span></span>
<span class="line"><span style="color:#24292E;">            ),</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><ul><li><p>ここでは，回答の結果を書き込むためのデータベースを用意している． DynamoDB については，サーバーレスアーキテクチャの章で扱うので，今は気にしなくてよい．</p></li><li><p>ここでは，ハンズオン #1, #2 で行ったのと同様に， VPC を定義している．</p></li><li><p>ここで， ECS のクラスター (cluster) を定義している． クラスターとは，仮想サーバーのプールのことであり，クラスターの中に複数の仮想インスタンスを配置する．</p></li><li><p>ここで，実行するタスクを定義している (task definition)．</p></li><li><p>ここで， タスクの実行で使用する Docker イメージを定義している．</p></li></ul><h3 id="ecs-と-fargate" tabindex="-1">ECS と Fargate <a class="header-anchor" href="#ecs-と-fargate" aria-label="Permalink to &quot;ECS と Fargate&quot;">​</a></h3><p>ECS と Fargate の部分について，コードをくわしく見てみよう．</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">cluster </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> ecs.Cluster(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;EcsClusterQaBot-Cluster&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">vpc</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">vpc,</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">taskdef </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> ecs.FargateTaskDefinition(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;EcsClusterQaBot-TaskDef&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">cpu</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">1024</span><span style="color:#ADBAC7;">, </span><span style="color:#768390;"># 1 CPU</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">memory_limit_mib</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">4096</span><span style="color:#ADBAC7;">, </span><span style="color:#768390;"># 4GB RAM</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">container </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> taskdef.add_container(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#96D0FF;">&quot;EcsClusterQaBot-Container&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">image</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">ecs.ContainerImage.from_registry(</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#96D0FF;">&quot;tomomano/qabot:latest&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    ),</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cluster </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ecs.Cluster(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;EcsClusterQaBot-Cluster&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">vpc</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">vpc,</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">taskdef </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ecs.FargateTaskDefinition(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;EcsClusterQaBot-TaskDef&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">cpu</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">, </span><span style="color:#6A737D;"># 1 CPU</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">memory_limit_mib</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">4096</span><span style="color:#24292E;">, </span><span style="color:#6A737D;"># 4GB RAM</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">container </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> taskdef.add_container(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;EcsClusterQaBot-Container&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">image</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ecs.ContainerImage.from_registry(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;tomomano/qabot:latest&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ),</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><code>cluster =</code> の箇所で，空の ECS クラスターを定義している．</p><p>次に， <code>taskdef=ecs.FargateTaskDefinition</code> の箇所で， Fargate インスタンスを使ったタスクを定義しており，とくにここでは 1 CPU, 4GB RAM というマシンスペックを指定している． また，このようにして定義されたタスクは，デフォルトで 1 タスクにつき 1 インスタンスが使用される．</p><p>最後に， <code>container =</code> の箇所で，タスクの実行で使用する Docker image を定義している． ここでは， Docker Hub に置いてある image をダウンロードしてくるよう指定している．</p><p>このようにわずか数行のコードであるが，これだけで前述したような，タスクのスケジューリングなどが自動で実行される．</p><p>このコードで <code>cpu=1024</code> と指定されているのに注目してほしい． これは CPU ユニットと呼ばれる数で， 以下の換算表に従って仮想 CPU (virtual CPU; vCPU) が割り当てられる． 1024 が 1 CPU に相当する． 0.25 や 0.5 vCPU などの数字は，それぞれ実効的に 1/4, 1/2 の CPU 時間が割り当てられることを意味する． また， CPU ユニットによって使用できるメモリー量も変わってくる． たとえば， 1024 CPU ユニットを選択した場合は， 2 から 8 GB の範囲でのみメモリー量を指定することができる． 最新の情報は <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html" target="_blank" rel="noreferrer">公式ドキュメンテーション &quot;Amazon ECS on AWS Fargate&quot;</a> を参照のこと．</p><table><caption>CPU　ユニットと 指定可能なメモリー量の換算表</caption><colgroup><col style="width:50%;"><col style="width:50%;"></colgroup><tbody><tr class="odd"><td><p>CPU ユニット</p></td><td><p>メモリーの値</p></td></tr><tr class="even"><td><p>256 (.25 vCPU)</p></td><td><p>0.5 GB, 1 GB, 2 GB</p></td></tr><tr class="odd"><td><p>512 (.5 vCPU)</p></td><td><p>1 GB, 2 GB, 3 GB, 4 GB</p></td></tr><tr class="even"><td><p>1024 (1 vCPU)</p></td><td><p>2 GB, 3 GB, 4 GB, 5 GB, 6 GB, 7 GB, 8 GB</p></td></tr><tr class="odd"><td><p>2048 (2 vCPU)</p></td><td><p>Between 4 GB and 16 GB in 1-GB increments</p></td></tr><tr class="even"><td><p>4096 (4 vCPU)</p></td><td><p>Between 8 GB and 30 GB in 1-GB increments</p></td></tr></tbody></table><h2 id="スタックのデプロイ" tabindex="-1">スタックのデプロイ <a class="header-anchor" href="#スタックのデプロイ" aria-label="Permalink to &quot;スタックのデプロイ&quot;">​</a></h2><p>スタックの中身が理解できたところで，早速スタックをデプロイしてみよう．</p><p>デプロイの手順は，これまでのハンズオンとほとんど共通である． SSH によるログインの必要がないので，むしろ単純なくらいである． ここでは，コマンドのみ列挙する (<code>#</code> で始まる行はコメントである)． それぞれの意味を忘れてしまった場合は，ハンズオン 1, 2 に戻って復習していただきたい． シークレットキーの設定も忘れずに ( (#aws_cli_install))．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># プロジェクトのディレクトリに移動</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">cd</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">handson/qa-bot</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># venv を作成し，依存ライブラリのインストールを行う</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">python3</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-m</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">venv</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">.env</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">source</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">.env/bin/activate</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">pip</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">install</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-r</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># デプロイを実行</span></span>
<span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">cdk</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">deploy</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># プロジェクトのディレクトリに移動</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">handson/qa-bot</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># venv を作成し，依存ライブラリのインストールを行う</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python3</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">venv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.env</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">source</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.env/bin/activate</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-r</span><span style="color:#24292E;"> </span><span style="color:#032F62;">requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># デプロイを実行</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cdk</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deploy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>デプロイのコマンドが無事に実行されれば， <a href="#handson_03_cdk_output">figure_title</a> のような出力が得られるはずである．</p><p><img src="`+t+'" alt="CDKデプロイ実行後の出力"></p><p>AWS コンソールにログインして，デプロイされたスタックの中身を確認してみよう． コンソールから，ECS のページに行くと <a href="#handson_03_ecs_console">figure_title</a> のような画面が表示されるはずである． <code>EcsClusterQaBot-XXXX</code> という名前ついたクラスターを見つけよう．</p><p>Cluster というのが，先ほど説明したとおり，複数の仮想インスタンスを束ねる一つの単位である． <a href="#handson_03_ecs_console">figure_title</a> で， FARGATE という文字の下に <code>0 Running tasks</code>, <code>0 Pending tasks</code> と表示されていることを確認しよう． この時点では一つもタスクが走っていないので，数字はすべて 0 になっている．</p><p><img src="'+r+'" alt="ECS コンソール画面"></p><p>続いて，この画面の左のメニューバーから <code>Task Definitions</code> という項目を見つけ，クリックしよう． 移動した先のページで <code>EcsClusterQaBotEcsClusterQaBotTaskDefXXXX</code> という項目が見つかるので，開く． 開いた先のページをスクロールすると <a href="#handson_03_ecs_task_definition">figure_title</a> に示したような情報が見つかるだろう． 使用する CPU ・メモリーの量や， Docker container の実行に関する設定などが，この Task Definition の画面から確認することができる．</p><p><img src="'+c+'" alt="Task definition の確認"></p><h2 id="タスクの実行" tabindex="-1">タスクの実行 <a class="header-anchor" href="#タスクの実行" aria-label="Permalink to &quot;タスクの実行&quot;">​</a></h2><p>それでは，質問をデプロイしたクラウドに提出してみよう．</p><p>ECS にタスクを投入するのはやや複雑なので，タスクの投入を簡単にするプログラム (<code>run_task.py</code>) を用意した (<a href="https://github.com/andatoshiki/toshiki-notebookblob/main/handson/qa-bot/run_task.py" target="_blank" rel="noreferrer">handson/qa-bot/run_task.py</a>)．</p><p>次のようなコマンドで，ECS クラスターに新しい質問を投入することができる．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">python</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">run_task.py</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">ask</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;A giant peach was flowing in the river. She picked it up and brought it home. Later, a healthy baby was born from the peach. She named the baby Momotaro.&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;What is the name of the baby?&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run_task.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ask</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;A giant peach was flowing in the river. She picked it up and brought it home. Later, a healthy baby was born from the peach. She named the baby Momotaro.&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;What is the name of the baby?&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>run_task.py</code> を実行するには， コマンドラインで AWS の認証情報が設定されていることが前提である．</p><p>&quot;ask&quot; の引数に続き，文脈 (context) と質問 (question) を引数として渡している．</p><p>このコマンドを実行すると， &quot;Waiting for the task to finish…&quot; と出力が表示され，回答を得るまでしばらく待たされる． この間， AWS では ECS がタスクを受理し，新しい Fargate のインスタンスを起動し， Docker イメージをそのインスタンスに配置する，という一連の処理がなされている． AWS コンソールから，この一連の様子をモニタリングしてみよう．</p><p>先ほどの ECS コンソール画面にもどり，クラスターの名前をクリックすることで，クラスターの詳細画面を開く． 次に， &quot;Tasks&quot; という名前のタブがあるので，それを開く (<a href="#ecs_task_monitoring">figure_title</a>)． すると，実行中のタスクの一覧が表示されるだろう．</p><p><img src="'+i+'" alt="ECS のタスクの実行状況をモニタリング"></p><p><a href="#ecs_task_monitoring">figure_title</a> で見て取れるように， &quot;Last status = Pending&quot; となっていることから，この時点では，タスクを実行する準備をしている段階である，ということがわかる． Fargate のインスタンスを起動し， Docker image を配置するまでおよそ 1-2 分の時間がかかる．</p><p>しばらく待つうちに， Status が &quot;RUNNING&quot; に遷移し，計算が始まる． 計算が終わると， Status は &quot;STOPPED&quot; に遷移し， ECS によって Fargate インスタンスは自動的にシャットダウンされる．</p><p><a href="#ecs_task_monitoring">figure_title</a> の画面から， &quot;Task&quot; の列にあるタスク ID クリックすることで，タスクの詳細画面を開いてみよう (<a href="#ecs_task_detail">figure_title</a>)． &quot;Last status&quot;, &quot;Platform version&quot; など，タスクの情報が表示されている． また， &quot;Logs&quot; のタブを開くことで，コンテナの吐き出した実行ログを閲覧することができる．</p><p><img src="'+y+'" alt="質問タスクの実行結果"></p><p>さて， <code>run_task.py</code> を実行したコマンドラインに戻ってきてみると， <a href="#ask_question_output">figure_title</a> のような出力が得られているはずである． &quot;Momotaro&quot; という正しい回答が返ってきている！</p><p><img src="'+u+'" alt="質問タスクの実行結果"></p><h2 id="タスクの同時実行" tabindex="-1">タスクの同時実行 <a class="header-anchor" href="#タスクの同時実行" aria-label="Permalink to &quot;タスクの同時実行&quot;">​</a></h2><p>さて，先ほどはたった一つの質問を投入したわけだが，今回設計したアプリケーションは， ECS と Fargate を使うことで同時にたくさんの質問を処理することができる． 実際に，たくさんの質問を一度に投入してみよう． <code>run_task.py</code> に <code>ask_many</code> というオプションを付けることで，複数の質問を一度に送信できる． 質問の内容は <a href="https://github.com/andatoshiki/toshiki-notebookblob/main/handson/qa-bot/problems.json" target="_blank" rel="noreferrer">handson/qa-bot/problems.json</a> に定義されている．</p><p>次のようなコマンドを実行しよう．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">python</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">run_task.py</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">ask_many</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run_task.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ask_many</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>このコマンドを実行した後で，先ほどの ECS コンソールに行き，タスクの一覧を見てみよう (<a href="#ecs_many_tasks">figure_title</a>)． 複数の Fargate インスタンスが起動され，タスクが並列に実行されているのがわかる．</p><p><img src="'+d+'" alt="複数の質問タスクを同時に投入する"></p><p>すべてのタスクのステータスが &quot;STOPPED&quot; になったことを確認した上で，質問への回答を取得しよう． それには，次のコマンドを実行する．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">python</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">run_task.py</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">list_answers</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run_task.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list_answers</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>結果として， <a href="#ask_many_output">figure_title</a> のような出力が得られるだろう． 複雑な文章問題に対し，高い正答率で回答できていることがわかるだろう．</p><p><img src="'+A+'" alt=" の実行結果"></p><p>おめでとう！ ここまでついてこれた読者はとても初歩的ながらも，深層学習による言語モデルを使って自動で質問への回答を生成するシステムを創り上げることができた！ それも，数百の質問にも同時に対応できるような，とても高いスケーラビリティーをもったシステムである！ 今回は GUI (Graphical User Interface) を用意することはしなかったが，このシステムに簡単な GUI を追加すればなかなか立派なウェブサービスとして運用できるだろう．</p><p><code>run_task.py</code> で質問を投入し続けると，回答を記録しているデータベースにどんどんエントリーが溜まっていく． これらのエントリーをすべて消去するには，次のコマンドを使う．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">python</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">run_task.py</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">clear</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run_task.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clear</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="スタックの削除" tabindex="-1">スタックの削除 <a class="header-anchor" href="#スタックの削除" aria-label="Permalink to &quot;スタックの削除&quot;">​</a></h2><p>これにて，今回のハンズオンは終了である． 最後にスタックを削除しよう．</p><p>スタックを削除するには，前回までと同様に， AWS コンソールにログインし CloudFormation の画面から DELETE ボタンをクリックするか，コマンドラインからコマンドを実行する． コマンドラインから行う場合は，次のコマンドを使用する．</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">$</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">cdk</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">destroy</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cdk</span><span style="color:#24292E;"> </span><span style="color:#032F62;">destroy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',102))])}const $=b(E,[["render",B]]);export{G as __pageData,$ as default};
